
E:\ARM\Atollic\SecurityLock\Debug\SecurityLock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013c4  08003db8  08003db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800517c  0800517c  0001517c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005184  08005184  00015184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005188  08005188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000010c  20000000  0800518c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000011c  2000010c  08005298  0002010c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000228  08005298  00020228  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e945  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002248  00000000  00000000  0002ea81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008052  00000000  00000000  00030cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000af0  00000000  00000000  00038d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000db8  00000000  00000000  00039810  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005449  00000000  00000000  0003a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003e97  00000000  00000000  0003fa11  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  000438a8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000280c  00000000  00000000  00043928  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000010c 	.word	0x2000010c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003da0 	.word	0x08003da0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000110 	.word	0x20000110
 80001cc:	08003da0 	.word	0x08003da0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97e 	b.w	8000584 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460e      	mov	r6, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9d08      	ldr	r5, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d150      	bne.n	8000352 <__udivmoddi4+0xb2>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96c      	bls.n	8000390 <__udivmoddi4+0xf0>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0420 	rsb	r4, lr, #32
 80002c4:	fa20 f404 	lsr.w	r4, r0, r4
 80002c8:	fa01 f60e 	lsl.w	r6, r1, lr
 80002cc:	ea44 0c06 	orr.w	ip, r4, r6
 80002d0:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80002dc:	0c22      	lsrs	r2, r4, #16
 80002de:	fbbc f0f9 	udiv	r0, ip, r9
 80002e2:	fa1f f887 	uxth.w	r8, r7
 80002e6:	fb09 c610 	mls	r6, r9, r0, ip
 80002ea:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80002ee:	fb00 f308 	mul.w	r3, r0, r8
 80002f2:	42b3      	cmp	r3, r6
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0x6a>
 80002f6:	19f6      	adds	r6, r6, r7
 80002f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fc:	f080 8122 	bcs.w	8000544 <__udivmoddi4+0x2a4>
 8000300:	42b3      	cmp	r3, r6
 8000302:	f240 811f 	bls.w	8000544 <__udivmoddi4+0x2a4>
 8000306:	3802      	subs	r0, #2
 8000308:	443e      	add	r6, r7
 800030a:	1af6      	subs	r6, r6, r3
 800030c:	b2a2      	uxth	r2, r4
 800030e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000312:	fb09 6613 	mls	r6, r9, r3, r6
 8000316:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800031a:	fb03 f808 	mul.w	r8, r3, r8
 800031e:	45a0      	cmp	r8, r4
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x96>
 8000322:	19e4      	adds	r4, r4, r7
 8000324:	f103 32ff 	add.w	r2, r3, #4294967295
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x2a0>
 800032c:	45a0      	cmp	r8, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x2a0>
 8000332:	3b02      	subs	r3, #2
 8000334:	443c      	add	r4, r7
 8000336:	ebc8 0404 	rsb	r4, r8, r4
 800033a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	2d00      	cmp	r5, #0
 8000342:	d062      	beq.n	800040a <__udivmoddi4+0x16a>
 8000344:	fa24 f40e 	lsr.w	r4, r4, lr
 8000348:	2300      	movs	r3, #0
 800034a:	602c      	str	r4, [r5, #0]
 800034c:	606b      	str	r3, [r5, #4]
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	428b      	cmp	r3, r1
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0xc6>
 8000356:	2d00      	cmp	r5, #0
 8000358:	d055      	beq.n	8000406 <__udivmoddi4+0x166>
 800035a:	2100      	movs	r1, #0
 800035c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000360:	4608      	mov	r0, r1
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	f040 8090 	bne.w	8000490 <__udivmoddi4+0x1f0>
 8000370:	42b3      	cmp	r3, r6
 8000372:	d302      	bcc.n	800037a <__udivmoddi4+0xda>
 8000374:	4282      	cmp	r2, r0
 8000376:	f200 80f8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 800037a:	1a84      	subs	r4, r0, r2
 800037c:	eb66 0603 	sbc.w	r6, r6, r3
 8000380:	2001      	movs	r0, #1
 8000382:	46b4      	mov	ip, r6
 8000384:	2d00      	cmp	r5, #0
 8000386:	d040      	beq.n	800040a <__udivmoddi4+0x16a>
 8000388:	e885 1010 	stmia.w	r5, {r4, ip}
 800038c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000390:	b912      	cbnz	r2, 8000398 <__udivmoddi4+0xf8>
 8000392:	2701      	movs	r7, #1
 8000394:	fbb7 f7f2 	udiv	r7, r7, r2
 8000398:	fab7 fe87 	clz	lr, r7
 800039c:	f1be 0f00 	cmp.w	lr, #0
 80003a0:	d135      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a2:	1bf3      	subs	r3, r6, r7
 80003a4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b2:	0c22      	lsrs	r2, r4, #16
 80003b4:	fb08 3610 	mls	r6, r8, r0, r3
 80003b8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80003bc:	fb0c f300 	mul.w	r3, ip, r0
 80003c0:	42b3      	cmp	r3, r6
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19f6      	adds	r6, r6, r7
 80003c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42b3      	cmp	r3, r6
 80003ce:	f200 80ce 	bhi.w	800056e <__udivmoddi4+0x2ce>
 80003d2:	4610      	mov	r0, r2
 80003d4:	1af6      	subs	r6, r6, r3
 80003d6:	b2a2      	uxth	r2, r4
 80003d8:	fbb6 f3f8 	udiv	r3, r6, r8
 80003dc:	fb08 6613 	mls	r6, r8, r3, r6
 80003e0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 80003e4:	fb0c fc03 	mul.w	ip, ip, r3
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f103 32ff 	add.w	r2, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b5 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 80003fa:	4613      	mov	r3, r2
 80003fc:	ebcc 0404 	rsb	r4, ip, r4
 8000400:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000404:	e79c      	b.n	8000340 <__udivmoddi4+0xa0>
 8000406:	4629      	mov	r1, r5
 8000408:	4628      	mov	r0, r5
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0120 	rsb	r1, lr, #32
 8000412:	fa06 f30e 	lsl.w	r3, r6, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f901 	lsr.w	r9, r0, r1
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	40ce      	lsrs	r6, r1
 8000424:	ea49 0903 	orr.w	r9, r9, r3
 8000428:	fbb6 faf8 	udiv	sl, r6, r8
 800042c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000430:	fb08 661a 	mls	r6, r8, sl, r6
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800043c:	fb0a f20c 	mul.w	r2, sl, ip
 8000440:	429a      	cmp	r2, r3
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d90a      	bls.n	800045e <__udivmoddi4+0x1be>
 8000448:	19db      	adds	r3, r3, r7
 800044a:	f10a 31ff 	add.w	r1, sl, #4294967295
 800044e:	f080 8087 	bcs.w	8000560 <__udivmoddi4+0x2c0>
 8000452:	429a      	cmp	r2, r3
 8000454:	f240 8084 	bls.w	8000560 <__udivmoddi4+0x2c0>
 8000458:	f1aa 0a02 	sub.w	sl, sl, #2
 800045c:	443b      	add	r3, r7
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fa1f f989 	uxth.w	r9, r9
 8000464:	fbb3 f1f8 	udiv	r1, r3, r8
 8000468:	fb08 3311 	mls	r3, r8, r1, r3
 800046c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000470:	fb01 f60c 	mul.w	r6, r1, ip
 8000474:	429e      	cmp	r6, r3
 8000476:	d907      	bls.n	8000488 <__udivmoddi4+0x1e8>
 8000478:	19db      	adds	r3, r3, r7
 800047a:	f101 32ff 	add.w	r2, r1, #4294967295
 800047e:	d26b      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 8000480:	429e      	cmp	r6, r3
 8000482:	d969      	bls.n	8000558 <__udivmoddi4+0x2b8>
 8000484:	3902      	subs	r1, #2
 8000486:	443b      	add	r3, r7
 8000488:	1b9b      	subs	r3, r3, r6
 800048a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800048e:	e78e      	b.n	80003ae <__udivmoddi4+0x10e>
 8000490:	f1c1 0e20 	rsb	lr, r1, #32
 8000494:	fa22 f40e 	lsr.w	r4, r2, lr
 8000498:	408b      	lsls	r3, r1
 800049a:	4323      	orrs	r3, r4
 800049c:	fa20 f70e 	lsr.w	r7, r0, lr
 80004a0:	fa06 f401 	lsl.w	r4, r6, r1
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	fa26 f60e 	lsr.w	r6, r6, lr
 80004ac:	433c      	orrs	r4, r7
 80004ae:	fbb6 f9fc 	udiv	r9, r6, ip
 80004b2:	0c27      	lsrs	r7, r4, #16
 80004b4:	fb0c 6619 	mls	r6, ip, r9, r6
 80004b8:	fa1f f883 	uxth.w	r8, r3
 80004bc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 80004c0:	fb09 f708 	mul.w	r7, r9, r8
 80004c4:	42b7      	cmp	r7, r6
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	fa00 fa01 	lsl.w	sl, r0, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x242>
 80004d0:	18f6      	adds	r6, r6, r3
 80004d2:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d6:	d241      	bcs.n	800055c <__udivmoddi4+0x2bc>
 80004d8:	42b7      	cmp	r7, r6
 80004da:	d93f      	bls.n	800055c <__udivmoddi4+0x2bc>
 80004dc:	f1a9 0902 	sub.w	r9, r9, #2
 80004e0:	441e      	add	r6, r3
 80004e2:	1bf6      	subs	r6, r6, r7
 80004e4:	b2a0      	uxth	r0, r4
 80004e6:	fbb6 f4fc 	udiv	r4, r6, ip
 80004ea:	fb0c 6614 	mls	r6, ip, r4, r6
 80004ee:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 80004f2:	fb04 f808 	mul.w	r8, r4, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x26a>
 80004fa:	18ff      	adds	r7, r7, r3
 80004fc:	f104 30ff 	add.w	r0, r4, #4294967295
 8000500:	d228      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d926      	bls.n	8000554 <__udivmoddi4+0x2b4>
 8000506:	3c02      	subs	r4, #2
 8000508:	441f      	add	r7, r3
 800050a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800050e:	ebc8 0707 	rsb	r7, r8, r7
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	4644      	mov	r4, r8
 800051a:	464e      	mov	r6, r9
 800051c:	d314      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	d029      	beq.n	8000574 <__udivmoddi4+0x2d4>
 8000520:	b365      	cbz	r5, 800057c <__udivmoddi4+0x2dc>
 8000522:	ebba 0304 	subs.w	r3, sl, r4
 8000526:	eb67 0706 	sbc.w	r7, r7, r6
 800052a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800052e:	40cb      	lsrs	r3, r1
 8000530:	40cf      	lsrs	r7, r1
 8000532:	ea4e 0303 	orr.w	r3, lr, r3
 8000536:	e885 0088 	stmia.w	r5, {r3, r7}
 800053a:	2100      	movs	r1, #0
 800053c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000540:	4613      	mov	r3, r2
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x96>
 8000544:	4610      	mov	r0, r2
 8000546:	e6e0      	b.n	800030a <__udivmoddi4+0x6a>
 8000548:	ebb8 0402 	subs.w	r4, r8, r2
 800054c:	eb69 0603 	sbc.w	r6, r9, r3
 8000550:	3801      	subs	r0, #1
 8000552:	e7e5      	b.n	8000520 <__udivmoddi4+0x280>
 8000554:	4604      	mov	r4, r0
 8000556:	e7d8      	b.n	800050a <__udivmoddi4+0x26a>
 8000558:	4611      	mov	r1, r2
 800055a:	e795      	b.n	8000488 <__udivmoddi4+0x1e8>
 800055c:	4681      	mov	r9, r0
 800055e:	e7c0      	b.n	80004e2 <__udivmoddi4+0x242>
 8000560:	468a      	mov	sl, r1
 8000562:	e77c      	b.n	800045e <__udivmoddi4+0x1be>
 8000564:	3b02      	subs	r3, #2
 8000566:	443c      	add	r4, r7
 8000568:	e748      	b.n	80003fc <__udivmoddi4+0x15c>
 800056a:	4608      	mov	r0, r1
 800056c:	e70a      	b.n	8000384 <__udivmoddi4+0xe4>
 800056e:	3802      	subs	r0, #2
 8000570:	443e      	add	r6, r7
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x134>
 8000574:	45c2      	cmp	sl, r8
 8000576:	d3e7      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000578:	463e      	mov	r6, r7
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x280>
 800057c:	4629      	mov	r1, r5
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000588:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800058c:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800058e:	6818      	ldr	r0, [r3, #0]
 8000590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000594:	fbb0 f0f3 	udiv	r0, r0, r3
 8000598:	f000 f878 	bl	800068c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800059c:	2200      	movs	r2, #0
 800059e:	4621      	mov	r1, r4
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295
 80005a4:	f000 f83e 	bl	8000624 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80005a8:	2000      	movs	r0, #0
 80005aa:	bd10      	pop	{r4, pc}
 80005ac:	200000a0 	.word	0x200000a0

080005b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b2:	2003      	movs	r0, #3
 80005b4:	f000 f824 	bl	8000600 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b8:	2000      	movs	r0, #0
 80005ba:	f7ff ffe5 	bl	8000588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005be:	f002 f83b 	bl	8002638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005c2:	2000      	movs	r0, #0
 80005c4:	bd08      	pop	{r3, pc}
	...

080005c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005c8:	4a02      	ldr	r2, [pc, #8]	; (80005d4 <HAL_IncTick+0xc>)
 80005ca:	6813      	ldr	r3, [r2, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000138 	.word	0x20000138

080005d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005d8:	4b01      	ldr	r3, [pc, #4]	; (80005e0 <HAL_GetTick+0x8>)
 80005da:	6818      	ldr	r0, [r3, #0]
}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000138 	.word	0x20000138

080005e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e4:	b538      	push	{r3, r4, r5, lr}
 80005e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff fff6 	bl	80005d8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ec:	1c63      	adds	r3, r4, #1
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
  uint32_t tickstart = HAL_GetTick();
 80005ee:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 80005f0:	bf18      	it	ne
 80005f2:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 80005f4:	f7ff fff0 	bl	80005d8 <HAL_GetTick>
 80005f8:	1b40      	subs	r0, r0, r5
 80005fa:	4284      	cmp	r4, r0
 80005fc:	d8fa      	bhi.n	80005f4 <HAL_Delay+0x10>
  {
  }
}
 80005fe:	bd38      	pop	{r3, r4, r5, pc}

08000600 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000602:	68d3      	ldr	r3, [r2, #12]
 8000604:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	0c1b      	lsrs	r3, r3, #16
 800060c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000610:	0200      	lsls	r0, r0, #8
 8000612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000616:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800061a:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800061c:	60d3      	str	r3, [r2, #12]
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <HAL_NVIC_SetPriority+0x60>)
 8000626:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000628:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800062c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800062e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000632:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000634:	2c04      	cmp	r4, #4
 8000636:	bf28      	it	cs
 8000638:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063a:	2d06      	cmp	r5, #6

  return (
 800063c:	f04f 0501 	mov.w	r5, #1
 8000640:	fa05 f404 	lsl.w	r4, r5, r4
 8000644:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000648:	bf8c      	ite	hi
 800064a:	3b03      	subhi	r3, #3
 800064c:	2300      	movls	r3, #0

  return (
 800064e:	400c      	ands	r4, r1
 8000650:	409c      	lsls	r4, r3
 8000652:	fa05 f303 	lsl.w	r3, r5, r3
 8000656:	3b01      	subs	r3, #1
 8000658:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800065a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800065c:	ea42 0204 	orr.w	r2, r2, r4
 8000660:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	bfaf      	iteee	ge
 8000666:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066a:	f000 000f 	andlt.w	r0, r0, #15
 800066e:	4b06      	ldrlt	r3, [pc, #24]	; (8000688 <HAL_NVIC_SetPriority+0x64>)
 8000670:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	bfa5      	ittet	ge
 8000674:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000678:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000680:	bd30      	pop	{r4, r5, pc}
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00
 8000688:	e000ed14 	.word	0xe000ed14

0800068c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800068c:	3801      	subs	r0, #1
 800068e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000692:	d20a      	bcs.n	80006aa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000698:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	21f0      	movs	r1, #240	; 0xf0
 800069c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006a2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80006aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000e010 	.word	0xe000e010
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006ba:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006bc:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006be:	bf0c      	ite	eq
 80006c0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006c4:	f022 0204 	bicne.w	r2, r2, #4
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	4770      	bx	lr
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006d0:	4770      	bx	lr

080006d2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80006d2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80006d4:	f7ff fffc 	bl	80006d0 <HAL_SYSTICK_Callback>
 80006d8:	bd08      	pop	{r3, pc}
	...

080006dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006e0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006e2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e4:	f8df c168 	ldr.w	ip, [pc, #360]	; 8000850 <HAL_GPIO_Init+0x174>
 80006e8:	4c57      	ldr	r4, [pc, #348]	; (8000848 <HAL_GPIO_Init+0x16c>)
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006ea:	9301      	str	r3, [sp, #4]
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80006ec:	f04f 080f 	mov.w	r8, #15
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 80006f0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006f2:	9a01      	ldr	r2, [sp, #4]
 80006f4:	40da      	lsrs	r2, r3
 80006f6:	f000 80a4 	beq.w	8000842 <HAL_GPIO_Init+0x166>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80006fa:	2201      	movs	r2, #1
 80006fc:	fa02 f903 	lsl.w	r9, r2, r3

    if(iocurrent)
 8000700:	9a01      	ldr	r2, [sp, #4]
 8000702:	ea12 0509 	ands.w	r5, r2, r9
 8000706:	f000 809a 	beq.w	800083e <HAL_GPIO_Init+0x162>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800070a:	684a      	ldr	r2, [r1, #4]
 800070c:	f022 0a10 	bic.w	sl, r2, #16
 8000710:	f1ba 0f02 	cmp.w	sl, #2
 8000714:	d113      	bne.n	800073e <HAL_GPIO_Init+0x62>
 8000716:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800071a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800071e:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000722:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000726:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800072a:	fa08 f60b 	lsl.w	r6, r8, fp
 800072e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000732:	690e      	ldr	r6, [r1, #16]
 8000734:	fa06 f60b 	lsl.w	r6, r6, fp
 8000738:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 800073a:	f8ce 6020 	str.w	r6, [lr, #32]
 800073e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000742:	2603      	movs	r6, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000744:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000746:	fa06 f60e 	lsl.w	r6, r6, lr
 800074a:	43f6      	mvns	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800074c:	f002 0b03 	and.w	fp, r2, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000750:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000752:	fa0b fb0e 	lsl.w	fp, fp, lr
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000756:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800075a:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800075e:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8000762:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000764:	d811      	bhi.n	800078a <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000766:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000768:	ea06 0a07 	and.w	sl, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 800076c:	68cf      	ldr	r7, [r1, #12]
 800076e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000772:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000776:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000778:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800077a:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800077e:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8000782:	409f      	lsls	r7, r3
 8000784:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000788:	6047      	str	r7, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800078a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 800078c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800078e:	688f      	ldr	r7, [r1, #8]
 8000790:	fa07 f70e 	lsl.w	r7, r7, lr
 8000794:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000796:	60c6      	str	r6, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000798:	00d6      	lsls	r6, r2, #3
 800079a:	d550      	bpl.n	800083e <HAL_GPIO_Init+0x162>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079c:	f8dc 6060 	ldr.w	r6, [ip, #96]	; 0x60
 80007a0:	f046 0601 	orr.w	r6, r6, #1
 80007a4:	f8cc 6060 	str.w	r6, [ip, #96]	; 0x60
 80007a8:	f8dc 6060 	ldr.w	r6, [ip, #96]	; 0x60
 80007ac:	f006 0601 	and.w	r6, r6, #1
 80007b0:	9603      	str	r6, [sp, #12]
 80007b2:	9e03      	ldr	r6, [sp, #12]
 80007b4:	f023 0603 	bic.w	r6, r3, #3
 80007b8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80007bc:	f506 3680 	add.w	r6, r6, #65536	; 0x10000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007c0:	f003 0903 	and.w	r9, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 80007c4:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007c6:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80007ca:	fa08 fe09 	lsl.w	lr, r8, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80007ce:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007d2:	ea27 0a0e 	bic.w	sl, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80007d6:	d00b      	beq.n	80007f0 <HAL_GPIO_Init+0x114>
 80007d8:	4f1c      	ldr	r7, [pc, #112]	; (800084c <HAL_GPIO_Init+0x170>)
 80007da:	42b8      	cmp	r0, r7
 80007dc:	d00b      	beq.n	80007f6 <HAL_GPIO_Init+0x11a>
 80007de:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80007e2:	42b8      	cmp	r0, r7
 80007e4:	bf14      	ite	ne
 80007e6:	f04f 0e07 	movne.w	lr, #7
 80007ea:	f04f 0e02 	moveq.w	lr, #2
 80007ee:	e004      	b.n	80007fa <HAL_GPIO_Init+0x11e>
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	e001      	b.n	80007fa <HAL_GPIO_Init+0x11e>
 80007f6:	f04f 0e01 	mov.w	lr, #1
 80007fa:	fa0e f909 	lsl.w	r9, lr, r9
 80007fe:	ea49 070a 	orr.w	r7, r9, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8000802:	60b7      	str	r7, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000804:	4e10      	ldr	r6, [pc, #64]	; (8000848 <HAL_GPIO_Init+0x16c>)
 8000806:	6836      	ldr	r6, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8000808:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800080a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
        temp &= ~((uint32_t)iocurrent);
 800080e:	bf0c      	ite	eq
 8000810:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000812:	432e      	orrne	r6, r5
        }
        EXTI->IMR1 = temp;
 8000814:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR1;
 8000816:	6866      	ldr	r6, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000818:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;

        temp = EXTI->EMR1;
        temp &= ~((uint32_t)iocurrent);
 800081c:	bf0c      	ite	eq
 800081e:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000820:	432e      	orrne	r6, r5
        }
        EXTI->EMR1 = temp;
 8000822:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000824:	68a6      	ldr	r6, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000826:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~((uint32_t)iocurrent);
 800082a:	bf0c      	ite	eq
 800082c:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 800082e:	432e      	orrne	r6, r5
        }
        EXTI->RTSR1 = temp;
 8000830:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR1;
 8000832:	68e6      	ldr	r6, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000834:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
 8000836:	bf54      	ite	pl
 8000838:	403e      	andpl	r6, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800083a:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR1 = temp;
 800083c:	60e6      	str	r6, [r4, #12]
      }
    }
    
    position++;
 800083e:	3301      	adds	r3, #1
 8000840:	e757      	b.n	80006f2 <HAL_GPIO_Init+0x16>
  }
}
 8000842:	b005      	add	sp, #20
 8000844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000848:	40010400 	.word	0x40010400
 800084c:	48000400 	.word	0x48000400
 8000850:	40021000 	.word	0x40021000

08000854 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000854:	b10a      	cbz	r2, 800085a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000856:	6181      	str	r1, [r0, #24]
 8000858:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800085a:	6281      	str	r1, [r0, #40]	; 0x28
 800085c:	4770      	bx	lr
	...

08000860 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000860:	4b02      	ldr	r3, [pc, #8]	; (800086c <HAL_PWREx_GetVoltageRange+0xc>)
 8000862:	6818      	ldr	r0, [r3, #0]
}
 8000864:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40007000 	.word	0x40007000

08000870 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <HAL_PWREx_ControlVoltageScaling+0x60>)
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000872:	681a      	ldr	r2, [r3, #0]
  uint32_t wait_loop_index = 0;  

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000874:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000878:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  uint32_t wait_loop_index = 0;  

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800087c:	d11a      	bne.n	80008b4 <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800087e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000882:	d020      	beq.n	80008c6 <HAL_PWREx_ControlVoltageScaling+0x56>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000884:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000886:	4913      	ldr	r1, [pc, #76]	; (80008d4 <HAL_PWREx_ControlVoltageScaling+0x64>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000888:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800088c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000890:	601a      	str	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000892:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000894:	6812      	ldr	r2, [r2, #0]
 8000896:	fbb2 f1f1 	udiv	r1, r2, r1
 800089a:	2232      	movs	r2, #50	; 0x32
 800089c:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800089e:	b122      	cbz	r2, 80008aa <HAL_PWREx_ControlVoltageScaling+0x3a>
 80008a0:	6959      	ldr	r1, [r3, #20]
 80008a2:	0549      	lsls	r1, r1, #21
 80008a4:	d501      	bpl.n	80008aa <HAL_PWREx_ControlVoltageScaling+0x3a>
      {
        wait_loop_index--;
 80008a6:	3a01      	subs	r2, #1
 80008a8:	e7f9      	b.n	800089e <HAL_PWREx_ControlVoltageScaling+0x2e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_PWREx_ControlVoltageScaling+0x60>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	055b      	lsls	r3, r3, #21
 80008b0:	d40b      	bmi.n	80008ca <HAL_PWREx_ControlVoltageScaling+0x5a>
 80008b2:	e008      	b.n	80008c6 <HAL_PWREx_ControlVoltageScaling+0x56>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80008b4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80008b8:	bf1f      	itttt	ne
 80008ba:	681a      	ldrne	r2, [r3, #0]
 80008bc:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80008c0:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80008c4:	601a      	strne	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 80008c6:	2000      	movs	r0, #0
 80008c8:	4770      	bx	lr
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
      {
        return HAL_TIMEOUT;
 80008ca:	2003      	movs	r0, #3
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
}  
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40007000 	.word	0x40007000
 80008d4:	000f4240 	.word	0x000f4240
 80008d8:	200000a0 	.word	0x200000a0

080008dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80008dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80008de:	4d1e      	ldr	r5, [pc, #120]	; (8000958 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80008e0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008e2:	00d9      	lsls	r1, r3, #3
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80008e4:	4604      	mov	r4, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80008e6:	d502      	bpl.n	80008ee <RCC_SetFlashLatencyFromMSIRange+0x12>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80008e8:	f7ff ffba 	bl	8000860 <HAL_PWREx_GetVoltageRange>
 80008ec:	e00e      	b.n	800090c <RCC_SetFlashLatencyFromMSIRange+0x30>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	65ab      	str	r3, [r5, #88]	; 0x58
 80008f6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fc:	9301      	str	r3, [sp, #4]
 80008fe:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000900:	f7ff ffae 	bl	8000860 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000904:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800090a:	65ab      	str	r3, [r5, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800090c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000910:	d106      	bne.n	8000920 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000912:	2c80      	cmp	r4, #128	; 0x80
 8000914:	d90c      	bls.n	8000930 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000916:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000918:	bf8c      	ite	hi
 800091a:	2302      	movhi	r3, #2
 800091c:	2301      	movls	r3, #1
 800091e:	e00c      	b.n	800093a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8000920:	2c80      	cmp	r4, #128	; 0x80
 8000922:	d807      	bhi.n	8000934 <RCC_SetFlashLatencyFromMSIRange+0x58>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8000924:	d008      	beq.n	8000938 <RCC_SetFlashLatencyFromMSIRange+0x5c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8000926:	f1a4 0270 	sub.w	r2, r4, #112	; 0x70
 800092a:	4253      	negs	r3, r2
 800092c:	4153      	adcs	r3, r2
 800092e:	e004      	b.n	800093a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000930:	2300      	movs	r3, #0
 8000932:	e002      	b.n	800093a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  else
  {
    if(msirange > RCC_MSIRANGE_8)
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8000934:	2303      	movs	r3, #3
 8000936:	e000      	b.n	800093a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8000938:	2302      	movs	r3, #2
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 800093a:	4908      	ldr	r1, [pc, #32]	; (800095c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800093c:	680a      	ldr	r2, [r1, #0]
 800093e:	f022 0207 	bic.w	r2, r2, #7
 8000942:	431a      	orrs	r2, r3
 8000944:	600a      	str	r2, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000946:	6808      	ldr	r0, [r1, #0]
 8000948:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 800094c:	1ac0      	subs	r0, r0, r3
 800094e:	bf18      	it	ne
 8000950:	2001      	movne	r0, #1
 8000952:	b003      	add	sp, #12
 8000954:	bd30      	pop	{r4, r5, pc}
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000
 800095c:	40022000 	.word	0x40022000

08000960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000960:	b570      	push	{r4, r5, r6, lr}
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000962:	4c4a      	ldr	r4, [pc, #296]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x12c>)
 8000964:	68a3      	ldr	r3, [r4, #8]
 8000966:	f013 0f0c 	tst.w	r3, #12
 800096a:	d009      	beq.n	8000980 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800096c:	68a3      	ldr	r3, [r4, #8]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800096e:	f003 030c 	and.w	r3, r3, #12
 8000972:	2b0c      	cmp	r3, #12
 8000974:	d126      	bne.n	80009c4 <HAL_RCC_GetSysClockFreq+0x64>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000976:	68e3      	ldr	r3, [r4, #12]
 8000978:	f003 0303 	and.w	r3, r3, #3
 800097c:	2b01      	cmp	r3, #1
 800097e:	d121      	bne.n	80009c4 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000980:	6822      	ldr	r2, [r4, #0]
 8000982:	4b42      	ldr	r3, [pc, #264]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x12c>)
 8000984:	0712      	lsls	r2, r2, #28
 8000986:	d40a      	bmi.n	800099e <HAL_RCC_GetSysClockFreq+0x3e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 8000988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800098c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000990:	fa92 f2a2 	rbit	r2, r2
 8000994:	fab2 f282 	clz	r2, r2
 8000998:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800099c:	e007      	b.n	80009ae <HAL_RCC_GetSysClockFreq+0x4e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	22f0      	movs	r2, #240	; 0xf0
 80009a2:	fa92 f2a2 	rbit	r2, r2
 80009a6:	fab2 f282 	clz	r2, r2
 80009aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009ae:	40d3      	lsrs	r3, r2
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80009b0:	4a37      	ldr	r2, [pc, #220]	; (8000a90 <HAL_RCC_GetSysClockFreq+0x130>)
 80009b2:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80009b6:	68a3      	ldr	r3, [r4, #8]
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80009b8:	f013 0f0c 	tst.w	r3, #12
 80009bc:	bf0c      	ite	eq
 80009be:	4630      	moveq	r0, r6
 80009c0:	2000      	movne	r0, #0
 80009c2:	e011      	b.n	80009e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80009c4:	68a3      	ldr	r3, [r4, #8]
 80009c6:	f003 030c 	and.w	r3, r3, #12
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d007      	beq.n	80009de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80009ce:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x12c>)
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	f003 030c 	and.w	r3, r3, #12
 80009d6:	2b08      	cmp	r3, #8
 80009d8:	d104      	bne.n	80009e4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80009da:	482e      	ldr	r0, [pc, #184]	; (8000a94 <HAL_RCC_GetSysClockFreq+0x134>)
 80009dc:	e000      	b.n	80009e0 <HAL_RCC_GetSysClockFreq+0x80>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80009de:	482e      	ldr	r0, [pc, #184]	; (8000a98 <HAL_RCC_GetSysClockFreq+0x138>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80009e0:	2600      	movs	r6, #0
 80009e2:	e001      	b.n	80009e8 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 80009e4:	2000      	movs	r0, #0
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80009e6:	4606      	mov	r6, r0
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80009e8:	68a3      	ldr	r3, [r4, #8]
 80009ea:	4a28      	ldr	r2, [pc, #160]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x12c>)
 80009ec:	f003 030c 	and.w	r3, r3, #12
 80009f0:	2b0c      	cmp	r3, #12
 80009f2:	d149      	bne.n	8000a88 <HAL_RCC_GetSysClockFreq+0x128>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80009f4:	68d1      	ldr	r1, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 80009f6:	68d3      	ldr	r3, [r2, #12]
 80009f8:	2070      	movs	r0, #112	; 0x70
 80009fa:	fa90 f0a0 	rbit	r0, r0
 80009fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000a02:	fab0 f080 	clz	r0, r0
 8000a06:	fa23 f000 	lsr.w	r0, r3, r0

    switch (pllsource)
 8000a0a:	f001 0303 	and.w	r3, r1, #3
 8000a0e:	2b02      	cmp	r3, #2

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8000a10:	f100 0501 	add.w	r5, r0, #1
 8000a14:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00

    switch (pllsource)
 8000a18:	d00c      	beq.n	8000a34 <HAL_RCC_GetSysClockFreq+0xd4>
 8000a1a:	2b03      	cmp	r3, #3
 8000a1c:	d119      	bne.n	8000a52 <HAL_RCC_GetSysClockFreq+0xf2>
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8000a1e:	68d3      	ldr	r3, [r2, #12]
 8000a20:	fa91 f1a1 	rbit	r1, r1
 8000a24:	fab1 f181 	clz	r1, r1
 8000a28:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000a2c:	fa23 f101 	lsr.w	r1, r3, r1
 8000a30:	4a18      	ldr	r2, [pc, #96]	; (8000a94 <HAL_RCC_GetSysClockFreq+0x134>)
 8000a32:	e009      	b.n	8000a48 <HAL_RCC_GetSysClockFreq+0xe8>
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;

    switch (pllsource)
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8000a34:	68d3      	ldr	r3, [r2, #12]
 8000a36:	fa91 f1a1 	rbit	r1, r1
 8000a3a:	4a17      	ldr	r2, [pc, #92]	; (8000a98 <HAL_RCC_GetSysClockFreq+0x138>)
 8000a3c:	fab1 f181 	clz	r1, r1
 8000a40:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000a44:	fa23 f101 	lsr.w	r1, r3, r1
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8000a48:	fbb2 f0f5 	udiv	r0, r2, r5
 8000a4c:	fb00 f301 	mul.w	r3, r0, r1
      break;
 8000a50:	e00b      	b.n	8000a6a <HAL_RCC_GetSysClockFreq+0x10a>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8000a52:	68d2      	ldr	r2, [r2, #12]
 8000a54:	fa91 f1a1 	rbit	r1, r1
 8000a58:	fab1 f181 	clz	r1, r1
 8000a5c:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
 8000a60:	40ca      	lsrs	r2, r1
 8000a62:	fbb6 f0f5 	udiv	r0, r6, r5
 8000a66:	fb00 f302 	mul.w	r3, r0, r2
      break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8000a6a:	68e2      	ldr	r2, [r4, #12]
 8000a6c:	f04f 60c0 	mov.w	r0, #100663296	; 0x6000000
 8000a70:	fa90 f0a0 	rbit	r0, r0
 8000a74:	fab0 f080 	clz	r0, r0
    sysclockfreq = pllvco/pllr;
 8000a78:	f002 62c0 	and.w	r2, r2, #100663296	; 0x6000000
 8000a7c:	fa22 f000 	lsr.w	r0, r2, r0
 8000a80:	3001      	adds	r0, #1
 8000a82:	0040      	lsls	r0, r0, #1
 8000a84:	fbb3 f0f0 	udiv	r0, r3, r0
  }

  return sysclockfreq;
}
 8000a88:	bd70      	pop	{r4, r5, r6, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	08004fc4 	.word	0x08004fc4
 8000a94:	007a1200 	.word	0x007a1200
 8000a98:	00f42400 	.word	0x00f42400

08000a9c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a9c:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000aa2:	06dd      	lsls	r5, r3, #27
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aa4:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000aa6:	f140 808f 	bpl.w	8000bc8 <HAL_RCC_OscConfig+0x12c>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000aaa:	4d9e      	ldr	r5, [pc, #632]	; (8000d24 <HAL_RCC_OscConfig+0x288>)
 8000aac:	68ab      	ldr	r3, [r5, #8]
 8000aae:	f013 0f0c 	tst.w	r3, #12
 8000ab2:	d153      	bne.n	8000b5c <HAL_RCC_OscConfig+0xc0>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ab4:	682b      	ldr	r3, [r5, #0]
 8000ab6:	0798      	lsls	r0, r3, #30
 8000ab8:	d503      	bpl.n	8000ac2 <HAL_RCC_OscConfig+0x26>
 8000aba:	69a3      	ldr	r3, [r4, #24]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	f000 8256 	beq.w	8000f6e <HAL_RCC_OscConfig+0x4d2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ac2:	682a      	ldr	r2, [r5, #0]
 8000ac4:	4b97      	ldr	r3, [pc, #604]	; (8000d24 <HAL_RCC_OscConfig+0x288>)
 8000ac6:	6a20      	ldr	r0, [r4, #32]
 8000ac8:	0711      	lsls	r1, r2, #28
 8000aca:	bf56      	itet	pl
 8000acc:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8000ad0:	681b      	ldrmi	r3, [r3, #0]
 8000ad2:	091b      	lsrpl	r3, r3, #4
 8000ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ad8:	4283      	cmp	r3, r0
 8000ada:	d216      	bcs.n	8000b0a <HAL_RCC_OscConfig+0x6e>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000adc:	f7ff fefe 	bl	80008dc <RCC_SetFlashLatencyFromMSIRange>
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	f040 8244 	bne.w	8000f6e <HAL_RCC_OscConfig+0x4d2>
          {
            return HAL_ERROR;
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ae6:	682b      	ldr	r3, [r5, #0]
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	602b      	str	r3, [r5, #0]
 8000aee:	682b      	ldr	r3, [r5, #0]
 8000af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000af4:	6a23      	ldr	r3, [r4, #32]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	602b      	str	r3, [r5, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000afa:	686b      	ldr	r3, [r5, #4]
 8000afc:	69e2      	ldr	r2, [r4, #28]
 8000afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b06:	606b      	str	r3, [r5, #4]
 8000b08:	e014      	b.n	8000b34 <HAL_RCC_OscConfig+0x98>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b0a:	682b      	ldr	r3, [r5, #0]
 8000b0c:	f043 0308 	orr.w	r3, r3, #8
 8000b10:	602b      	str	r3, [r5, #0]
 8000b12:	682b      	ldr	r3, [r5, #0]
 8000b14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b18:	4303      	orrs	r3, r0
 8000b1a:	602b      	str	r3, [r5, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b1c:	686b      	ldr	r3, [r5, #4]
 8000b1e:	69e2      	ldr	r2, [r4, #28]
 8000b20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b28:	606b      	str	r3, [r5, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b2a:	f7ff fed7 	bl	80008dc <RCC_SetFlashLatencyFromMSIRange>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	f040 821d 	bne.w	8000f6e <HAL_RCC_OscConfig+0x4d2>
            return HAL_ERROR;
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000b34:	f7ff ff14 	bl	8000960 <HAL_RCC_GetSysClockFreq>
 8000b38:	68ab      	ldr	r3, [r5, #8]
 8000b3a:	22f0      	movs	r2, #240	; 0xf0
 8000b3c:	fa92 f2a2 	rbit	r2, r2
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b48:	40d3      	lsrs	r3, r2
 8000b4a:	4a77      	ldr	r2, [pc, #476]	; (8000d28 <HAL_RCC_OscConfig+0x28c>)
 8000b4c:	5cd3      	ldrb	r3, [r2, r3]
 8000b4e:	40d8      	lsrs	r0, r3
 8000b50:	4b76      	ldr	r3, [pc, #472]	; (8000d2c <HAL_RCC_OscConfig+0x290>)
 8000b52:	6018      	str	r0, [r3, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8000b54:	2000      	movs	r0, #0
 8000b56:	f7ff fd17 	bl	8000588 <HAL_InitTick>
 8000b5a:	e035      	b.n	8000bc8 <HAL_RCC_OscConfig+0x12c>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000b5c:	6983      	ldr	r3, [r0, #24]
 8000b5e:	b31b      	cbz	r3, 8000ba8 <HAL_RCC_OscConfig+0x10c>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000b60:	682b      	ldr	r3, [r5, #0]
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	602b      	str	r3, [r5, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000b68:	f7ff fd36 	bl	80005d8 <HAL_GetTick>
 8000b6c:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000b6e:	682a      	ldr	r2, [r5, #0]
 8000b70:	4b6c      	ldr	r3, [pc, #432]	; (8000d24 <HAL_RCC_OscConfig+0x288>)
 8000b72:	0792      	lsls	r2, r2, #30
 8000b74:	d406      	bmi.n	8000b84 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b76:	f7ff fd2f 	bl	80005d8 <HAL_GetTick>
 8000b7a:	1b80      	subs	r0, r0, r6
 8000b7c:	2802      	cmp	r0, #2
 8000b7e:	d9f6      	bls.n	8000b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b80:	2003      	movs	r0, #3
 8000b82:	e1f5      	b.n	8000f70 <HAL_RCC_OscConfig+0x4d4>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	f042 0208 	orr.w	r2, r2, #8
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8000b92:	6a22      	ldr	r2, [r4, #32]
 8000b94:	430a      	orrs	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	69e1      	ldr	r1, [r4, #28]
 8000b9c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000ba0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	e00f      	b.n	8000bc8 <HAL_RCC_OscConfig+0x12c>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ba8:	682b      	ldr	r3, [r5, #0]
 8000baa:	f023 0301 	bic.w	r3, r3, #1
 8000bae:	602b      	str	r3, [r5, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000bb0:	f7ff fd12 	bl	80005d8 <HAL_GetTick>
 8000bb4:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000bb6:	682b      	ldr	r3, [r5, #0]
 8000bb8:	079f      	lsls	r7, r3, #30
 8000bba:	d505      	bpl.n	8000bc8 <HAL_RCC_OscConfig+0x12c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000bbc:	f7ff fd0c 	bl	80005d8 <HAL_GetTick>
 8000bc0:	1b80      	subs	r0, r0, r6
 8000bc2:	2802      	cmp	r0, #2
 8000bc4:	d9f7      	bls.n	8000bb6 <HAL_RCC_OscConfig+0x11a>
 8000bc6:	e7db      	b.n	8000b80 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bc8:	6823      	ldr	r3, [r4, #0]
 8000bca:	07de      	lsls	r6, r3, #31
 8000bcc:	d403      	bmi.n	8000bd6 <HAL_RCC_OscConfig+0x13a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	079d      	lsls	r5, r3, #30
 8000bd2:	d448      	bmi.n	8000c66 <HAL_RCC_OscConfig+0x1ca>
 8000bd4:	e09f      	b.n	8000d16 <HAL_RCC_OscConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8000bd6:	4d53      	ldr	r5, [pc, #332]	; (8000d24 <HAL_RCC_OscConfig+0x288>)
 8000bd8:	68ab      	ldr	r3, [r5, #8]
 8000bda:	f003 030c 	and.w	r3, r3, #12
 8000bde:	2b08      	cmp	r3, #8
 8000be0:	d009      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x15a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000be2:	68ab      	ldr	r3, [r5, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8000be4:	f003 030c 	and.w	r3, r3, #12
 8000be8:	2b0c      	cmp	r3, #12
 8000bea:	d10b      	bne.n	8000c04 <HAL_RCC_OscConfig+0x168>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bec:	68eb      	ldr	r3, [r5, #12]
 8000bee:	f003 0303 	and.w	r3, r3, #3
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d106      	bne.n	8000c04 <HAL_RCC_OscConfig+0x168>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf6:	682b      	ldr	r3, [r5, #0]
 8000bf8:	0398      	lsls	r0, r3, #14
 8000bfa:	d5e8      	bpl.n	8000bce <HAL_RCC_OscConfig+0x132>
 8000bfc:	6863      	ldr	r3, [r4, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1e5      	bne.n	8000bce <HAL_RCC_OscConfig+0x132>
 8000c02:	e1b4      	b.n	8000f6e <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c04:	6863      	ldr	r3, [r4, #4]
 8000c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c0a:	d006      	beq.n	8000c1a <HAL_RCC_OscConfig+0x17e>
 8000c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c10:	d108      	bne.n	8000c24 <HAL_RCC_OscConfig+0x188>
 8000c12:	682b      	ldr	r3, [r5, #0]
 8000c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c18:	602b      	str	r3, [r5, #0]
 8000c1a:	682b      	ldr	r3, [r5, #0]
 8000c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c20:	602b      	str	r3, [r5, #0]
 8000c22:	e008      	b.n	8000c36 <HAL_RCC_OscConfig+0x19a>
 8000c24:	682a      	ldr	r2, [r5, #0]
 8000c26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c2a:	602a      	str	r2, [r5, #0]
 8000c2c:	682a      	ldr	r2, [r5, #0]
 8000c2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c32:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c34:	b15b      	cbz	r3, 8000c4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c36:	f7ff fccf 	bl	80005d8 <HAL_GetTick>
 8000c3a:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000c3c:	682b      	ldr	r3, [r5, #0]
 8000c3e:	0399      	lsls	r1, r3, #14
 8000c40:	d4c5      	bmi.n	8000bce <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c42:	f7ff fcc9 	bl	80005d8 <HAL_GetTick>
 8000c46:	1b80      	subs	r0, r0, r6
 8000c48:	2864      	cmp	r0, #100	; 0x64
 8000c4a:	d9f7      	bls.n	8000c3c <HAL_RCC_OscConfig+0x1a0>
 8000c4c:	e798      	b.n	8000b80 <HAL_RCC_OscConfig+0xe4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c4e:	f7ff fcc3 	bl	80005d8 <HAL_GetTick>
 8000c52:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000c54:	682b      	ldr	r3, [r5, #0]
 8000c56:	039a      	lsls	r2, r3, #14
 8000c58:	d5b9      	bpl.n	8000bce <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c5a:	f7ff fcbd 	bl	80005d8 <HAL_GetTick>
 8000c5e:	1b80      	subs	r0, r0, r6
 8000c60:	2864      	cmp	r0, #100	; 0x64
 8000c62:	d9f7      	bls.n	8000c54 <HAL_RCC_OscConfig+0x1b8>
 8000c64:	e78c      	b.n	8000b80 <HAL_RCC_OscConfig+0xe4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000c66:	4d2f      	ldr	r5, [pc, #188]	; (8000d24 <HAL_RCC_OscConfig+0x288>)
 8000c68:	68ab      	ldr	r3, [r5, #8]
 8000c6a:	f003 030c 	and.w	r3, r3, #12
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	d009      	beq.n	8000c86 <HAL_RCC_OscConfig+0x1ea>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c72:	68ab      	ldr	r3, [r5, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000c74:	f003 030c 	and.w	r3, r3, #12
 8000c78:	2b0c      	cmp	r3, #12
 8000c7a:	d11a      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c7c:	68eb      	ldr	r3, [r5, #12]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d115      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x216>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c86:	682b      	ldr	r3, [r5, #0]
 8000c88:	055b      	lsls	r3, r3, #21
 8000c8a:	d503      	bpl.n	8000c94 <HAL_RCC_OscConfig+0x1f8>
 8000c8c:	68e3      	ldr	r3, [r4, #12]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 816d 	beq.w	8000f6e <HAL_RCC_OscConfig+0x4d2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c94:	686b      	ldr	r3, [r5, #4]
 8000c96:	f04f 52f8 	mov.w	r2, #520093696	; 0x1f000000
 8000c9a:	fa92 f2a2 	rbit	r2, r2
 8000c9e:	6921      	ldr	r1, [r4, #16]
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca8:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000cac:	4313      	orrs	r3, r2
 8000cae:	606b      	str	r3, [r5, #4]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000cb0:	e031      	b.n	8000d16 <HAL_RCC_OscConfig+0x27a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cb2:	68e3      	ldr	r3, [r4, #12]
 8000cb4:	b1fb      	cbz	r3, 8000cf6 <HAL_RCC_OscConfig+0x25a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cb6:	682b      	ldr	r3, [r5, #0]
 8000cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbc:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cbe:	f7ff fc8b 	bl	80005d8 <HAL_GetTick>
 8000cc2:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000cc4:	682b      	ldr	r3, [r5, #0]
 8000cc6:	4817      	ldr	r0, [pc, #92]	; (8000d24 <HAL_RCC_OscConfig+0x288>)
 8000cc8:	055f      	lsls	r7, r3, #21
 8000cca:	d405      	bmi.n	8000cd8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ccc:	f7ff fc84 	bl	80005d8 <HAL_GetTick>
 8000cd0:	1b80      	subs	r0, r0, r6
 8000cd2:	2802      	cmp	r0, #2
 8000cd4:	d9f6      	bls.n	8000cc4 <HAL_RCC_OscConfig+0x228>
 8000cd6:	e753      	b.n	8000b80 <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd8:	6843      	ldr	r3, [r0, #4]
 8000cda:	f04f 52f8 	mov.w	r2, #520093696	; 0x1f000000
 8000cde:	fa92 f2a2 	rbit	r2, r2
 8000ce2:	6921      	ldr	r1, [r4, #16]
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cec:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	6043      	str	r3, [r0, #4]
 8000cf4:	e00f      	b.n	8000d16 <HAL_RCC_OscConfig+0x27a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cf6:	682b      	ldr	r3, [r5, #0]
 8000cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cfc:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cfe:	f7ff fc6b 	bl	80005d8 <HAL_GetTick>
 8000d02:	4606      	mov	r6, r0

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000d04:	682b      	ldr	r3, [r5, #0]
 8000d06:	0558      	lsls	r0, r3, #21
 8000d08:	d505      	bpl.n	8000d16 <HAL_RCC_OscConfig+0x27a>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d0a:	f7ff fc65 	bl	80005d8 <HAL_GetTick>
 8000d0e:	1b80      	subs	r0, r0, r6
 8000d10:	2802      	cmp	r0, #2
 8000d12:	d9f7      	bls.n	8000d04 <HAL_RCC_OscConfig+0x268>
 8000d14:	e734      	b.n	8000b80 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d16:	6823      	ldr	r3, [r4, #0]
 8000d18:	0719      	lsls	r1, r3, #28
 8000d1a:	d409      	bmi.n	8000d30 <HAL_RCC_OscConfig+0x294>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d1c:	6823      	ldr	r3, [r4, #0]
 8000d1e:	075a      	lsls	r2, r3, #29
 8000d20:	d42f      	bmi.n	8000d82 <HAL_RCC_OscConfig+0x2e6>
 8000d22:	e097      	b.n	8000e54 <HAL_RCC_OscConfig+0x3b8>
 8000d24:	40021000 	.word	0x40021000
 8000d28:	08004fac 	.word	0x08004fac
 8000d2c:	200000a0 	.word	0x200000a0
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d30:	6963      	ldr	r3, [r4, #20]
 8000d32:	4d91      	ldr	r5, [pc, #580]	; (8000f78 <HAL_RCC_OscConfig+0x4dc>)
 8000d34:	b193      	cbz	r3, 8000d5c <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d36:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d42:	f7ff fc49 	bl	80005d8 <HAL_GetTick>
 8000d46:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8000d48:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000d4c:	079b      	lsls	r3, r3, #30
 8000d4e:	d4e5      	bmi.n	8000d1c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d50:	f7ff fc42 	bl	80005d8 <HAL_GetTick>
 8000d54:	1b80      	subs	r0, r0, r6
 8000d56:	2802      	cmp	r0, #2
 8000d58:	d9f6      	bls.n	8000d48 <HAL_RCC_OscConfig+0x2ac>
 8000d5a:	e711      	b.n	8000b80 <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d5c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000d60:	f023 0301 	bic.w	r3, r3, #1
 8000d64:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d68:	f7ff fc36 	bl	80005d8 <HAL_GetTick>
 8000d6c:	4606      	mov	r6, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000d6e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000d72:	079f      	lsls	r7, r3, #30
 8000d74:	d5d2      	bpl.n	8000d1c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d76:	f7ff fc2f 	bl	80005d8 <HAL_GetTick>
 8000d7a:	1b80      	subs	r0, r0, r6
 8000d7c:	2802      	cmp	r0, #2
 8000d7e:	d9f6      	bls.n	8000d6e <HAL_RCC_OscConfig+0x2d2>
 8000d80:	e6fe      	b.n	8000b80 <HAL_RCC_OscConfig+0xe4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000d82:	4d7d      	ldr	r5, [pc, #500]	; (8000f78 <HAL_RCC_OscConfig+0x4dc>)
 8000d84:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000d86:	00d8      	lsls	r0, r3, #3
 8000d88:	d40a      	bmi.n	8000da0 <HAL_RCC_OscConfig+0x304>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d90:	65ab      	str	r3, [r5, #88]	; 0x58
 8000d92:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d9c:	2701      	movs	r7, #1
 8000d9e:	e000      	b.n	8000da2 <HAL_RCC_OscConfig+0x306>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8000da0:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000da2:	4e76      	ldr	r6, [pc, #472]	; (8000f7c <HAL_RCC_OscConfig+0x4e0>)
 8000da4:	6833      	ldr	r3, [r6, #0]
 8000da6:	05d9      	lsls	r1, r3, #23
 8000da8:	d503      	bpl.n	8000db2 <HAL_RCC_OscConfig+0x316>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000daa:	68a3      	ldr	r3, [r4, #8]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d111      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x338>
 8000db0:	e018      	b.n	8000de4 <HAL_RCC_OscConfig+0x348>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000db2:	6833      	ldr	r3, [r6, #0]
 8000db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db8:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dba:	f7ff fc0d 	bl	80005d8 <HAL_GetTick>
 8000dbe:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dc0:	6833      	ldr	r3, [r6, #0]
 8000dc2:	05da      	lsls	r2, r3, #23
 8000dc4:	d4f1      	bmi.n	8000daa <HAL_RCC_OscConfig+0x30e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dc6:	f7ff fc07 	bl	80005d8 <HAL_GetTick>
 8000dca:	ebc8 0000 	rsb	r0, r8, r0
 8000dce:	2802      	cmp	r0, #2
 8000dd0:	d9f6      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x324>
 8000dd2:	e6d5      	b.n	8000b80 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dd4:	2b05      	cmp	r3, #5
 8000dd6:	d10c      	bne.n	8000df2 <HAL_RCC_OscConfig+0x356>
 8000dd8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8000de4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8000df0:	e00c      	b.n	8000e0c <HAL_RCC_OscConfig+0x370>
 8000df2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8000df6:	f022 0201 	bic.w	r2, r2, #1
 8000dfa:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 8000dfe:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8000e02:	f022 0204 	bic.w	r2, r2, #4
 8000e06:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e0a:	b173      	cbz	r3, 8000e2a <HAL_RCC_OscConfig+0x38e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e0c:	f7ff fbe4 	bl	80005d8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e10:	f241 3888 	movw	r8, #5000	; 0x1388

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e14:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8000e16:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000e1a:	079b      	lsls	r3, r3, #30
 8000e1c:	d40e      	bmi.n	8000e3c <HAL_RCC_OscConfig+0x3a0>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e1e:	f7ff fbdb 	bl	80005d8 <HAL_GetTick>
 8000e22:	1b80      	subs	r0, r0, r6
 8000e24:	4540      	cmp	r0, r8
 8000e26:	d9f6      	bls.n	8000e16 <HAL_RCC_OscConfig+0x37a>
 8000e28:	e6aa      	b.n	8000b80 <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e2a:	f7ff fbd5 	bl	80005d8 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e2e:	f241 3888 	movw	r8, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e32:	4606      	mov	r6, r0

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8000e34:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000e38:	0798      	lsls	r0, r3, #30
 8000e3a:	d405      	bmi.n	8000e48 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e3c:	b157      	cbz	r7, 8000e54 <HAL_RCC_OscConfig+0x3b8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e3e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e44:	65ab      	str	r3, [r5, #88]	; 0x58
 8000e46:	e005      	b.n	8000e54 <HAL_RCC_OscConfig+0x3b8>
      tickstart = HAL_GetTick();

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e48:	f7ff fbc6 	bl	80005d8 <HAL_GetTick>
 8000e4c:	1b80      	subs	r0, r0, r6
 8000e4e:	4540      	cmp	r0, r8
 8000e50:	d9f0      	bls.n	8000e34 <HAL_RCC_OscConfig+0x398>
 8000e52:	e695      	b.n	8000b80 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000e54:	6823      	ldr	r3, [r4, #0]
 8000e56:	0699      	lsls	r1, r3, #26
 8000e58:	d402      	bmi.n	8000e60 <HAL_RCC_OscConfig+0x3c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000e5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e5c:	bb4a      	cbnz	r2, 8000eb2 <HAL_RCC_OscConfig+0x416>
 8000e5e:	e05f      	b.n	8000f20 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e62:	4d45      	ldr	r5, [pc, #276]	; (8000f78 <HAL_RCC_OscConfig+0x4dc>)
 8000e64:	b193      	cbz	r3, 8000e8c <HAL_RCC_OscConfig+0x3f0>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000e66:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e72:	f7ff fbb1 	bl	80005d8 <HAL_GetTick>
 8000e76:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8000e78:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000e7c:	079a      	lsls	r2, r3, #30
 8000e7e:	d4ec      	bmi.n	8000e5a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e80:	f7ff fbaa 	bl	80005d8 <HAL_GetTick>
 8000e84:	1b80      	subs	r0, r0, r6
 8000e86:	2802      	cmp	r0, #2
 8000e88:	d9f6      	bls.n	8000e78 <HAL_RCC_OscConfig+0x3dc>
 8000e8a:	e679      	b.n	8000b80 <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000e8c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000e90:	f023 0301 	bic.w	r3, r3, #1
 8000e94:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e98:	f7ff fb9e 	bl	80005d8 <HAL_GetTick>
 8000e9c:	4606      	mov	r6, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8000e9e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000ea2:	079b      	lsls	r3, r3, #30
 8000ea4:	d5d9      	bpl.n	8000e5a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000ea6:	f7ff fb97 	bl	80005d8 <HAL_GetTick>
 8000eaa:	1b80      	subs	r0, r0, r6
 8000eac:	2802      	cmp	r0, #2
 8000eae:	d9f6      	bls.n	8000e9e <HAL_RCC_OscConfig+0x402>
 8000eb0:	e666      	b.n	8000b80 <HAL_RCC_OscConfig+0xe4>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000eb2:	4d31      	ldr	r5, [pc, #196]	; (8000f78 <HAL_RCC_OscConfig+0x4dc>)
 8000eb4:	68ab      	ldr	r3, [r5, #8]
 8000eb6:	f003 030c 	and.w	r3, r3, #12
 8000eba:	2b0c      	cmp	r3, #12
 8000ebc:	d057      	beq.n	8000f6e <HAL_RCC_OscConfig+0x4d2>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ebe:	682b      	ldr	r3, [r5, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000ec0:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ec6:	602b      	str	r3, [r5, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000ec8:	d138      	bne.n	8000f3c <HAL_RCC_OscConfig+0x4a0>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eca:	f7ff fb85 	bl	80005d8 <HAL_GetTick>
 8000ece:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000ed0:	682b      	ldr	r3, [r5, #0]
 8000ed2:	4829      	ldr	r0, [pc, #164]	; (8000f78 <HAL_RCC_OscConfig+0x4dc>)
 8000ed4:	019f      	lsls	r7, r3, #6
 8000ed6:	d425      	bmi.n	8000f24 <HAL_RCC_OscConfig+0x488>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ed8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8000eda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000edc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000ede:	06f6      	lsls	r6, r6, #27
 8000ee0:	ea46 2103 	orr.w	r1, r6, r3, lsl #8
 8000ee4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ee6:	3a01      	subs	r2, #1
 8000ee8:	430b      	orrs	r3, r1
 8000eea:	ea43 1102 	orr.w	r1, r3, r2, lsl #4
 8000eee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ef0:	085b      	lsrs	r3, r3, #1
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	ea41 5243 	orr.w	r2, r1, r3, lsl #21
 8000ef8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000efa:	085b      	lsrs	r3, r3, #1
 8000efc:	3b01      	subs	r3, #1
 8000efe:	ea42 6343 	orr.w	r3, r2, r3, lsl #25
 8000f02:	60c3      	str	r3, [r0, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f04:	6803      	ldr	r3, [r0, #0]
 8000f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f0a:	6003      	str	r3, [r0, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000f0c:	68c3      	ldr	r3, [r0, #12]
 8000f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f12:	60c3      	str	r3, [r0, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f14:	f7ff fb60 	bl	80005d8 <HAL_GetTick>
 8000f18:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000f1a:	682b      	ldr	r3, [r5, #0]
 8000f1c:	0199      	lsls	r1, r3, #6
 8000f1e:	d507      	bpl.n	8000f30 <HAL_RCC_OscConfig+0x494>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000f20:	2000      	movs	r0, #0
 8000f22:	e025      	b.n	8000f70 <HAL_RCC_OscConfig+0x4d4>
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f24:	f7ff fb58 	bl	80005d8 <HAL_GetTick>
 8000f28:	1b80      	subs	r0, r0, r6
 8000f2a:	2802      	cmp	r0, #2
 8000f2c:	d9d0      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x434>
 8000f2e:	e627      	b.n	8000b80 <HAL_RCC_OscConfig+0xe4>
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f30:	f7ff fb52 	bl	80005d8 <HAL_GetTick>
 8000f34:	1b00      	subs	r0, r0, r4
 8000f36:	2802      	cmp	r0, #2
 8000f38:	d9ef      	bls.n	8000f1a <HAL_RCC_OscConfig+0x47e>
 8000f3a:	e621      	b.n	8000b80 <HAL_RCC_OscConfig+0xe4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8000f3c:	682b      	ldr	r3, [r5, #0]
 8000f3e:	011a      	lsls	r2, r3, #4
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000f40:	bf5e      	ittt	pl
 8000f42:	68eb      	ldrpl	r3, [r5, #12]
 8000f44:	f023 0303 	bicpl.w	r3, r3, #3
 8000f48:	60eb      	strpl	r3, [r5, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8000f4a:	68eb      	ldr	r3, [r5, #12]
 8000f4c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f54:	60eb      	str	r3, [r5, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f56:	f7ff fb3f 	bl	80005d8 <HAL_GetTick>
 8000f5a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000f5c:	682b      	ldr	r3, [r5, #0]
 8000f5e:	019b      	lsls	r3, r3, #6
 8000f60:	d5de      	bpl.n	8000f20 <HAL_RCC_OscConfig+0x484>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f62:	f7ff fb39 	bl	80005d8 <HAL_GetTick>
 8000f66:	1b00      	subs	r0, r0, r4
 8000f68:	2802      	cmp	r0, #2
 8000f6a:	d9f7      	bls.n	8000f5c <HAL_RCC_OscConfig+0x4c0>
 8000f6c:	e608      	b.n	8000b80 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f6e:	2001      	movs	r0, #1
    }
  }
  return HAL_OK;
}
 8000f70:	b002      	add	sp, #8
 8000f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40007000 	.word	0x40007000

08000f80 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f80:	4a57      	ldr	r2, [pc, #348]	; (80010e0 <HAL_RCC_ClockConfig+0x160>)
 8000f82:	6813      	ldr	r3, [r2, #0]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f8e:	4605      	mov	r5, r0
 8000f90:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f92:	d30a      	bcc.n	8000faa <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f94:	6829      	ldr	r1, [r5, #0]
 8000f96:	0788      	lsls	r0, r1, #30
 8000f98:	d514      	bpl.n	8000fc4 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f9a:	4852      	ldr	r0, [pc, #328]	; (80010e4 <HAL_RCC_ClockConfig+0x164>)
 8000f9c:	6883      	ldr	r3, [r0, #8]
 8000f9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fa2:	68ab      	ldr	r3, [r5, #8]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	6083      	str	r3, [r0, #8]
 8000fa8:	e00c      	b.n	8000fc4 <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000faa:	6813      	ldr	r3, [r2, #0]
 8000fac:	f023 0307 	bic.w	r3, r3, #7
 8000fb0:	430b      	orrs	r3, r1
 8000fb2:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fb4:	6813      	ldr	r3, [r2, #0]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d0ea      	beq.n	8000f94 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fc4:	07ca      	lsls	r2, r1, #31
 8000fc6:	d406      	bmi.n	8000fd6 <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fc8:	4a45      	ldr	r2, [pc, #276]	; (80010e0 <HAL_RCC_ClockConfig+0x160>)
 8000fca:	6813      	ldr	r3, [r2, #0]
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	429e      	cmp	r6, r3
 8000fd2:	d351      	bcc.n	8001078 <HAL_RCC_ClockConfig+0xf8>
 8000fd4:	e05a      	b.n	800108c <HAL_RCC_ClockConfig+0x10c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fd6:	686b      	ldr	r3, [r5, #4]
 8000fd8:	4c42      	ldr	r4, [pc, #264]	; (80010e4 <HAL_RCC_ClockConfig+0x164>)
 8000fda:	2b02      	cmp	r3, #2
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000fdc:	6822      	ldr	r2, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fde:	d102      	bne.n	8000fe6 <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000fe0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000fe4:	e00a      	b.n	8000ffc <HAL_RCC_ClockConfig+0x7c>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d102      	bne.n	8000ff0 <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000fea:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000fee:	e005      	b.n	8000ffc <HAL_RCC_ClockConfig+0x7c>
      {
        return HAL_ERROR;
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000ff0:	b913      	cbnz	r3, 8000ff8 <HAL_RCC_ClockConfig+0x78>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000ff2:	f012 0f02 	tst.w	r2, #2
 8000ff6:	e001      	b.n	8000ffc <HAL_RCC_ClockConfig+0x7c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000ff8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000ffc:	d0df      	beq.n	8000fbe <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000ffe:	68a2      	ldr	r2, [r4, #8]
 8001000:	f022 0203 	bic.w	r2, r2, #3
 8001004:	4313      	orrs	r3, r2
 8001006:	60a3      	str	r3, [r4, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001008:	f7ff fae6 	bl	80005d8 <HAL_GetTick>

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800100c:	686b      	ldr	r3, [r5, #4]
 800100e:	2b02      	cmp	r3, #2
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001010:	4607      	mov	r7, r0

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001012:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001016:	d10c      	bne.n	8001032 <HAL_RCC_ClockConfig+0xb2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001018:	68a3      	ldr	r3, [r4, #8]
 800101a:	f003 030c 	and.w	r3, r3, #12
 800101e:	2b08      	cmp	r3, #8
 8001020:	d0d2      	beq.n	8000fc8 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001022:	f7ff fad9 	bl	80005d8 <HAL_GetTick>
 8001026:	1bc0      	subs	r0, r0, r7
 8001028:	4540      	cmp	r0, r8
 800102a:	d9f5      	bls.n	8001018 <HAL_RCC_ClockConfig+0x98>
        {
          return HAL_TIMEOUT;
 800102c:	2003      	movs	r0, #3
 800102e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001032:	2b03      	cmp	r3, #3
 8001034:	d10a      	bne.n	800104c <HAL_RCC_ClockConfig+0xcc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001036:	68a3      	ldr	r3, [r4, #8]
 8001038:	f003 030c 	and.w	r3, r3, #12
 800103c:	2b0c      	cmp	r3, #12
 800103e:	d0c3      	beq.n	8000fc8 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001040:	f7ff faca 	bl	80005d8 <HAL_GetTick>
 8001044:	1bc0      	subs	r0, r0, r7
 8001046:	4540      	cmp	r0, r8
 8001048:	d9f5      	bls.n	8001036 <HAL_RCC_ClockConfig+0xb6>
 800104a:	e7ef      	b.n	800102c <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800104c:	b973      	cbnz	r3, 800106c <HAL_RCC_ClockConfig+0xec>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800104e:	68a3      	ldr	r3, [r4, #8]
 8001050:	f013 0f0c 	tst.w	r3, #12
 8001054:	d0b8      	beq.n	8000fc8 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001056:	f7ff fabf 	bl	80005d8 <HAL_GetTick>
 800105a:	1bc0      	subs	r0, r0, r7
 800105c:	4540      	cmp	r0, r8
 800105e:	d9f6      	bls.n	800104e <HAL_RCC_ClockConfig+0xce>
 8001060:	e7e4      	b.n	800102c <HAL_RCC_ClockConfig+0xac>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001062:	f7ff fab9 	bl	80005d8 <HAL_GetTick>
 8001066:	1bc0      	subs	r0, r0, r7
 8001068:	4540      	cmp	r0, r8
 800106a:	d8df      	bhi.n	800102c <HAL_RCC_ClockConfig+0xac>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 800106c:	68a3      	ldr	r3, [r4, #8]
 800106e:	f003 030c 	and.w	r3, r3, #12
 8001072:	2b04      	cmp	r3, #4
 8001074:	d1f5      	bne.n	8001062 <HAL_RCC_ClockConfig+0xe2>
 8001076:	e7a7      	b.n	8000fc8 <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001078:	6813      	ldr	r3, [r2, #0]
 800107a:	f023 0307 	bic.w	r3, r3, #7
 800107e:	4333      	orrs	r3, r6
 8001080:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001082:	6813      	ldr	r3, [r2, #0]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	429e      	cmp	r6, r3
 800108a:	d198      	bne.n	8000fbe <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800108c:	6829      	ldr	r1, [r5, #0]
 800108e:	4c15      	ldr	r4, [pc, #84]	; (80010e4 <HAL_RCC_ClockConfig+0x164>)
 8001090:	f011 0f04 	tst.w	r1, #4
 8001094:	d005      	beq.n	80010a2 <HAL_RCC_ClockConfig+0x122>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001096:	68a3      	ldr	r3, [r4, #8]
 8001098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800109c:	68eb      	ldr	r3, [r5, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	60a3      	str	r3, [r4, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a2:	070b      	lsls	r3, r1, #28
 80010a4:	d506      	bpl.n	80010b4 <HAL_RCC_ClockConfig+0x134>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010a6:	68a3      	ldr	r3, [r4, #8]
 80010a8:	692a      	ldr	r2, [r5, #16]
 80010aa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010b2:	60a3      	str	r3, [r4, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80010b4:	f7ff fc54 	bl	8000960 <HAL_RCC_GetSysClockFreq>
 80010b8:	68a3      	ldr	r3, [r4, #8]
 80010ba:	22f0      	movs	r2, #240	; 0xf0
 80010bc:	fa92 f2a2 	rbit	r2, r2
 80010c0:	fab2 f282 	clz	r2, r2
 80010c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010c8:	40d3      	lsrs	r3, r2
 80010ca:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_RCC_ClockConfig+0x168>)
 80010cc:	5cd3      	ldrb	r3, [r2, r3]
 80010ce:	40d8      	lsrs	r0, r3
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_RCC_ClockConfig+0x16c>)
 80010d2:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f7ff fa57 	bl	8000588 <HAL_InitTick>

  return HAL_OK;
 80010da:	2000      	movs	r0, #0
}
 80010dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010e0:	40022000 	.word	0x40022000
 80010e4:	40021000 	.word	0x40021000
 80010e8:	08004fac 	.word	0x08004fac
 80010ec:	200000a0 	.word	0x200000a0

080010f0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80010f0:	4b01      	ldr	r3, [pc, #4]	; (80010f8 <HAL_RCC_GetHCLKFreq+0x8>)
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200000a0 	.word	0x200000a0

080010fc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	fa92 f2a2 	rbit	r2, r2
 8001108:	fab2 f282 	clz	r2, r2
 800110c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001110:	40d3      	lsrs	r3, r2
 8001112:	4a04      	ldr	r2, [pc, #16]	; (8001124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001114:	5cd3      	ldrb	r3, [r2, r3]
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001118:	6810      	ldr	r0, [r2, #0]
}
 800111a:	40d8      	lsrs	r0, r3
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000
 8001124:	08004fbc 	.word	0x08004fbc
 8001128:	200000a0 	.word	0x200000a0

0800112c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_RCC_GetPCLK2Freq+0x24>)
 800112e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	fa92 f2a2 	rbit	r2, r2
 8001138:	fab2 f282 	clz	r2, r2
 800113c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001140:	40d3      	lsrs	r3, r2
 8001142:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001144:	5cd3      	ldrb	r3, [r2, r3]
 8001146:	4a04      	ldr	r2, [pc, #16]	; (8001158 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001148:	6810      	ldr	r0, [r2, #0]
}
 800114a:	40d8      	lsrs	r0, r3
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	08004fbc 	.word	0x08004fbc
 8001158:	200000a0 	.word	0x200000a0

0800115c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800115e:	4b5a      	ldr	r3, [pc, #360]	; (80012c8 <RCCEx_PLLSAI1_Config+0x16c>)
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	f012 0f03 	tst.w	r2, #3
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001166:	4604      	mov	r4, r0
 8001168:	460e      	mov	r6, r1
 800116a:	461d      	mov	r5, r3
 800116c:	6800      	ldr	r0, [r0, #0]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800116e:	d013      	beq.n	8001198 <RCCEx_PLLSAI1_Config+0x3c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	f002 0203 	and.w	r2, r2, #3
 8001176:	4282      	cmp	r2, r0
 8001178:	d124      	bne.n	80011c4 <RCCEx_PLLSAI1_Config+0x68>
       || 
 800117a:	b31a      	cbz	r2, 80011c4 <RCCEx_PLLSAI1_Config+0x68>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	2370      	movs	r3, #112	; 0x70
 8001180:	fa93 f3a3 	rbit	r3, r3
 8001184:	fab3 f183 	clz	r1, r3
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
 8001188:	f002 0370 	and.w	r3, r2, #112	; 0x70
 800118c:	40cb      	lsrs	r3, r1
 800118e:	6862      	ldr	r2, [r4, #4]
 8001190:	3301      	adds	r3, #1
 8001192:	4293      	cmp	r3, r2
 8001194:	d116      	bne.n	80011c4 <RCCEx_PLLSAI1_Config+0x68>
 8001196:	e025      	b.n	80011e4 <RCCEx_PLLSAI1_Config+0x88>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001198:	2802      	cmp	r0, #2
 800119a:	d008      	beq.n	80011ae <RCCEx_PLLSAI1_Config+0x52>
 800119c:	2803      	cmp	r0, #3
 800119e:	d00a      	beq.n	80011b6 <RCCEx_PLLSAI1_Config+0x5a>
 80011a0:	2801      	cmp	r0, #1
 80011a2:	d10f      	bne.n	80011c4 <RCCEx_PLLSAI1_Config+0x68>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	079f      	lsls	r7, r3, #30
 80011a8:	f140 808d 	bpl.w	80012c6 <RCCEx_PLLSAI1_Config+0x16a>
 80011ac:	e00c      	b.n	80011c8 <RCCEx_PLLSAI1_Config+0x6c>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80011b4:	e005      	b.n	80011c2 <RCCEx_PLLSAI1_Config+0x66>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	0391      	lsls	r1, r2, #14
 80011ba:	d405      	bmi.n	80011c8 <RCCEx_PLLSAI1_Config+0x6c>
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80011c2:	d101      	bne.n	80011c8 <RCCEx_PLLSAI1_Config+0x6c>
 80011c4:	2001      	movs	r0, #1
 80011c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    if(status == HAL_OK)
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 80011c8:	68e9      	ldr	r1, [r5, #12]
 80011ca:	2370      	movs	r3, #112	; 0x70
 80011cc:	fa93 f3a3 	rbit	r3, r3
 80011d0:	fab3 f283 	clz	r2, r3
 80011d4:	6863      	ldr	r3, [r4, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	4093      	lsls	r3, r2
 80011da:	f021 0273 	bic.w	r2, r1, #115	; 0x73
 80011de:	4310      	orrs	r0, r2
 80011e0:	4318      	orrs	r0, r3
 80011e2:	60e8      	str	r0, [r5, #12]
  }
  
  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80011e4:	682b      	ldr	r3, [r5, #0]
 80011e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80011ea:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80011ec:	f7ff f9f4 	bl	80005d8 <HAL_GetTick>
 80011f0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80011f2:	682b      	ldr	r3, [r5, #0]
 80011f4:	4934      	ldr	r1, [pc, #208]	; (80012c8 <RCCEx_PLLSAI1_Config+0x16c>)
 80011f6:	011a      	lsls	r2, r3, #4
 80011f8:	d506      	bpl.n	8001208 <RCCEx_PLLSAI1_Config+0xac>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80011fa:	f7ff f9ed 	bl	80005d8 <HAL_GetTick>
 80011fe:	1bc0      	subs	r0, r0, r7
 8001200:	2802      	cmp	r0, #2
 8001202:	d9f6      	bls.n	80011f2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_TIMEOUT;
 8001204:	2003      	movs	r0, #3
 8001206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001208:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 800120c:	68a7      	ldr	r7, [r4, #8]
      }
    }

    if(status == HAL_OK)    
    {
      if(Divider == DIVIDER_P_UPDATE)
 800120e:	b9b6      	cbnz	r6, 800123e <RCCEx_PLLSAI1_Config+0xe2>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001210:	6908      	ldr	r0, [r1, #16]
 8001212:	fa93 f2a3 	rbit	r2, r3
 8001216:	f04f 4678 	mov.w	r6, #4160749568	; 0xf8000000
 800121a:	fab2 f282 	clz	r2, r2
 800121e:	fa96 f6a6 	rbit	r6, r6
 8001222:	fa07 f302 	lsl.w	r3, r7, r2
 8001226:	68e2      	ldr	r2, [r4, #12]
 8001228:	fab6 f686 	clz	r6, r6
 800122c:	40b2      	lsls	r2, r6
 800122e:	4313      	orrs	r3, r2
 8001230:	f020 4278 	bic.w	r2, r0, #4160749568	; 0xf8000000
 8001234:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001238:	431a      	orrs	r2, r3
 800123a:	610a      	str	r2, [r1, #16]
 800123c:	e02d      	b.n	800129a <RCCEx_PLLSAI1_Config+0x13e>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800123e:	2e01      	cmp	r6, #1
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001240:	6908      	ldr	r0, [r1, #16]
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001242:	d113      	bne.n	800126c <RCCEx_PLLSAI1_Config+0x110>
 8001244:	fa93 f2a3 	rbit	r2, r3
 8001248:	f44f 03c0 	mov.w	r3, #6291456	; 0x600000
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 800124c:	fab2 f282 	clz	r2, r2
 8001250:	fa93 f3a3 	rbit	r3, r3
 8001254:	6926      	ldr	r6, [r4, #16]
 8001256:	0876      	lsrs	r6, r6, #1
 8001258:	fab3 f383 	clz	r3, r3
 800125c:	3e01      	subs	r6, #1
 800125e:	409e      	lsls	r6, r3
 8001260:	fa07 f302 	lsl.w	r3, r7, r2
 8001264:	4333      	orrs	r3, r6
 8001266:	f420 02c0 	bic.w	r2, r0, #6291456	; 0x600000
 800126a:	e012      	b.n	8001292 <RCCEx_PLLSAI1_Config+0x136>
 800126c:	fa93 f2a3 	rbit	r2, r3
 8001270:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001274:	fab2 f282 	clz	r2, r2
 8001278:	fa93 f3a3 	rbit	r3, r3
 800127c:	6966      	ldr	r6, [r4, #20]
 800127e:	0876      	lsrs	r6, r6, #1
 8001280:	fab3 f383 	clz	r3, r3
 8001284:	3e01      	subs	r6, #1
 8001286:	409e      	lsls	r6, r3
 8001288:	fa07 f302 	lsl.w	r3, r7, r2
 800128c:	4333      	orrs	r3, r6
 800128e:	f020 62c0 	bic.w	r2, r0, #100663296	; 0x6000000
 8001292:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001296:	4313      	orrs	r3, r2
 8001298:	610b      	str	r3, [r1, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800129a:	682b      	ldr	r3, [r5, #0]
 800129c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012a0:	602b      	str	r3, [r5, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a2:	f7ff f999 	bl	80005d8 <HAL_GetTick>
 80012a6:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80012a8:	682b      	ldr	r3, [r5, #0]
 80012aa:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <RCCEx_PLLSAI1_Config+0x16c>)
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	d405      	bmi.n	80012bc <RCCEx_PLLSAI1_Config+0x160>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80012b0:	f7ff f992 	bl	80005d8 <HAL_GetTick>
 80012b4:	1b80      	subs	r0, r0, r6
 80012b6:	2802      	cmp	r0, #2
 80012b8:	d9f6      	bls.n	80012a8 <RCCEx_PLLSAI1_Config+0x14c>
 80012ba:	e7a3      	b.n	8001204 <RCCEx_PLLSAI1_Config+0xa8>
      }

      if(status == HAL_OK)    
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80012bc:	6911      	ldr	r1, [r2, #16]
 80012be:	69a3      	ldr	r3, [r4, #24]
 80012c0:	430b      	orrs	r3, r1
 80012c2:	6113      	str	r3, [r2, #16]
 80012c4:	2000      	movs	r0, #0
      }
    }
  }
  
  return status;
}
 80012c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012c8:	40021000 	.word	0x40021000

080012cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80012cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80012d0:	6805      	ldr	r5, [r0, #0]
 80012d2:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80012d6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80012d8:	d01f      	beq.n	800131a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80012da:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80012dc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80012e0:	d004      	beq.n	80012ec <HAL_RCCEx_PeriphCLKConfig+0x20>
 80012e2:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80012e6:	d00c      	beq.n	8001302 <HAL_RCCEx_PeriphCLKConfig+0x36>
 80012e8:	b9b1      	cbnz	r1, 8001318 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 80012ea:	e005      	b.n	80012f8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80012ec:	4a96      	ldr	r2, [pc, #600]	; (8001548 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012ee:	68d3      	ldr	r3, [r2, #12]
 80012f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80012f6:	e004      	b.n	8001302 <HAL_RCCEx_PeriphCLKConfig+0x36>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80012f8:	3004      	adds	r0, #4
 80012fa:	f7ff ff2f 	bl	800115c <RCCEx_PLLSAI1_Config>
    default:
      ret = HAL_ERROR;
      break;
    }

    if(ret == HAL_OK)
 80012fe:	4605      	mov	r5, r0
 8001300:	b958      	cbnz	r0, 800131a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001302:	4991      	ldr	r1, [pc, #580]	; (8001548 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001304:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001308:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800130c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800130e:	4313      	orrs	r3, r2
 8001310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001314:	2500      	movs	r5, #0
 8001316:	e000      	b.n	800131a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001318:	2501      	movs	r5, #1
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800131a:	6823      	ldr	r3, [r4, #0]
 800131c:	039e      	lsls	r6, r3, #14
 800131e:	d55a      	bpl.n	80013d6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001320:	4e89      	ldr	r6, [pc, #548]	; (8001548 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001322:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001324:	00d8      	lsls	r0, r3, #3
 8001326:	d40a      	bmi.n	800133e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001328:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800132a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132e:	65b3      	str	r3, [r6, #88]	; 0x58
 8001330:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800133a:	2701      	movs	r7, #1
 800133c:	e000      	b.n	8001340 <HAL_RCCEx_PeriphCLKConfig+0x74>
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
  {
    FlagStatus       pwrclkchanged = RESET;
 800133e:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001340:	f8df 8208 	ldr.w	r8, [pc, #520]	; 800154c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8001344:	f8d8 3000 	ldr.w	r3, [r8]
 8001348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134c:	f8c8 3000 	str.w	r3, [r8]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001350:	f7ff f942 	bl	80005d8 <HAL_GetTick>
 8001354:	4681      	mov	r9, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001356:	f8d8 3000 	ldr.w	r3, [r8]
 800135a:	05d9      	lsls	r1, r3, #23
 800135c:	d406      	bmi.n	800136c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135e:	f7ff f93b 	bl	80005d8 <HAL_GetTick>
 8001362:	ebc9 0000 	rsb	r0, r9, r0
 8001366:	2802      	cmp	r0, #2
 8001368:	d9f5      	bls.n	8001356 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800136a:	e02e      	b.n	80013ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = HAL_TIMEOUT;
        break;
      }
    }

    if(ret == HAL_OK)
 800136c:	bb75      	cbnz	r5, 80013cc <HAL_RCCEx_PeriphCLKConfig+0x100>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800136e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001372:	4a75      	ldr	r2, [pc, #468]	; (8001548 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001374:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001378:	d014      	beq.n	80013a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800137a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800137c:	428b      	cmp	r3, r1
 800137e:	d011      	beq.n	80013a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001380:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001384:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8001388:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800138c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001390:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001398:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800139c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80013a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80013a4:	07da      	lsls	r2, r3, #31
 80013a6:	f140 80c2 	bpl.w	800152e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff f915 	bl	80005d8 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ae:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b2:	4680      	mov	r8, r0

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80013b4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80013b8:	079b      	lsls	r3, r3, #30
 80013ba:	f100 80b8 	bmi.w	800152e <HAL_RCCEx_PeriphCLKConfig+0x262>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7ff f90b 	bl	80005d8 <HAL_GetTick>
 80013c2:	ebc8 0000 	rsb	r0, r8, r0
 80013c6:	4548      	cmp	r0, r9
 80013c8:	d9f4      	bls.n	80013b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
      {
        ret = HAL_TIMEOUT;
 80013ca:	2503      	movs	r5, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013cc:	b11f      	cbz	r7, 80013d6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ce:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80013d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013d4:	65b3      	str	r3, [r6, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80013d6:	6823      	ldr	r3, [r4, #0]
 80013d8:	07df      	lsls	r7, r3, #31
 80013da:	d508      	bpl.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80013dc:	485a      	ldr	r0, [pc, #360]	; (8001548 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013de:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80013e2:	f022 0103 	bic.w	r1, r2, #3
 80013e6:	6a22      	ldr	r2, [r4, #32]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80013ee:	079e      	lsls	r6, r3, #30
 80013f0:	d508      	bpl.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80013f2:	4855      	ldr	r0, [pc, #340]	; (8001548 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013f4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80013f8:	f022 010c 	bic.w	r1, r2, #12
 80013fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013fe:	430a      	orrs	r2, r1
 8001400:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001404:	0698      	lsls	r0, r3, #26
 8001406:	d508      	bpl.n	800141a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001408:	484f      	ldr	r0, [pc, #316]	; (8001548 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800140a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800140e:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 8001412:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001414:	430a      	orrs	r2, r1
 8001416:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800141a:	0599      	lsls	r1, r3, #22
 800141c:	d508      	bpl.n	8001430 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800141e:	484a      	ldr	r0, [pc, #296]	; (8001548 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001420:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001424:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 8001428:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800142a:	430a      	orrs	r2, r1
 800142c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001430:	055a      	lsls	r2, r3, #21
 8001432:	d508      	bpl.n	8001446 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001434:	4844      	ldr	r0, [pc, #272]	; (8001548 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001436:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800143a:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 800143e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001440:	430a      	orrs	r2, r1
 8001442:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001446:	065f      	lsls	r7, r3, #25
 8001448:	d508      	bpl.n	800145c <HAL_RCCEx_PeriphCLKConfig+0x190>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800144a:	483f      	ldr	r0, [pc, #252]	; (8001548 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800144c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001450:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001454:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001456:	430a      	orrs	r2, r1
 8001458:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800145c:	05de      	lsls	r6, r3, #23
 800145e:	d508      	bpl.n	8001472 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001460:	4839      	ldr	r0, [pc, #228]	; (8001548 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001462:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001466:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800146a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800146c:	430a      	orrs	r2, r1
 800146e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001472:	0498      	lsls	r0, r3, #18
 8001474:	d51a      	bpl.n	80014ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001476:	4a34      	ldr	r2, [pc, #208]	; (8001548 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001478:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800147a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800147e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001482:	430b      	orrs	r3, r1

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001484:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800148c:	d104      	bne.n	8001498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800148e:	68d3      	ldr	r3, [r2, #12]
 8001490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001494:	60d3      	str	r3, [r2, #12]
 8001496:	e009      	b.n	80014ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001498:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800149c:	d106      	bne.n	80014ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800149e:	2101      	movs	r1, #1
 80014a0:	1d20      	adds	r0, r4, #4
 80014a2:	f7ff fe5b 	bl	800115c <RCCEx_PLLSAI1_Config>
      
        if(ret != HAL_OK)
 80014a6:	2800      	cmp	r0, #0
 80014a8:	bf18      	it	ne
 80014aa:	4605      	movne	r5, r0
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80014ac:	6823      	ldr	r3, [r4, #0]
 80014ae:	0359      	lsls	r1, r3, #13
 80014b0:	d51a      	bpl.n	80014e8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80014b2:	4a25      	ldr	r2, [pc, #148]	; (8001548 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80014b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80014ba:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80014be:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80014c0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80014c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80014c8:	d104      	bne.n	80014d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80014ca:	68d3      	ldr	r3, [r2, #12]
 80014cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014d0:	60d3      	str	r3, [r2, #12]
 80014d2:	e009      	b.n	80014e8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80014d4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80014d8:	d106      	bne.n	80014e8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80014da:	2101      	movs	r1, #1
 80014dc:	1d20      	adds	r0, r4, #4
 80014de:	f7ff fe3d 	bl	800115c <RCCEx_PLLSAI1_Config>
      
      if(ret != HAL_OK)
 80014e2:	2800      	cmp	r0, #0
 80014e4:	bf18      	it	ne
 80014e6:	4605      	movne	r5, r0
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	045a      	lsls	r2, r3, #17
 80014ec:	d512      	bpl.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80014ee:	4916      	ldr	r1, [pc, #88]	; (8001548 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014f0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80014f2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80014f6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80014fa:	4313      	orrs	r3, r2
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80014fc:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001504:	d106      	bne.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001506:	2102      	movs	r1, #2
 8001508:	1d20      	adds	r0, r4, #4
 800150a:	f7ff fe27 	bl	800115c <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 800150e:	2800      	cmp	r0, #0
 8001510:	bf18      	it	ne
 8001512:	4605      	movne	r5, r0
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	041b      	lsls	r3, r3, #16
 8001518:	d512      	bpl.n	8001540 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800151a:	490b      	ldr	r1, [pc, #44]	; (8001548 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800151c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001520:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001524:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001526:	4313      	orrs	r3, r2
 8001528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
  }

#endif /* DFSDM1_Filter0 */

  return status;
 800152c:	e008      	b.n	8001540 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800152e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001532:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001536:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001538:	4313      	orrs	r3, r2
 800153a:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 800153e:	e745      	b.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0x100>
  }

#endif /* DFSDM1_Filter0 */

  return status;
}
 8001540:	4628      	mov	r0, r5
 8001542:	b003      	add	sp, #12
 8001544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001548:	40021000 	.word	0x40021000
 800154c:	40007000 	.word	0x40007000

08001550 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001550:	6a03      	ldr	r3, [r0, #32]
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001558:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800155a:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800155c:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800155e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001560:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001562:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001566:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800156a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800156c:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800156e:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001572:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001574:	4d12      	ldr	r5, [pc, #72]	; (80015c0 <TIM_OC1_SetConfig+0x70>)
 8001576:	42a8      	cmp	r0, r5
 8001578:	d006      	beq.n	8001588 <TIM_OC1_SetConfig+0x38>
 800157a:	4e12      	ldr	r6, [pc, #72]	; (80015c4 <TIM_OC1_SetConfig+0x74>)
 800157c:	42b0      	cmp	r0, r6
 800157e:	d003      	beq.n	8001588 <TIM_OC1_SetConfig+0x38>
 8001580:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001584:	42b0      	cmp	r0, r6
 8001586:	d114      	bne.n	80015b2 <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001588:	68ce      	ldr	r6, [r1, #12]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800158a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800158e:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001590:	42a8      	cmp	r0, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001592:	f023 0304 	bic.w	r3, r3, #4
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001596:	d006      	beq.n	80015a6 <TIM_OC1_SetConfig+0x56>
 8001598:	4d0a      	ldr	r5, [pc, #40]	; (80015c4 <TIM_OC1_SetConfig+0x74>)
 800159a:	42a8      	cmp	r0, r5
 800159c:	d003      	beq.n	80015a6 <TIM_OC1_SetConfig+0x56>
 800159e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015a2:	42a8      	cmp	r0, r5
 80015a4:	d105      	bne.n	80015b2 <TIM_OC1_SetConfig+0x62>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80015a6:	694e      	ldr	r6, [r1, #20]
 80015a8:	698d      	ldr	r5, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80015aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80015ae:	4335      	orrs	r5, r6
 80015b0:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015b2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80015b4:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80015b6:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80015b8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015ba:	6203      	str	r3, [r0, #32]
 80015bc:	bd70      	pop	{r4, r5, r6, pc}
 80015be:	bf00      	nop
 80015c0:	40012c00 	.word	0x40012c00
 80015c4:	40014000 	.word	0x40014000

080015c8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80015c8:	6a03      	ldr	r3, [r0, #32]
 80015ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015ce:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80015d0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80015d2:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80015d4:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80015d6:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80015d8:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80015da:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80015de:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80015e2:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 80015e4:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80015e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 80015ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80015ee:	4d0f      	ldr	r5, [pc, #60]	; (800162c <TIM_OC3_SetConfig+0x64>)
 80015f0:	42a8      	cmp	r0, r5
 80015f2:	d107      	bne.n	8001604 <TIM_OC3_SetConfig+0x3c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80015f4:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80015f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80015fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80015fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001602:	e005      	b.n	8001610 <TIM_OC3_SetConfig+0x48>
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001604:	4d0a      	ldr	r5, [pc, #40]	; (8001630 <TIM_OC3_SetConfig+0x68>)
 8001606:	42a8      	cmp	r0, r5
 8001608:	d002      	beq.n	8001610 <TIM_OC3_SetConfig+0x48>
 800160a:	4d0a      	ldr	r5, [pc, #40]	; (8001634 <TIM_OC3_SetConfig+0x6c>)
 800160c:	42a8      	cmp	r0, r5
 800160e:	d107      	bne.n	8001620 <TIM_OC3_SetConfig+0x58>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8001610:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001612:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8001616:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800161a:	698d      	ldr	r5, [r1, #24]
 800161c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001620:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001622:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001624:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001626:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001628:	6203      	str	r3, [r0, #32]
}
 800162a:	bd30      	pop	{r4, r5, pc}
 800162c:	40012c00 	.word	0x40012c00
 8001630:	40014000 	.word	0x40014000
 8001634:	40014400 	.word	0x40014400

08001638 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001638:	6a03      	ldr	r3, [r0, #32]
 800163a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800163e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001640:	6a02      	ldr	r2, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001642:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001644:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001646:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001648:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800164a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800164e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001652:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001656:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001658:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 800165c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001660:	4d0a      	ldr	r5, [pc, #40]	; (800168c <TIM_OC4_SetConfig+0x54>)
 8001662:	42a8      	cmp	r0, r5
 8001664:	d007      	beq.n	8001676 <TIM_OC4_SetConfig+0x3e>
 8001666:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800166a:	42a8      	cmp	r0, r5
 800166c:	d003      	beq.n	8001676 <TIM_OC4_SetConfig+0x3e>
 800166e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001672:	42a8      	cmp	r0, r5
 8001674:	d104      	bne.n	8001680 <TIM_OC4_SetConfig+0x48>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001676:	694d      	ldr	r5, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001678:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800167c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001680:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001682:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001684:	684b      	ldr	r3, [r1, #4]
 8001686:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001688:	6202      	str	r2, [r0, #32]
 800168a:	bd30      	pop	{r4, r5, pc}
 800168c:	40012c00 	.word	0x40012c00

08001690 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001690:	6a03      	ldr	r3, [r0, #32]
 8001692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001696:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001698:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800169a:	6842      	ldr	r2, [r0, #4]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800169c:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800169e:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80016a0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80016a2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80016a6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80016aa:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80016ac:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80016ae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80016b2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80016b6:	4d0b      	ldr	r5, [pc, #44]	; (80016e4 <TIM_OC5_SetConfig+0x54>)
 80016b8:	42a8      	cmp	r0, r5
 80016ba:	d007      	beq.n	80016cc <TIM_OC5_SetConfig+0x3c>
 80016bc:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80016c0:	42a8      	cmp	r0, r5
 80016c2:	d003      	beq.n	80016cc <TIM_OC5_SetConfig+0x3c>
 80016c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016c8:	42a8      	cmp	r0, r5
 80016ca:	d104      	bne.n	80016d6 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80016cc:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 16);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80016ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80016d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016d6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80016d8:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80016da:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80016dc:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016de:	6203      	str	r3, [r0, #32]
 80016e0:	bd30      	pop	{r4, r5, pc}
 80016e2:	bf00      	nop
 80016e4:	40012c00 	.word	0x40012c00

080016e8 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80016e8:	6a03      	ldr	r3, [r0, #32]
 80016ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016ee:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016f0:	6a02      	ldr	r2, [r0, #32]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80016f2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016f4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80016f6:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80016f8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80016fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001702:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8001706:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001708:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800170c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001710:	4d0a      	ldr	r5, [pc, #40]	; (800173c <TIM_OC6_SetConfig+0x54>)
 8001712:	42a8      	cmp	r0, r5
 8001714:	d007      	beq.n	8001726 <TIM_OC6_SetConfig+0x3e>
 8001716:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800171a:	42a8      	cmp	r0, r5
 800171c:	d003      	beq.n	8001726 <TIM_OC6_SetConfig+0x3e>
 800171e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001722:	42a8      	cmp	r0, r5
 8001724:	d104      	bne.n	8001730 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8001726:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 20);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001728:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800172c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001730:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001732:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001734:	684b      	ldr	r3, [r1, #4]
 8001736:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001738:	6202      	str	r2, [r0, #32]
 800173a:	bd30      	pop	{r4, r5, pc}
 800173c:	40012c00 	.word	0x40012c00

08001740 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001740:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <TIM_Base_SetConfig+0x64>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8001742:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001744:	4290      	cmp	r0, r2
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001746:	b510      	push	{r4, lr}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001748:	d002      	beq.n	8001750 <TIM_Base_SetConfig+0x10>
 800174a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800174e:	d109      	bne.n	8001764 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001750:	684c      	ldr	r4, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001756:	4290      	cmp	r0, r2
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001758:	ea43 0304 	orr.w	r3, r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800175c:	d009      	beq.n	8001772 <TIM_Base_SetConfig+0x32>
 800175e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001762:	d006      	beq.n	8001772 <TIM_Base_SetConfig+0x32>
 8001764:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <TIM_Base_SetConfig+0x68>)
 8001766:	4290      	cmp	r0, r2
 8001768:	d003      	beq.n	8001772 <TIM_Base_SetConfig+0x32>
 800176a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800176e:	4290      	cmp	r0, r2
 8001770:	d103      	bne.n	800177a <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001772:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001778:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 800177a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800177c:	688b      	ldr	r3, [r1, #8]
 800177e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001780:	680b      	ldr	r3, [r1, #0]
 8001782:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <TIM_Base_SetConfig+0x64>)
 8001786:	4298      	cmp	r0, r3
 8001788:	d007      	beq.n	800179a <TIM_Base_SetConfig+0x5a>
 800178a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800178e:	4298      	cmp	r0, r3
 8001790:	d003      	beq.n	800179a <TIM_Base_SetConfig+0x5a>
 8001792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001796:	4298      	cmp	r0, r3
 8001798:	d101      	bne.n	800179e <TIM_Base_SetConfig+0x5e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800179a:	690b      	ldr	r3, [r1, #16]
 800179c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800179e:	2301      	movs	r3, #1
 80017a0:	6143      	str	r3, [r0, #20]
 80017a2:	bd10      	pop	{r4, pc}
 80017a4:	40012c00 	.word	0x40012c00
 80017a8:	40014000 	.word	0x40014000

080017ac <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80017ac:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80017ae:	4604      	mov	r4, r0
 80017b0:	b1a0      	cbz	r0, 80017dc <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80017b2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017ba:	b91b      	cbnz	r3, 80017c4 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017bc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80017c0:	f000 ff80 	bl	80026c4 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80017c4:	2302      	movs	r3, #2
 80017c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017ca:	6820      	ldr	r0, [r4, #0]
 80017cc:	1d21      	adds	r1, r4, #4
 80017ce:	f7ff ffb7 	bl	8001740 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80017d2:	2301      	movs	r3, #1
 80017d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 80017d8:	2000      	movs	r0, #0
 80017da:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 80017dc:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 80017de:	bd10      	pop	{r4, pc}

080017e0 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017e0:	6a03      	ldr	r3, [r0, #32]
 80017e2:	f023 0310 	bic.w	r3, r3, #16
 80017e6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017e8:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017ea:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80017ec:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80017ee:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80017f0:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80017f2:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80017f6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80017fa:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 80017fe:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001800:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001804:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001808:	4d0f      	ldr	r5, [pc, #60]	; (8001848 <TIM_OC2_SetConfig+0x68>)
 800180a:	42a8      	cmp	r0, r5
 800180c:	d107      	bne.n	800181e <TIM_OC2_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800180e:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001814:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800181c:	e005      	b.n	800182a <TIM_OC2_SetConfig+0x4a>

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800181e:	4d0b      	ldr	r5, [pc, #44]	; (800184c <TIM_OC2_SetConfig+0x6c>)
 8001820:	42a8      	cmp	r0, r5
 8001822:	d002      	beq.n	800182a <TIM_OC2_SetConfig+0x4a>
 8001824:	4d0a      	ldr	r5, [pc, #40]	; (8001850 <TIM_OC2_SetConfig+0x70>)
 8001826:	42a8      	cmp	r0, r5
 8001828:	d107      	bne.n	800183a <TIM_OC2_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800182a:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800182c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001830:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001834:	698d      	ldr	r5, [r1, #24]
 8001836:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800183a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800183c:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800183e:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001840:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001842:	6203      	str	r3, [r0, #32]
}
 8001844:	bd30      	pop	{r4, r5, pc}
 8001846:	bf00      	nop
 8001848:	40012c00 	.word	0x40012c00
 800184c:	40014000 	.word	0x40014000
 8001850:	40014400 	.word	0x40014400

08001854 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 8001854:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001856:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800185a:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 800185c:	4604      	mov	r4, r0
 800185e:	460d      	mov	r5, r1
 8001860:	f04f 0002 	mov.w	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001864:	d07b      	beq.n	800195e <HAL_TIM_PWM_ConfigChannel+0x10a>
 8001866:	2301      	movs	r3, #1

  htim->State = HAL_TIM_STATE_BUSY;

  switch (Channel)
 8001868:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800186a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800186e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  switch (Channel)
 8001872:	d03c      	beq.n	80018ee <HAL_TIM_PWM_ConfigChannel+0x9a>
 8001874:	d813      	bhi.n	800189e <HAL_TIM_PWM_ConfigChannel+0x4a>
 8001876:	b34a      	cbz	r2, 80018cc <HAL_TIM_PWM_ConfigChannel+0x78>
 8001878:	2a04      	cmp	r2, #4
 800187a:	d16a      	bne.n	8001952 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800187c:	6820      	ldr	r0, [r4, #0]
 800187e:	f7ff ffaf 	bl	80017e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001882:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001884:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001886:	699a      	ldr	r2, [r3, #24]
 8001888:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800188c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800188e:	699a      	ldr	r2, [r3, #24]
 8001890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001894:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001896:	699a      	ldr	r2, [r3, #24]
 8001898:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800189c:	e025      	b.n	80018ea <HAL_TIM_PWM_ConfigChannel+0x96>
  /* Process Locked */
  __HAL_LOCK(htim);

  htim->State = HAL_TIM_STATE_BUSY;

  switch (Channel)
 800189e:	2a10      	cmp	r2, #16
 80018a0:	d036      	beq.n	8001910 <HAL_TIM_PWM_ConfigChannel+0xbc>
 80018a2:	2a14      	cmp	r2, #20
 80018a4:	d044      	beq.n	8001930 <HAL_TIM_PWM_ConfigChannel+0xdc>
 80018a6:	2a0c      	cmp	r2, #12
 80018a8:	d153      	bne.n	8001952 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80018aa:	6820      	ldr	r0, [r4, #0]
 80018ac:	f7ff fec4 	bl	8001638 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80018b0:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80018b2:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80018b4:	69da      	ldr	r2, [r3, #28]
 80018b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018ba:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80018bc:	69da      	ldr	r2, [r3, #28]
 80018be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80018c4:	69da      	ldr	r2, [r3, #28]
 80018c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80018ca:	e01f      	b.n	800190c <HAL_TIM_PWM_ConfigChannel+0xb8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80018cc:	6820      	ldr	r0, [r4, #0]
 80018ce:	f7ff fe3f 	bl	8001550 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	699a      	ldr	r2, [r3, #24]
 80018d6:	f042 0208 	orr.w	r2, r2, #8
 80018da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80018dc:	699a      	ldr	r2, [r3, #24]
 80018de:	f022 0204 	bic.w	r2, r2, #4
 80018e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80018e4:	6999      	ldr	r1, [r3, #24]
 80018e6:	692a      	ldr	r2, [r5, #16]
 80018e8:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80018ea:	619a      	str	r2, [r3, #24]
    }
    break;
 80018ec:	e031      	b.n	8001952 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80018ee:	6820      	ldr	r0, [r4, #0]
 80018f0:	f7ff fe6a 	bl	80015c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	69da      	ldr	r2, [r3, #28]
 80018f8:	f042 0208 	orr.w	r2, r2, #8
 80018fc:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80018fe:	69da      	ldr	r2, [r3, #28]
 8001900:	f022 0204 	bic.w	r2, r2, #4
 8001904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001906:	69d9      	ldr	r1, [r3, #28]
 8001908:	692a      	ldr	r2, [r5, #16]
 800190a:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800190c:	61da      	str	r2, [r3, #28]
    }
    break;
 800190e:	e020      	b.n	8001952 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001910:	6820      	ldr	r0, [r4, #0]
 8001912:	f7ff febd 	bl	8001690 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800191a:	f042 0208 	orr.w	r2, r2, #8
 800191e:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001922:	f022 0204 	bic.w	r2, r2, #4
 8001926:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001928:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800192a:	692a      	ldr	r2, [r5, #16]
 800192c:	430a      	orrs	r2, r1
 800192e:	e00f      	b.n	8001950 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001930:	6820      	ldr	r0, [r4, #0]
 8001932:	f7ff fed9 	bl	80016e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001936:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8001938:	6909      	ldr	r1, [r1, #16]

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800193a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800193c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001940:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001942:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001948:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 800194a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800194c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001950:	655a      	str	r2, [r3, #84]	; 0x54

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8001952:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001954:	2000      	movs	r0, #0

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8001956:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800195a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 800195e:	bd38      	pop	{r3, r4, r5, pc}

08001960 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001960:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001962:	2301      	movs	r3, #1
 8001964:	6a04      	ldr	r4, [r0, #32]
 8001966:	408b      	lsls	r3, r1
 8001968:	ea24 0303 	bic.w	r3, r4, r3
 800196c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800196e:	6a03      	ldr	r3, [r0, #32]
 8001970:	408a      	lsls	r2, r1
 8001972:	ea42 0103 	orr.w	r1, r2, r3
 8001976:	6201      	str	r1, [r0, #32]
 8001978:	bd10      	pop	{r4, pc}
	...

0800197c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800197c:	b510      	push	{r4, lr}
 800197e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001980:	2201      	movs	r2, #1
 8001982:	6800      	ldr	r0, [r0, #0]
 8001984:	f7ff ffec 	bl	8001960 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_TIM_PWM_Start+0x38>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d007      	beq.n	80019a0 <HAL_TIM_PWM_Start+0x24>
 8001990:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8001994:	4293      	cmp	r3, r2
 8001996:	d003      	beq.n	80019a0 <HAL_TIM_PWM_Start+0x24>
 8001998:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800199c:	4293      	cmp	r3, r2
 800199e:	d103      	bne.n	80019a8 <HAL_TIM_PWM_Start+0x2c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80019a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	f042 0201 	orr.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80019b0:	2000      	movs	r0, #0
 80019b2:	bd10      	pop	{r4, pc}
 80019b4:	40012c00 	.word	0x40012c00

080019b8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80019b8:	b510      	push	{r4, lr}
  uint32_t tmp = 0;

  tmp = TIM_CCER_CC1NE << Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80019ba:	2304      	movs	r3, #4
 80019bc:	6a04      	ldr	r4, [r0, #32]
 80019be:	408b      	lsls	r3, r1
 80019c0:	ea24 0303 	bic.w	r3, r4, r3
 80019c4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 80019c6:	6a03      	ldr	r3, [r0, #32]
 80019c8:	408a      	lsls	r2, r1
 80019ca:	ea42 0103 	orr.w	r1, r2, r3
 80019ce:	6201      	str	r1, [r0, #32]
 80019d0:	bd10      	pop	{r4, pc}

080019d2 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019d2:	b510      	push	{r4, lr}
 80019d4:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80019d6:	2204      	movs	r2, #4
 80019d8:	6800      	ldr	r0, [r0, #0]
 80019da:	f7ff ffed 	bl	80019b8 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80019f0:	2000      	movs	r0, #0
 80019f2:	bd10      	pop	{r4, pc}

080019f4 <HAL_TIMEx_OnePulseN_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80019f4:	b510      	push	{r4, lr}
 80019f6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 80019f8:	2200      	movs	r2, #0
 80019fa:	6800      	ldr	r0, [r0, #0]
 80019fc:	f7ff ffdc 	bl	80019b8 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	6a19      	ldr	r1, [r3, #32]
 8001a04:	f241 1211 	movw	r2, #4369	; 0x1111
 8001a08:	400a      	ands	r2, r1
 8001a0a:	b942      	cbnz	r2, 8001a1e <HAL_TIMEx_OnePulseN_Stop+0x2a>
 8001a0c:	6a19      	ldr	r1, [r3, #32]
 8001a0e:	f240 4244 	movw	r2, #1092	; 0x444
 8001a12:	400a      	ands	r2, r1
 8001a14:	b91a      	cbnz	r2, 8001a1e <HAL_TIMEx_OnePulseN_Stop+0x2a>
 8001a16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a1c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001a1e:	6a19      	ldr	r1, [r3, #32]
 8001a20:	f241 1211 	movw	r2, #4369	; 0x1111
 8001a24:	400a      	ands	r2, r1
 8001a26:	b942      	cbnz	r2, 8001a3a <HAL_TIMEx_OnePulseN_Stop+0x46>
 8001a28:	6a19      	ldr	r1, [r3, #32]
 8001a2a:	f240 4244 	movw	r2, #1092	; 0x444
 8001a2e:	400a      	ands	r2, r1
 8001a30:	b91a      	cbnz	r2, 8001a3a <HAL_TIMEx_OnePulseN_Stop+0x46>
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	f022 0201 	bic.w	r2, r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	bd10      	pop	{r4, pc}

08001a3e <HAL_TIMEx_PWMN_Stop>:
 8001a3e:	f7ff bfd9 	b.w	80019f4 <HAL_TIMEx_OnePulseN_Stop>
	...

08001a44 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a44:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001a48:	2b01      	cmp	r3, #1
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001a4a:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a4c:	d018      	beq.n	8001a80 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a4e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001a50:	4c0c      	ldr	r4, [pc, #48]	; (8001a84 <HAL_TIMEx_MasterConfigSynchronization+0x40>)

  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a52:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a54:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001a56:	42a2      	cmp	r2, r4
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001a58:	bf02      	ittt	eq
 8001a5a:	684c      	ldreq	r4, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001a5c:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001a60:	4323      	orreq	r3, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a62:	680c      	ldr	r4, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a64:	6889      	ldr	r1, [r1, #8]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a6a:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001a6c:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a70:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a72:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8001a74:	2300      	movs	r3, #0

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001a76:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 8001a78:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a80:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8001a82:	bd30      	pop	{r4, r5, pc}
 8001a84:	40012c00 	.word	0x40012c00

08001a88 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001a88:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001a8c:	2b01      	cmp	r3, #1
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8001a8e:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001a90:	d034      	beq.n	8001afc <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001a92:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001a94:	6804      	ldr	r4, [r0, #0]
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001a96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a9a:	688b      	ldr	r3, [r1, #8]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001aa2:	684b      	ldr	r3, [r1, #4]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001aaa:	680b      	ldr	r3, [r1, #0]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001ab2:	690b      	ldr	r3, [r1, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001aba:	694b      	ldr	r3, [r1, #20]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001ac0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	698b      	ldr	r3, [r1, #24]
 8001ac8:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001acc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
 8001ad2:	4294      	cmp	r4, r2
 8001ad4:	d10c      	bne.n	8001af0 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001ad6:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8001ad8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001adc:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001ae0:	69ca      	ldr	r2, [r1, #28]
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001ae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001aec:	6a0b      	ldr	r3, [r1, #32]
 8001aee:	4313      	orrs	r3, r2
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001af0:	6463      	str	r3, [r4, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8001af2:	2300      	movs	r3, #0
 8001af4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001af8:	4618      	mov	r0, r3
 8001afa:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001afc:	2002      	movs	r0, #2
  htim->Instance->BDTR = tmpbdtr;
  
  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8001afe:	bd10      	pop	{r4, pc}
 8001b00:	40012c00 	.word	0x40012c00

08001b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b06:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b08:	6805      	ldr	r5, [r0, #0]
 8001b0a:	6923      	ldr	r3, [r4, #16]
 8001b0c:	68a2      	ldr	r2, [r4, #8]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b0e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b10:	6828      	ldr	r0, [r5, #0]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	6963      	ldr	r3, [r4, #20]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	ea43 0201 	orr.w	r2, r3, r1
 8001b1c:	4b7d      	ldr	r3, [pc, #500]	; (8001d14 <UART_SetConfig+0x210>)
 8001b1e:	4003      	ands	r3, r0
 8001b20:	4313      	orrs	r3, r2
 8001b22:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b24:	686b      	ldr	r3, [r5, #4]
 8001b26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001b2a:	68e3      	ldr	r3, [r4, #12]
 8001b2c:	4313      	orrs	r3, r2
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001b2e:	4a7a      	ldr	r2, [pc, #488]	; (8001d18 <UART_SetConfig+0x214>)
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b30:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001b32:	4295      	cmp	r5, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001b34:	bf18      	it	ne
 8001b36:	6a22      	ldrne	r2, [r4, #32]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b38:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001b3a:	bf18      	it	ne
 8001b3c:	4313      	orrne	r3, r2
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b3e:	68aa      	ldr	r2, [r5, #8]
 8001b40:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8001b44:	4313      	orrs	r3, r2
 8001b46:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b48:	4b74      	ldr	r3, [pc, #464]	; (8001d1c <UART_SetConfig+0x218>)
 8001b4a:	429d      	cmp	r5, r3
 8001b4c:	d107      	bne.n	8001b5e <UART_SetConfig+0x5a>
 8001b4e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001b52:	4a73      	ldr	r2, [pc, #460]	; (8001d20 <UART_SetConfig+0x21c>)
 8001b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	e009      	b.n	8001b72 <UART_SetConfig+0x6e>
 8001b5e:	4b71      	ldr	r3, [pc, #452]	; (8001d24 <UART_SetConfig+0x220>)
 8001b60:	429d      	cmp	r5, r3
 8001b62:	d10b      	bne.n	8001b7c <UART_SetConfig+0x78>
 8001b64:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001b68:	4a6f      	ldr	r2, [pc, #444]	; (8001d28 <UART_SetConfig+0x224>)
 8001b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b6e:	f003 030c 	and.w	r3, r3, #12
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b72:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001b76:	5cd3      	ldrb	r3, [r2, r3]
 8001b78:	d065      	beq.n	8001c46 <UART_SetConfig+0x142>
 8001b7a:	e099      	b.n	8001cb0 <UART_SetConfig+0x1ac>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b7c:	4b66      	ldr	r3, [pc, #408]	; (8001d18 <UART_SetConfig+0x214>)
 8001b7e:	429d      	cmp	r5, r3
 8001b80:	f040 8089 	bne.w	8001c96 <UART_SetConfig+0x192>
 8001b84:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001b88:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001b8c:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8001b90:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001b94:	d014      	beq.n	8001bc0 <UART_SetConfig+0xbc>
 8001b96:	d805      	bhi.n	8001ba4 <UART_SetConfig+0xa0>
 8001b98:	2d00      	cmp	r5, #0
 8001b9a:	f040 80b7 	bne.w	8001d0c <UART_SetConfig+0x208>
    tmpreg = 0;

    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8001b9e:	f7ff faad 	bl	80010fc <HAL_RCC_GetPCLK1Freq>
      break;
 8001ba2:	e010      	b.n	8001bc6 <UART_SetConfig+0xc2>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ba4:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001ba8:	d007      	beq.n	8001bba <UART_SetConfig+0xb6>
 8001baa:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8001bae:	f040 80ad 	bne.w	8001d0c <UART_SetConfig+0x208>
 8001bb2:	2508      	movs	r5, #8
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
      break;
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8001bb4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001bb8:	e008      	b.n	8001bcc <UART_SetConfig+0xc8>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bba:	2502      	movs	r5, #2
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
      break;
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 8001bbc:	485b      	ldr	r0, [pc, #364]	; (8001d2c <UART_SetConfig+0x228>)
 8001bbe:	e005      	b.n	8001bcc <UART_SetConfig+0xc8>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 8001bc0:	f7fe fece 	bl	8000960 <HAL_RCC_GetSysClockFreq>
      break;
 8001bc4:	2504      	movs	r5, #4
        ret = HAL_ERROR;
      break;
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8001bc6:	2800      	cmp	r0, #0
 8001bc8:	f000 809e 	beq.w	8001d08 <UART_SetConfig+0x204>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8001bcc:	6862      	ldr	r2, [r4, #4]
 8001bce:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8001bd2:	4283      	cmp	r3, r0
 8001bd4:	f200 809a 	bhi.w	8001d0c <UART_SetConfig+0x208>
 8001bd8:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001bdc:	f200 8096 	bhi.w	8001d0c <UART_SetConfig+0x208>
      {
        ret = HAL_ERROR;
      }
      else
      {
        switch (clocksource)
 8001be0:	2d08      	cmp	r5, #8
 8001be2:	d827      	bhi.n	8001c34 <UART_SetConfig+0x130>
 8001be4:	e8df f005 	tbb	[pc, r5]
 8001be8:	26082605 	.word	0x26082605
 8001bec:	2626260e 	.word	0x2626260e
 8001bf0:	1b          	.byte	0x1b
 8001bf1:	00          	.byte	0x00
        {
        case UART_CLOCKSOURCE_PCLK1:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001bf2:	f7ff fa83 	bl	80010fc <HAL_RCC_GetPCLK1Freq>
 8001bf6:	e007      	b.n	8001c08 <UART_SetConfig+0x104>
          break;
        case UART_CLOCKSOURCE_HSI:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001bf8:	484d      	ldr	r0, [pc, #308]	; (8001d30 <UART_SetConfig+0x22c>)
 8001bfa:	0855      	lsrs	r5, r2, #1
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	1940      	adds	r0, r0, r5
 8001c02:	e011      	b.n	8001c28 <UART_SetConfig+0x124>
          break;
        case UART_CLOCKSOURCE_SYSCLK:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c04:	f7fe feac 	bl	8000960 <HAL_RCC_GetSysClockFreq>
 8001c08:	6862      	ldr	r2, [r4, #4]
 8001c0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c0e:	0856      	lsrs	r6, r2, #1
 8001c10:	2700      	movs	r7, #0
 8001c12:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001c16:	2300      	movs	r3, #0
 8001c18:	4630      	mov	r0, r6
 8001c1a:	4639      	mov	r1, r7
 8001c1c:	e006      	b.n	8001c2c <UART_SetConfig+0x128>
          break;
        case UART_CLOCKSOURCE_LSE:
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001c1e:	0850      	lsrs	r0, r2, #1
 8001c20:	2100      	movs	r1, #0
 8001c22:	2300      	movs	r3, #0
 8001c24:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001c28:	f141 0100 	adc.w	r1, r1, #0
 8001c2c:	f7fe fb20 	bl	8000270 <__aeabi_uldivmod>
          break;
 8001c30:	2200      	movs	r2, #0
 8001c32:	e000      	b.n	8001c36 <UART_SetConfig+0x132>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
          ret = HAL_ERROR;
 8001c34:	2201      	movs	r2, #1
          break;
        }
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8001c36:	4b3f      	ldr	r3, [pc, #252]	; (8001d34 <UART_SetConfig+0x230>)
 8001c38:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001c3c:	4299      	cmp	r1, r3
 8001c3e:	d865      	bhi.n	8001d0c <UART_SetConfig+0x208>
        {
           huart->Instance->BRR = tmpreg;
 8001c40:	6823      	ldr	r3, [r4, #0]
 8001c42:	60d8      	str	r0, [r3, #12]
 8001c44:	e063      	b.n	8001d0e <UART_SetConfig+0x20a>
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d828      	bhi.n	8001c9c <UART_SetConfig+0x198>
 8001c4a:	e8df f003 	tbb	[pc, r3]
 8001c4e:	0805      	.short	0x0805
 8001c50:	2712270b 	.word	0x2712270b
 8001c54:	2727      	.short	0x2727
 8001c56:	1b          	.byte	0x1b
 8001c57:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c58:	f7ff fa50 	bl	80010fc <HAL_RCC_GetPCLK1Freq>
 8001c5c:	e00b      	b.n	8001c76 <UART_SetConfig+0x172>
      break;
    case UART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c5e:	f7ff fa65 	bl	800112c <HAL_RCC_GetPCLK2Freq>
 8001c62:	e008      	b.n	8001c76 <UART_SetConfig+0x172>
      break;
    case UART_CLOCKSOURCE_HSI:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001c64:	6860      	ldr	r0, [r4, #4]
 8001c66:	0842      	lsrs	r2, r0, #1
 8001c68:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 8001c6c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8001c70:	e00c      	b.n	8001c8c <UART_SetConfig+0x188>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c72:	f7fe fe75 	bl	8000960 <HAL_RCC_GetSysClockFreq>
 8001c76:	6863      	ldr	r3, [r4, #4]
 8001c78:	085a      	lsrs	r2, r3, #1
 8001c7a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8001c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c82:	e005      	b.n	8001c90 <UART_SetConfig+0x18c>
      break;
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c84:	6860      	ldr	r0, [r4, #4]
 8001c86:	0843      	lsrs	r3, r0, #1
 8001c88:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001c8c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c90:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c92:	2200      	movs	r2, #0
    case UART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
 8001c94:	e004      	b.n	8001ca0 <UART_SetConfig+0x19c>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c96:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001c9a:	d137      	bne.n	8001d0c <UART_SetConfig+0x208>
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8001c9c:	2201      	movs	r2, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
 8001c9e:	2300      	movs	r3, #0
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8001ca0:	f3c3 0042 	ubfx	r0, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001ca4:	6821      	ldr	r1, [r4, #0]
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8001ca6:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 8001caa:	4303      	orrs	r3, r0
 8001cac:	60cb      	str	r3, [r1, #12]
 8001cae:	e02e      	b.n	8001d0e <UART_SetConfig+0x20a>
  }
  else
  {
    switch (clocksource)
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d82b      	bhi.n	8001d0c <UART_SetConfig+0x208>
 8001cb4:	e8df f003 	tbb	[pc, r3]
 8001cb8:	2a0b0805 	.word	0x2a0b0805
 8001cbc:	2a2a2a14 	.word	0x2a2a2a14
 8001cc0:	1e          	.byte	0x1e
 8001cc1:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001cc2:	f7ff fa1b 	bl	80010fc <HAL_RCC_GetPCLK1Freq>
 8001cc6:	e00d      	b.n	8001ce4 <UART_SetConfig+0x1e0>
      break;
    case UART_CLOCKSOURCE_PCLK2:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001cc8:	f7ff fa30 	bl	800112c <HAL_RCC_GetPCLK2Freq>
 8001ccc:	e00a      	b.n	8001ce4 <UART_SetConfig+0x1e0>
      break;
    case UART_CLOCKSOURCE_HSI:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001cce:	6861      	ldr	r1, [r4, #4]
 8001cd0:	084a      	lsrs	r2, r1, #1
 8001cd2:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8001cd6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cde:	e00f      	b.n	8001d00 <UART_SetConfig+0x1fc>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ce0:	f7fe fe3e 	bl	8000960 <HAL_RCC_GetSysClockFreq>
 8001ce4:	6863      	ldr	r3, [r4, #4]
 8001ce6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001cea:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cee:	b280      	uxth	r0, r0
 8001cf0:	60e8      	str	r0, [r5, #12]
 8001cf2:	e007      	b.n	8001d04 <UART_SetConfig+0x200>
      break;
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001cf4:	6862      	ldr	r2, [r4, #4]
 8001cf6:	0853      	lsrs	r3, r2, #1
 8001cf8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d04:	2200      	movs	r2, #0
    case UART_CLOCKSOURCE_SYSCLK:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
 8001d06:	e002      	b.n	8001d0e <UART_SetConfig+0x20a>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	e000      	b.n	8001d0e <UART_SetConfig+0x20a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8001d0c:	2201      	movs	r2, #1
    }
  }

  return ret;

}
 8001d0e:	4610      	mov	r0, r2
 8001d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d12:	bf00      	nop
 8001d14:	efff69f3 	.word	0xefff69f3
 8001d18:	40008000 	.word	0x40008000
 8001d1c:	40013800 	.word	0x40013800
 8001d20:	08003dc4 	.word	0x08003dc4
 8001d24:	40004400 	.word	0x40004400
 8001d28:	08003dc8 	.word	0x08003dc8
 8001d2c:	00f42400 	.word	0x00f42400
 8001d30:	f4240000 	.word	0xf4240000
 8001d34:	000ffcff 	.word	0x000ffcff

08001d38 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d3a:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001d3c:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d3e:	d506      	bpl.n	8001d4e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001d40:	6804      	ldr	r4, [r0, #0]
 8001d42:	6862      	ldr	r2, [r4, #4]
 8001d44:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8001d48:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001d4e:	079c      	lsls	r4, r3, #30
 8001d50:	d506      	bpl.n	8001d60 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001d52:	6804      	ldr	r4, [r0, #0]
 8001d54:	6862      	ldr	r2, [r4, #4]
 8001d56:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8001d5a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001d60:	0759      	lsls	r1, r3, #29
 8001d62:	d506      	bpl.n	8001d72 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001d64:	6804      	ldr	r4, [r0, #0]
 8001d66:	6862      	ldr	r2, [r4, #4]
 8001d68:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8001d6c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001d72:	071a      	lsls	r2, r3, #28
 8001d74:	d506      	bpl.n	8001d84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001d76:	6804      	ldr	r4, [r0, #0]
 8001d78:	6862      	ldr	r2, [r4, #4]
 8001d7a:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8001d7e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001d80:	430a      	orrs	r2, r1
 8001d82:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001d84:	06dc      	lsls	r4, r3, #27
 8001d86:	d506      	bpl.n	8001d96 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001d88:	6804      	ldr	r4, [r0, #0]
 8001d8a:	68a2      	ldr	r2, [r4, #8]
 8001d8c:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8001d90:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001d92:	430a      	orrs	r2, r1
 8001d94:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001d96:	0699      	lsls	r1, r3, #26
 8001d98:	d506      	bpl.n	8001da8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001d9a:	6804      	ldr	r4, [r0, #0]
 8001d9c:	68a2      	ldr	r2, [r4, #8]
 8001d9e:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8001da2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001da4:	430a      	orrs	r2, r1
 8001da6:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001da8:	065a      	lsls	r2, r3, #25
 8001daa:	d50f      	bpl.n	8001dcc <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001dac:	6801      	ldr	r1, [r0, #0]
 8001dae:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001db0:	684a      	ldr	r2, [r1, #4]
 8001db2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001db6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001db8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001dbc:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001dbe:	d105      	bne.n	8001dcc <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001dc0:	684a      	ldr	r2, [r1, #4]
 8001dc2:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 8001dc6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001dc8:	4322      	orrs	r2, r4
 8001dca:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001dcc:	061b      	lsls	r3, r3, #24
 8001dce:	d506      	bpl.n	8001dde <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001dd0:	6801      	ldr	r1, [r0, #0]
 8001dd2:	684b      	ldr	r3, [r1, #4]
 8001dd4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001dd8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	604b      	str	r3, [r1, #4]
 8001dde:	bd10      	pop	{r4, pc}

08001de0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001de4:	9d06      	ldr	r5, [sp, #24]
 8001de6:	4604      	mov	r4, r0
 8001de8:	460f      	mov	r7, r1
 8001dea:	4616      	mov	r6, r2
 8001dec:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dee:	6821      	ldr	r1, [r4, #0]
 8001df0:	69ca      	ldr	r2, [r1, #28]
 8001df2:	ea37 0302 	bics.w	r3, r7, r2
 8001df6:	bf0c      	ite	eq
 8001df8:	2201      	moveq	r2, #1
 8001dfa:	2200      	movne	r2, #0
 8001dfc:	42b2      	cmp	r2, r6
 8001dfe:	d11d      	bne.n	8001e3c <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001e00:	1c6b      	adds	r3, r5, #1
 8001e02:	d0f5      	beq.n	8001df0 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001e04:	b99d      	cbnz	r5, 8001e2e <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e0e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8001e18:	2320      	movs	r3, #32
 8001e1a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001e1e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e22:	2300      	movs	r3, #0
 8001e24:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001e28:	2003      	movs	r0, #3
 8001e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001e2e:	f7fe fbd3 	bl	80005d8 <HAL_GetTick>
 8001e32:	ebc8 0000 	rsb	r0, r8, r0
 8001e36:	4285      	cmp	r5, r0
 8001e38:	d2d9      	bcs.n	8001dee <UART_WaitOnFlagUntilTimeout+0xe>
 8001e3a:	e7e4      	b.n	8001e06 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001e3c:	2000      	movs	r0, #0
}
 8001e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e42 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001e46:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001e48:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001e4c:	2b20      	cmp	r3, #32
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e4e:	4604      	mov	r4, r0
 8001e50:	460d      	mov	r5, r1
 8001e52:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001e54:	d14b      	bne.n	8001eee <HAL_UART_Transmit+0xac>
  {
    if((pData == NULL ) || (Size == 0))
 8001e56:	2900      	cmp	r1, #0
 8001e58:	d047      	beq.n	8001eea <HAL_UART_Transmit+0xa8>
 8001e5a:	2a00      	cmp	r2, #0
 8001e5c:	d045      	beq.n	8001eea <HAL_UART_Transmit+0xa8>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e5e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d043      	beq.n	8001eee <HAL_UART_Transmit+0xac>
 8001e66:	2301      	movs	r3, #1
 8001e68:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e70:	2321      	movs	r3, #33	; 0x21
 8001e72:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001e76:	f7fe fbaf 	bl	80005d8 <HAL_GetTick>

    huart->TxXferSize = Size;
 8001e7a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001e7e:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8001e80:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0)
 8001e84:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001e88:	b292      	uxth	r2, r2
 8001e8a:	b302      	cbz	r2, 8001ece <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 8001e8c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e90:	9700      	str	r7, [sp, #0]

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	4633      	mov	r3, r6
 8001e9e:	2180      	movs	r1, #128	; 0x80
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f7ff ff9d 	bl	8001de0 <UART_WaitOnFlagUntilTimeout>
 8001ea6:	b108      	cbz	r0, 8001eac <HAL_UART_Transmit+0x6a>
      {
        return HAL_TIMEOUT;
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	e021      	b.n	8001ef0 <HAL_UART_Transmit+0xae>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eac:	68a3      	ldr	r3, [r4, #8]
 8001eae:	6822      	ldr	r2, [r4, #0]
 8001eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb4:	d107      	bne.n	8001ec6 <HAL_UART_Transmit+0x84>
 8001eb6:	6923      	ldr	r3, [r4, #16]
 8001eb8:	b92b      	cbnz	r3, 8001ec6 <HAL_UART_Transmit+0x84>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8001eba:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ec2:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8001ec4:	e7de      	b.n	8001e84 <HAL_UART_Transmit+0x42>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8001ec6:	782b      	ldrb	r3, [r5, #0]
 8001ec8:	8513      	strh	r3, [r2, #40]	; 0x28
 8001eca:	3501      	adds	r5, #1
 8001ecc:	e7da      	b.n	8001e84 <HAL_UART_Transmit+0x42>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ece:	9700      	str	r7, [sp, #0]
 8001ed0:	4633      	mov	r3, r6
 8001ed2:	2140      	movs	r1, #64	; 0x40
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f7ff ff83 	bl	8001de0 <UART_WaitOnFlagUntilTimeout>
 8001eda:	2800      	cmp	r0, #0
 8001edc:	d1e4      	bne.n	8001ea8 <HAL_UART_Transmit+0x66>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ede:	2320      	movs	r3, #32
 8001ee0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ee4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 8001ee8:	e002      	b.n	8001ef0 <HAL_UART_Transmit+0xae>
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 8001eea:	2001      	movs	r0, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_UART_Transmit+0xae>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001eee:	2002      	movs	r0, #2
  }
}
 8001ef0:	b002      	add	sp, #8
 8001ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ef6 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ef6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001efa:	4698      	mov	r8, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001efc:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001f00:	2b20      	cmp	r3, #32
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f02:	4604      	mov	r4, r0
 8001f04:	460d      	mov	r5, r1
 8001f06:	4616      	mov	r6, r2
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001f08:	d15d      	bne.n	8001fc6 <HAL_UART_Receive+0xd0>
  {
    if((pData == NULL ) || (Size == 0))
 8001f0a:	2900      	cmp	r1, #0
 8001f0c:	d059      	beq.n	8001fc2 <HAL_UART_Receive+0xcc>
 8001f0e:	2a00      	cmp	r2, #0
 8001f10:	d057      	beq.n	8001fc2 <HAL_UART_Receive+0xcc>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f12:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d055      	beq.n	8001fc6 <HAL_UART_Receive+0xd0>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f24:	2322      	movs	r3, #34	; 0x22
 8001f26:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001f2a:	f7fe fb55 	bl	80005d8 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001f2e:	68a3      	ldr	r3, [r4, #8]
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 8001f30:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001f38:	4607      	mov	r7, r0

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
 8001f3a:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001f3e:	d104      	bne.n	8001f4a <HAL_UART_Receive+0x54>
 8001f40:	6923      	ldr	r3, [r4, #16]
 8001f42:	b92b      	cbnz	r3, 8001f50 <HAL_UART_Receive+0x5a>
 8001f44:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001f48:	e00d      	b.n	8001f66 <HAL_UART_Receive+0x70>
 8001f4a:	b92b      	cbnz	r3, 8001f58 <HAL_UART_Receive+0x62>
 8001f4c:	6923      	ldr	r3, [r4, #16]
 8001f4e:	b90b      	cbnz	r3, 8001f54 <HAL_UART_Receive+0x5e>
 8001f50:	23ff      	movs	r3, #255	; 0xff
 8001f52:	e008      	b.n	8001f66 <HAL_UART_Receive+0x70>
 8001f54:	237f      	movs	r3, #127	; 0x7f
 8001f56:	e006      	b.n	8001f66 <HAL_UART_Receive+0x70>
 8001f58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f5c:	d105      	bne.n	8001f6a <HAL_UART_Receive+0x74>
 8001f5e:	6923      	ldr	r3, [r4, #16]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f7      	beq.n	8001f54 <HAL_UART_Receive+0x5e>
 8001f64:	233f      	movs	r3, #63	; 0x3f
 8001f66:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001f6a:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0)
 8001f6e:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8001f72:	b280      	uxth	r0, r0
 8001f74:	b1f8      	cbz	r0, 8001fb6 <HAL_UART_Receive+0xc0>
    {
      huart->RxXferCount--;
 8001f76:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f7a:	f8cd 8000 	str.w	r8, [sp]
    uhMask = huart->Mask;

    /* as long as data have to be received */
    while(huart->RxXferCount > 0)
    {
      huart->RxXferCount--;
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f86:	2200      	movs	r2, #0
 8001f88:	463b      	mov	r3, r7
 8001f8a:	2120      	movs	r1, #32
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f7ff ff27 	bl	8001de0 <UART_WaitOnFlagUntilTimeout>
 8001f92:	b9d0      	cbnz	r0, 8001fca <HAL_UART_Receive+0xd4>
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f94:	68a3      	ldr	r3, [r4, #8]
 8001f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	d106      	bne.n	8001fac <HAL_UART_Receive+0xb6>
 8001f9e:	6922      	ldr	r2, [r4, #16]
 8001fa0:	b922      	cbnz	r2, 8001fac <HAL_UART_Receive+0xb6>
      {
        tmp = (uint16_t*) pData ;
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001fa2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001fa4:	4033      	ands	r3, r6
 8001fa6:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2;
 8001faa:	e7e0      	b.n	8001f6e <HAL_UART_Receive+0x78>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001fac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001fae:	4033      	ands	r3, r6
 8001fb0:	702b      	strb	r3, [r5, #0]
 8001fb2:	3501      	adds	r5, #1
 8001fb4:	e7db      	b.n	8001f6e <HAL_UART_Receive+0x78>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001fb6:	2320      	movs	r3, #32
 8001fb8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fbc:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 8001fc0:	e004      	b.n	8001fcc <HAL_UART_Receive+0xd6>
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	e002      	b.n	8001fcc <HAL_UART_Receive+0xd6>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001fc6:	2002      	movs	r0, #2
 8001fc8:	e000      	b.n	8001fcc <HAL_UART_Receive+0xd6>
    while(huart->RxXferCount > 0)
    {
      huart->RxXferCount--;
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
 8001fca:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001fcc:	b002      	add	sp, #8
 8001fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001fd2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001fd4:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd6:	2600      	movs	r6, #0
 8001fd8:	66c6      	str	r6, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001fda:	f7fe fafd 	bl	80005d8 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	071a      	lsls	r2, r3, #28

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001fe4:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001fe6:	d404      	bmi.n	8001ff2 <UART_CheckIdleState+0x20>
      /* Timeout occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	075b      	lsls	r3, r3, #29
 8001fee:	d51a      	bpl.n	8002026 <UART_CheckIdleState+0x54>
 8001ff0:	e00d      	b.n	800200e <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ff2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	4632      	mov	r2, r6
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002000:	4620      	mov	r0, r4
 8002002:	f7ff feed 	bl	8001de0 <UART_WaitOnFlagUntilTimeout>
 8002006:	2800      	cmp	r0, #0
 8002008:	d0ee      	beq.n	8001fe8 <UART_CheckIdleState+0x16>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800200a:	2003      	movs	r0, #3
 800200c:	e013      	b.n	8002036 <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800200e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2200      	movs	r2, #0
 8002016:	462b      	mov	r3, r5
 8002018:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800201c:	4620      	mov	r0, r4
 800201e:	f7ff fedf 	bl	8001de0 <UART_WaitOnFlagUntilTimeout>
 8002022:	2800      	cmp	r0, #0
 8002024:	d1f1      	bne.n	800200a <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002026:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002028:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800202a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800202e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8002032:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 8002036:	b002      	add	sp, #8
 8002038:	bd70      	pop	{r4, r5, r6, pc}

0800203a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800203a:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 800203c:	4604      	mov	r4, r0
 800203e:	b360      	cbz	r0, 800209a <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002040:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002044:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002048:	b91b      	cbnz	r3, 8002052 <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800204a:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800204e:	f000 fb7b 	bl	8002748 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002052:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002054:	2324      	movs	r3, #36	; 0x24
 8002056:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800205a:	6813      	ldr	r3, [r2, #0]
 800205c:	f023 0301 	bic.w	r3, r3, #1
 8002060:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002062:	4620      	mov	r0, r4
 8002064:	f7ff fd4e 	bl	8001b04 <UART_SetConfig>
 8002068:	2801      	cmp	r0, #1
 800206a:	d016      	beq.n	800209a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800206c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800206e:	b113      	cbz	r3, 8002076 <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 8002070:	4620      	mov	r0, r4
 8002072:	f7ff fe61 	bl	8001d38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002076:	6823      	ldr	r3, [r4, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800207e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002086:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800208e:	4620      	mov	r0, r4
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002090:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8002092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002096:	f7ff bf9c 	b.w	8001fd2 <UART_CheckIdleState>
}
 800209a:	2001      	movs	r0, #1
 800209c:	bd10      	pop	{r4, pc}
	...

080020a0 <setSoundPeriod>:
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void setSoundPeriod(int32_t pwmPeriod){
 80020a0:	b538      	push	{r3, r4, r5, lr}
	HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
 80020a2:	4c09      	ldr	r4, [pc, #36]	; (80020c8 <setSoundPeriod+0x28>)
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void setSoundPeriod(int32_t pwmPeriod){
 80020a4:	4605      	mov	r5, r0
	HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
 80020a6:	2100      	movs	r1, #0
 80020a8:	4620      	mov	r0, r4
 80020aa:	f7ff fcc8 	bl	8001a3e <HAL_TIMEx_PWMN_Stop>
	TIM1->CCR1 = pwmPeriod/2;
 80020ae:	4a07      	ldr	r2, [pc, #28]	; (80020cc <setSoundPeriod+0x2c>)
 80020b0:	2302      	movs	r3, #2
	TIM1->ARR = pwmPeriod;
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80020b2:	4620      	mov	r0, r4
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void setSoundPeriod(int32_t pwmPeriod){
	HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
	TIM1->CCR1 = pwmPeriod/2;
 80020b4:	fb95 f3f3 	sdiv	r3, r5, r3
	TIM1->ARR = pwmPeriod;
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80020b8:	2100      	movs	r1, #0
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void setSoundPeriod(int32_t pwmPeriod){
	HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
	TIM1->CCR1 = pwmPeriod/2;
 80020ba:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->ARR = pwmPeriod;
 80020bc:	62d5      	str	r5, [r2, #44]	; 0x2c
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
}
 80020be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/* USER CODE BEGIN 0 */
void setSoundPeriod(int32_t pwmPeriod){
	HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
	TIM1->CCR1 = pwmPeriod/2;
	TIM1->ARR = pwmPeriod;
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80020c2:	f7ff bc86 	b.w	80019d2 <HAL_TIMEx_PWMN_Start>
 80020c6:	bf00      	nop
 80020c8:	2000013c 	.word	0x2000013c
 80020cc:	40012c00 	.word	0x40012c00

080020d0 <startLEDPWMs>:
}

void startLEDPWMs() {
 80020d0:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80020d2:	4c07      	ldr	r4, [pc, #28]	; (80020f0 <startLEDPWMs+0x20>)
 80020d4:	2100      	movs	r1, #0
 80020d6:	4620      	mov	r0, r4
 80020d8:	f7ff fc50 	bl	800197c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 80020dc:	2104      	movs	r1, #4
 80020de:	4620      	mov	r0, r4
 80020e0:	f7ff fc4c 	bl	800197c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 80020e4:	4620      	mov	r0, r4
 80020e6:	210c      	movs	r1, #12
}
 80020e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void startLEDPWMs() {
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 80020ec:	f7ff bc46 	b.w	800197c <HAL_TIM_PWM_Start>
 80020f0:	20000178 	.word	0x20000178

080020f4 <isPasswordOk>:
	//TIM2->CCR1 = red;
	//TIM2->CCR2 = green;
	//TIM2->CCR4 = blue;
}

uint8_t isPasswordOk(char *password){
 80020f4:	b530      	push	{r4, r5, lr}
	uint8_t passwordIndex = 0;
	uint8_t charIndex = 0;
 80020f6:	2300      	movs	r3, #0
	while (1){
		// if the first character is null, we have searched the whole array
		if (passwordArray[passwordIndex][charIndex] == 0) {
 80020f8:	4c0a      	ldr	r4, [pc, #40]	; (8002124 <isPasswordOk+0x30>)
	//TIM2->CCR2 = green;
	//TIM2->CCR4 = blue;
}

uint8_t isPasswordOk(char *password){
	uint8_t passwordIndex = 0;
 80020fa:	4619      	mov	r1, r3
	uint8_t charIndex = 0;
	while (1){
		// if the first character is null, we have searched the whole array
		if (passwordArray[passwordIndex][charIndex] == 0) {
 80020fc:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8002100:	5cd2      	ldrb	r2, [r2, r3]
 8002102:	b15a      	cbz	r2, 800211c <isPasswordOk+0x28>
			break;
		}
		// check each password character against the array
		if (password[charIndex] == passwordArray[passwordIndex][charIndex]){
 8002104:	5cc5      	ldrb	r5, [r0, r3]
 8002106:	4295      	cmp	r5, r2
 8002108:	d104      	bne.n	8002114 <isPasswordOk+0x20>
			// characters are the same
			if (charIndex == 3) {
 800210a:	2b03      	cmp	r3, #3
 800210c:	d008      	beq.n	8002120 <isPasswordOk+0x2c>
				return 1;	// we reached the last character, password was found!
			}
			charIndex++;	// go to next character in the string
 800210e:	3301      	adds	r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	e7f3      	b.n	80020fc <isPasswordOk+0x8>
		} else {
			// characters do not match
			charIndex = 0;
			passwordIndex++;
 8002114:	3101      	adds	r1, #1
 8002116:	b2c9      	uxtb	r1, r1
				return 1;	// we reached the last character, password was found!
			}
			charIndex++;	// go to next character in the string
		} else {
			// characters do not match
			charIndex = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	e7ef      	b.n	80020fc <isPasswordOk+0x8>
			passwordIndex++;
		}
	}
	return 0;
 800211c:	4610      	mov	r0, r2
 800211e:	bd30      	pop	{r4, r5, pc}
		}
		// check each password character against the array
		if (password[charIndex] == passwordArray[passwordIndex][charIndex]){
			// characters are the same
			if (charIndex == 3) {
				return 1;	// we reached the last character, password was found!
 8002120:	2001      	movs	r0, #1
			charIndex = 0;
			passwordIndex++;
		}
	}
	return 0;
}
 8002122:	bd30      	pop	{r4, r5, pc}
 8002124:	20000074 	.word	0x20000074

08002128 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002128:	b530      	push	{r4, r5, lr}
 800212a:	b0ad      	sub	sp, #180	; 0xb4
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800212c:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800212e:	2200      	movs	r2, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002130:	2501      	movs	r5, #1
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002132:	2402      	movs	r4, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002134:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002136:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002138:	9313      	str	r3, [sp, #76]	; 0x4c
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800213a:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800213c:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800213e:	a806      	add	r0, sp, #24
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002140:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002142:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002144:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002146:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002148:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800214a:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800214c:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800214e:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002150:	f7fe fca4 	bl	8000a9c <HAL_RCC_OscConfig>
 8002154:	b100      	cbz	r0, 8002158 <SystemClock_Config+0x30>
 8002156:	e7fe      	b.n	8002156 <SystemClock_Config+0x2e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002158:	230f      	movs	r3, #15
 800215a:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800215c:	9003      	str	r0, [sp, #12]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800215e:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002160:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002162:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002164:	4629      	mov	r1, r5
 8002166:	a801      	add	r0, sp, #4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002168:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800216a:	f7fe ff09 	bl	8000f80 <HAL_RCC_ClockConfig>
 800216e:	b100      	cbz	r0, 8002172 <SystemClock_Config+0x4a>
 8002170:	e7fe      	b.n	8002170 <SystemClock_Config+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002172:	9020      	str	r0, [sp, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002174:	a817      	add	r0, sp, #92	; 0x5c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002176:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002178:	f7ff f8a8 	bl	80012cc <HAL_RCCEx_PeriphCLKConfig>
 800217c:	b100      	cbz	r0, 8002180 <SystemClock_Config+0x58>
 800217e:	e7fe      	b.n	800217e <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002180:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002184:	f7fe fb74 	bl	8000870 <HAL_PWREx_ControlVoltageScaling>
 8002188:	4604      	mov	r4, r0
 800218a:	b100      	cbz	r0, 800218e <SystemClock_Config+0x66>
 800218c:	e7fe      	b.n	800218c <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800218e:	f7fe ffaf 	bl	80010f0 <HAL_RCC_GetHCLKFreq>
 8002192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002196:	fbb0 f0f3 	udiv	r0, r0, r3
 800219a:	f7fe fa77 	bl	800068c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800219e:	2004      	movs	r0, #4
 80021a0:	f7fe fa8a 	bl	80006b8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80021a4:	4622      	mov	r2, r4
 80021a6:	4621      	mov	r1, r4
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f7fe fa3a 	bl	8000624 <HAL_NVIC_SetPriority>
}
 80021b0:	b02d      	add	sp, #180	; 0xb4
 80021b2:	bd30      	pop	{r4, r5, pc}

080021b4 <main>:
	return 0;
}
/* USER CODE END 0 */

int main(void)
{
 80021b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021b8:	b098      	sub	sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ba:	f7fe f9f9 	bl	80005b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021be:	f7ff ffb3 	bl	8002128 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c2:	4b6f      	ldr	r3, [pc, #444]	; (8002380 <main+0x1cc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80021c4:	486f      	ldr	r0, [pc, #444]	; (8002384 <main+0x1d0>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021c8:	f042 0204 	orr.w	r2, r2, #4
 80021cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80021ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021d0:	f002 0204 	and.w	r2, r2, #4
 80021d4:	9200      	str	r2, [sp, #0]
 80021d6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	64da      	str	r2, [r3, #76]	; 0x4c
 80021e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021e2:	f002 0201 	and.w	r2, r2, #1
 80021e6:	9201      	str	r2, [sp, #4]
 80021e8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021ec:	f042 0202 	orr.w	r2, r2, #2
 80021f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80021f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f4:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80021f8:	2200      	movs	r2, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fa:	9302      	str	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80021fc:	2108      	movs	r1, #8

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002200:	9b02      	ldr	r3, [sp, #8]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002202:	2701      	movs	r7, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002204:	f7fe fb26 	bl	8000854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002208:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800220a:	485e      	ldr	r0, [pc, #376]	; (8002384 <main+0x1d0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800220c:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800220e:	a90d      	add	r1, sp, #52	; 0x34
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002210:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002216:	f7fe fa61 	bl	80006dc <HAL_GPIO_Init>

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 800221a:	485b      	ldr	r0, [pc, #364]	; (8002388 <main+0x1d4>)
  huart2.Init.BaudRate = 9600;
 800221c:	4a5b      	ldr	r2, [pc, #364]	; (800238c <main+0x1d8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800221e:	6084      	str	r4, [r0, #8]
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
 8002220:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002224:	250c      	movs	r5, #12
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
 8002226:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
 800222a:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800222c:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800222e:	6145      	str	r5, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002230:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002232:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002234:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002236:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002238:	f7ff feff 	bl	800203a <HAL_UART_Init>
 800223c:	b100      	cbz	r0, 8002240 <main+0x8c>
 800223e:	e7fe      	b.n	800223e <main+0x8a>
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 8002240:	4c53      	ldr	r4, [pc, #332]	; (8002390 <main+0x1dc>)
 8002242:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002246:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 0;
 8002248:	6060      	str	r0, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224a:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 255;
 800224c:	23ff      	movs	r3, #255	; 0xff
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224e:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002250:	4620      	mov	r0, r4
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 255;
 8002252:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002254:	f7ff faaa 	bl	80017ac <HAL_TIM_PWM_Init>
 8002258:	4626      	mov	r6, r4
 800225a:	b100      	cbz	r0, 800225e <main+0xaa>
 800225c:	e7fe      	b.n	800225c <main+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225e:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002260:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002262:	a906      	add	r1, sp, #24
 8002264:	4620      	mov	r0, r4
 8002266:	f7ff fbed 	bl	8001a44 <HAL_TIMEx_MasterConfigSynchronization>
 800226a:	4602      	mov	r2, r0
 800226c:	b100      	cbz	r0, 8002270 <main+0xbc>
 800226e:	e7fe      	b.n	800226e <main+0xba>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002270:	f04f 0860 	mov.w	r8, #96	; 0x60
  sConfigOC.Pulse = 0;
 8002274:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002276:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002278:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800227a:	a90d      	add	r1, sp, #52	; 0x34
 800227c:	4620      	mov	r0, r4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800227e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002282:	f7ff fae7 	bl	8001854 <HAL_TIM_PWM_ConfigChannel>
 8002286:	b100      	cbz	r0, 800228a <main+0xd6>
 8002288:	e7fe      	b.n	8002288 <main+0xd4>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800228a:	2204      	movs	r2, #4
 800228c:	a90d      	add	r1, sp, #52	; 0x34
 800228e:	4620      	mov	r0, r4
 8002290:	f7ff fae0 	bl	8001854 <HAL_TIM_PWM_ConfigChannel>
 8002294:	b100      	cbz	r0, 8002298 <main+0xe4>
 8002296:	e7fe      	b.n	8002296 <main+0xe2>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002298:	462a      	mov	r2, r5
 800229a:	a90d      	add	r1, sp, #52	; 0x34
 800229c:	4620      	mov	r0, r4
 800229e:	f7ff fad9 	bl	8001854 <HAL_TIM_PWM_ConfigChannel>
 80022a2:	4605      	mov	r5, r0
 80022a4:	b100      	cbz	r0, 80022a8 <main+0xf4>
 80022a6:	e7fe      	b.n	80022a6 <main+0xf2>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_TIM_MspPostInit(&htim2);
 80022a8:	4620      	mov	r0, r4

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 80022aa:	4c3a      	ldr	r4, [pc, #232]	; (8002394 <main+0x1e0>)
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_TIM_MspPostInit(&htim2);
 80022ac:	f000 fa2e 	bl	800270c <HAL_TIM_MspPostInit>

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 80022b0:	4b39      	ldr	r3, [pc, #228]	; (8002398 <main+0x1e4>)
  htim1.Init.Prescaler = 1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b2:	60a5      	str	r5, [r4, #8]
  htim1.Init.Period = 0;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022b4:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 1;
 80022b6:	e884 0088 	stmia.w	r4, {r3, r7}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0;
 80022ba:	60e5      	str	r5, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022bc:	6125      	str	r5, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80022be:	6165      	str	r5, [r4, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022c0:	f7ff fa74 	bl	80017ac <HAL_TIM_PWM_Init>
 80022c4:	b100      	cbz	r0, 80022c8 <main+0x114>
 80022c6:	e7fe      	b.n	80022c6 <main+0x112>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c8:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022ca:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022cc:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022ce:	a903      	add	r1, sp, #12
 80022d0:	4620      	mov	r0, r4
 80022d2:	f7ff fbb7 	bl	8001a44 <HAL_TIMEx_MasterConfigSynchronization>
 80022d6:	4602      	mov	r2, r0
 80022d8:	b100      	cbz	r0, 80022dc <main+0x128>
 80022da:	e7fe      	b.n	80022da <main+0x126>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
 80022dc:	9007      	str	r0, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022de:	9008      	str	r0, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022e0:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022e2:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022e4:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022e6:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022e8:	a906      	add	r1, sp, #24
 80022ea:	4620      	mov	r0, r4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ec:	f8cd 8018 	str.w	r8, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022f0:	f7ff fab0 	bl	8001854 <HAL_TIM_PWM_ConfigChannel>
 80022f4:	b100      	cbz	r0, 80022f8 <main+0x144>
 80022f6:	e7fe      	b.n	80022f6 <main+0x142>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022fc:	900d      	str	r0, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022fe:	900e      	str	r0, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002300:	900f      	str	r0, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002302:	9010      	str	r0, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002304:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002306:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002308:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800230a:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800230c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002310:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002312:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002314:	a90d      	add	r1, sp, #52	; 0x34
 8002316:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002318:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800231a:	f7ff fbb5 	bl	8001a88 <HAL_TIMEx_ConfigBreakDeadTime>
 800231e:	b100      	cbz	r0, 8002322 <main+0x16e>
 8002320:	e7fe      	b.n	8002320 <main+0x16c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_TIM_MspPostInit(&htim1);
 8002322:	481c      	ldr	r0, [pc, #112]	; (8002394 <main+0x1e0>)
 8002324:	4c1d      	ldr	r4, [pc, #116]	; (800239c <main+0x1e8>)
 8002326:	f000 f9f1 	bl	800270c <HAL_TIM_MspPostInit>

//  red  LED = TIM2_CH1 = PA5 = A4
// green LED = TIM2_CH2 = PA1 = A1
//  blue LED = TIM2_CH4 = PA3 = A2
void setLEDPWM(int8_t red, int8_t green, int8_t blue){
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,red);
 800232a:	6833      	ldr	r3, [r6, #0]
 800232c:	2200      	movs	r2, #0
 800232e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,green);
 8002330:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,blue);
 8002332:	641a      	str	r2, [r3, #64]	; 0x40
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM2_Init();
  MX_TIM1_Init();
  setLEDPWM(0,0,0);
  startLEDPWMs();
 8002334:	f7ff fecc 	bl	80020d0 <startLEDPWMs>
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  char userInput[5];
	  printf("Please enter your 4-character/number password:\r\n");
 8002338:	4819      	ldr	r0, [pc, #100]	; (80023a0 <main+0x1ec>)
 800233a:	f000 fb51 	bl	80029e0 <puts>
	  scanf("%4s",userInput);
 800233e:	a90d      	add	r1, sp, #52	; 0x34
 8002340:	4818      	ldr	r0, [pc, #96]	; (80023a4 <main+0x1f0>)
 8002342:	f000 fb55 	bl	80029f0 <iscanf>
	  if (isPasswordOk(userInput)) {
 8002346:	a80d      	add	r0, sp, #52	; 0x34
 8002348:	f7ff fed4 	bl	80020f4 <isPasswordOk>

//  red  LED = TIM2_CH1 = PA5 = A4
// green LED = TIM2_CH2 = PA1 = A1
//  blue LED = TIM2_CH4 = PA3 = A2
void setLEDPWM(int8_t red, int8_t green, int8_t blue){
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,red);
 800234c:	6833      	ldr	r3, [r6, #0]

  /* USER CODE BEGIN 3 */
	  char userInput[5];
	  printf("Please enter your 4-character/number password:\r\n");
	  scanf("%4s",userInput);
	  if (isPasswordOk(userInput)) {
 800234e:	b150      	cbz	r0, 8002366 <main+0x1b2>

//  red  LED = TIM2_CH1 = PA5 = A4
// green LED = TIM2_CH2 = PA1 = A1
//  blue LED = TIM2_CH4 = PA3 = A2
void setLEDPWM(int8_t red, int8_t green, int8_t blue){
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,red);
 8002350:	2200      	movs	r2, #0
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,green);
 8002352:	f04f 31ff 	mov.w	r1, #4294967295

//  red  LED = TIM2_CH1 = PA5 = A4
// green LED = TIM2_CH2 = PA1 = A1
//  blue LED = TIM2_CH4 = PA3 = A2
void setLEDPWM(int8_t red, int8_t green, int8_t blue){
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,red);
 8002356:	635a      	str	r2, [r3, #52]	; 0x34
	  char userInput[5];
	  printf("Please enter your 4-character/number password:\r\n");
	  scanf("%4s",userInput);
	  if (isPasswordOk(userInput)) {
		  setLEDPWM(0, 255, 0);
		  printf("\r\nPassword is correct, access granted!!!\r\n");
 8002358:	4813      	ldr	r0, [pc, #76]	; (80023a8 <main+0x1f4>)
//  red  LED = TIM2_CH1 = PA5 = A4
// green LED = TIM2_CH2 = PA1 = A1
//  blue LED = TIM2_CH4 = PA3 = A2
void setLEDPWM(int8_t red, int8_t green, int8_t blue){
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,red);
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,green);
 800235a:	6399      	str	r1, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,blue);
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
	  char userInput[5];
	  printf("Please enter your 4-character/number password:\r\n");
	  scanf("%4s",userInput);
	  if (isPasswordOk(userInput)) {
		  setLEDPWM(0, 255, 0);
		  printf("\r\nPassword is correct, access granted!!!\r\n");
 800235e:	f000 fb3f 	bl	80029e0 <puts>
		  playRTTTLSong(rtttlLibrary[1]);
 8002362:	6860      	ldr	r0, [r4, #4]
 8002364:	e008      	b.n	8002378 <main+0x1c4>

//  red  LED = TIM2_CH1 = PA5 = A4
// green LED = TIM2_CH2 = PA1 = A1
//  blue LED = TIM2_CH4 = PA3 = A2
void setLEDPWM(int8_t red, int8_t green, int8_t blue){
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,red);
 8002366:	f04f 32ff 	mov.w	r2, #4294967295
 800236a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,green);
 800236c:	6398      	str	r0, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,blue);
 800236e:	6418      	str	r0, [r3, #64]	; 0x40
		  printf("\r\nPassword is correct, access granted!!!\r\n");
		  playRTTTLSong(rtttlLibrary[1]);

	  } else {
		  setLEDPWM(255, 0, 0);
		  printf("\r\nPASSWORD IS WRONG! INTRUDER ALERT!!!\r\n");
 8002370:	480e      	ldr	r0, [pc, #56]	; (80023ac <main+0x1f8>)
 8002372:	f000 fb35 	bl	80029e0 <puts>
		  playRTTTLSong(rtttlLibrary[0]);
 8002376:	6820      	ldr	r0, [r4, #0]
 8002378:	f000 f82c 	bl	80023d4 <playRTTTLSong>
//		  setLEDPWM(10, 50, 10);
//		  printf("Current song = %s\r\n",getRTTTLSongName(rtttlLibrary[currSong]));
//		  playRTTTLSong(rtttlLibrary[currSong]);
//		  HAL_Delay(5000);
//	  }
  }
 800237c:	e7dc      	b.n	8002338 <main+0x184>
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	48000400 	.word	0x48000400
 8002388:	200001b4 	.word	0x200001b4
 800238c:	40004400 	.word	0x40004400
 8002390:	20000178 	.word	0x20000178
 8002394:	2000013c 	.word	0x2000013c
 8002398:	40012c00 	.word	0x40012c00
 800239c:	20000000 	.word	0x20000000
 80023a0:	08003dd5 	.word	0x08003dd5
 80023a4:	08003e05 	.word	0x08003e05
 80023a8:	08003e09 	.word	0x08003e09
 80023ac:	08003e33 	.word	0x08003e33

080023b0 <playSound>:
static uint8_t duration = 0;
static uint8_t octave = 0;
static uint16_t tempo = 0;

// Output a sound through the TPM1CH1 pin (PTB5): freq in Hz, dur in ms
void playSound(uint16_t freq, uint16_t duration) {
 80023b0:	b510      	push	{r4, lr}
	setSoundPeriod(16000000 / freq);
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <playSound+0x20>)
 80023b4:	fb93 f0f0 	sdiv	r0, r3, r0
static uint8_t duration = 0;
static uint8_t octave = 0;
static uint16_t tempo = 0;

// Output a sound through the TPM1CH1 pin (PTB5): freq in Hz, dur in ms
void playSound(uint16_t freq, uint16_t duration) {
 80023b8:	460c      	mov	r4, r1
	setSoundPeriod(16000000 / freq);
 80023ba:	f7ff fe71 	bl	80020a0 <setSoundPeriod>
	HAL_Delay(duration);
 80023be:	4620      	mov	r0, r4
 80023c0:	f7fe f910 	bl	80005e4 <HAL_Delay>
	setSoundPeriod(0);
 80023c4:	2000      	movs	r0, #0
}
 80023c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

// Output a sound through the TPM1CH1 pin (PTB5): freq in Hz, dur in ms
void playSound(uint16_t freq, uint16_t duration) {
	setSoundPeriod(16000000 / freq);
	HAL_Delay(duration);
	setSoundPeriod(0);
 80023ca:	f7ff be69 	b.w	80020a0 <setSoundPeriod>
 80023ce:	bf00      	nop
 80023d0:	00f42400 	.word	0x00f42400

080023d4 <playRTTTLSong>:
	tempName[stringPos] = 0;
	return tempName;
}

// This function plays a song passed in a string in RTTTL format
void playRTTTLSong(const char *currSong) {
 80023d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t tempDuration = 0;
  uint8_t tempOctave = 0;
  uint8_t currentNote = 0;
  uint8_t dotFlag = 0;
  uint16_t calcDuration = 0;
  duration = 4;                 // default duration = 4/4 = 1 beat
 80023d8:	4d92      	ldr	r5, [pc, #584]	; (8002624 <playRTTTLSong+0x250>)
  tempo = 63;                   // default tempo = 63 bpm
 80023da:	4e93      	ldr	r6, [pc, #588]	; (8002628 <playRTTTLSong+0x254>)
  octave = 6;                   // default octave = 6th
 80023dc:	4f93      	ldr	r7, [pc, #588]	; (800262c <playRTTTLSong+0x258>)
  uint8_t tempDuration = 0;
  uint8_t tempOctave = 0;
  uint8_t currentNote = 0;
  uint8_t dotFlag = 0;
  uint16_t calcDuration = 0;
  duration = 4;                 // default duration = 4/4 = 1 beat
 80023de:	2304      	movs	r3, #4
 80023e0:	702b      	strb	r3, [r5, #0]
  tempo = 63;                   // default tempo = 63 bpm
 80023e2:	233f      	movs	r3, #63	; 0x3f
 80023e4:	8033      	strh	r3, [r6, #0]
  octave = 6;                   // default octave = 6th
 80023e6:	2306      	movs	r3, #6
 80023e8:	703b      	strb	r3, [r7, #0]
 80023ea:	4603      	mov	r3, r0
 80023ec:	3001      	adds	r0, #1
  while (*currSong != ':') currSong++;  // find the first ':'
 80023ee:	781a      	ldrb	r2, [r3, #0]
 80023f0:	2a3a      	cmp	r2, #58	; 0x3a
 80023f2:	d1fa      	bne.n	80023ea <playRTTTLSong+0x16>
  currSong++;                       // skip the ':'
  while (*currSong!=':')            // repeat until find a ':'
 80023f4:	f04f 0800 	mov.w	r8, #0
  uint16_t calcDuration = 0;
  duration = 4;                 // default duration = 4/4 = 1 beat
  tempo = 63;                   // default tempo = 63 bpm
  octave = 6;                   // default octave = 6th
  while (*currSong != ':') currSong++;  // find the first ':'
  currSong++;                       // skip the ':'
 80023f8:	4603      	mov	r3, r0
  while (*currSong!=':')            // repeat until find a ':'
 80023fa:	2104      	movs	r1, #4
 80023fc:	46c4      	mov	ip, r8
 80023fe:	2406      	movs	r4, #6
 8002400:	46c1      	mov	r9, r8
 8002402:	223f      	movs	r2, #63	; 0x3f
 8002404:	7818      	ldrb	r0, [r3, #0]
 8002406:	283a      	cmp	r0, #58	; 0x3a
 8002408:	f000 8093 	beq.w	8002532 <playRTTTLSong+0x15e>
  {
    if (*currSong == 'd')           // if it is the duration setting
 800240c:	2864      	cmp	r0, #100	; 0x64
 800240e:	d127      	bne.n	8002460 <playRTTTLSong+0x8c>
 8002410:	3301      	adds	r3, #1
    {
      duration = 0;             // set duration to zero (temporarily)
      currSong++;                   // advance to the next character
      while (*currSong == '=') currSong++;  // skip the '='
 8002412:	7819      	ldrb	r1, [r3, #0]
 8002414:	293d      	cmp	r1, #61	; 0x3d
 8002416:	f103 0001 	add.w	r0, r3, #1
 800241a:	d101      	bne.n	8002420 <playRTTTLSong+0x4c>
 800241c:	4603      	mov	r3, r0
 800241e:	e7f8      	b.n	8002412 <playRTTTLSong+0x3e>
 8002420:	4618      	mov	r0, r3
      while (*currSong == ' ') currSong++;  // skip the spaces
 8002422:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002426:	2920      	cmp	r1, #32
 8002428:	d0fa      	beq.n	8002420 <playRTTTLSong+0x4c>
      // if the character is a number, set the duration
      if (*currSong>='0' && *currSong<='9') duration = *currSong - '0';
      currSong++;                   // advance to the next character
      // if the character is also a number (duration can be 2 digits long)
      if (*currSong>='0' && *currSong<='9')
 800242a:	7843      	ldrb	r3, [r0, #1]
      duration = 0;             // set duration to zero (temporarily)
      currSong++;                   // advance to the next character
      while (*currSong == '=') currSong++;  // skip the '='
      while (*currSong == ' ') currSong++;  // skip the spaces
      // if the character is a number, set the duration
      if (*currSong>='0' && *currSong<='9') duration = *currSong - '0';
 800242c:	3930      	subs	r1, #48	; 0x30
 800242e:	b2c9      	uxtb	r1, r1
      currSong++;                   // advance to the next character
      // if the character is also a number (duration can be 2 digits long)
      if (*currSong>='0' && *currSong<='9')
 8002430:	3b30      	subs	r3, #48	; 0x30
  currSong++;                       // skip the ':'
  while (*currSong!=':')            // repeat until find a ':'
  {
    if (*currSong == 'd')           // if it is the duration setting
    {
      duration = 0;             // set duration to zero (temporarily)
 8002432:	290a      	cmp	r1, #10
      while (*currSong == ' ') currSong++;  // skip the spaces
      // if the character is a number, set the duration
      if (*currSong>='0' && *currSong<='9') duration = *currSong - '0';
      currSong++;                   // advance to the next character
      // if the character is also a number (duration can be 2 digits long)
      if (*currSong>='0' && *currSong<='9')
 8002434:	b2db      	uxtb	r3, r3
  currSong++;                       // skip the ':'
  while (*currSong!=':')            // repeat until find a ':'
  {
    if (*currSong == 'd')           // if it is the duration setting
    {
      duration = 0;             // set duration to zero (temporarily)
 8002436:	bf28      	it	cs
 8002438:	2100      	movcs	r1, #0
      while (*currSong == ' ') currSong++;  // skip the spaces
      // if the character is a number, set the duration
      if (*currSong>='0' && *currSong<='9') duration = *currSong - '0';
      currSong++;                   // advance to the next character
      // if the character is also a number (duration can be 2 digits long)
      if (*currSong>='0' && *currSong<='9')
 800243a:	2b09      	cmp	r3, #9
      { // multiply duration by 10 and add the value of the character
        duration = duration*10 + (*currSong - '0');
 800243c:	bf9b      	ittet	ls
 800243e:	eb01 0181 	addls.w	r1, r1, r1, lsl #2
 8002442:	eb03 0141 	addls.w	r1, r3, r1, lsl #1
      currSong++;                   // advance to the next character
      while (*currSong == '=') currSong++;  // skip the '='
      while (*currSong == ' ') currSong++;  // skip the spaces
      // if the character is a number, set the duration
      if (*currSong>='0' && *currSong<='9') duration = *currSong - '0';
      currSong++;                   // advance to the next character
 8002446:	3001      	addhi	r0, #1
      // if the character is also a number (duration can be 2 digits long)
      if (*currSong>='0' && *currSong<='9')
      { // multiply duration by 10 and add the value of the character
        duration = duration*10 + (*currSong - '0');
 8002448:	b2c9      	uxtbls	r1, r1
        currSong++;                 // advance to the next character
 800244a:	bf98      	it	ls
 800244c:	3002      	addls	r0, #2
 800244e:	4603      	mov	r3, r0
 8002450:	3001      	adds	r0, #1
      }
      while (*currSong == ',') currSong++;  // skip the ','
 8002452:	f893 e000 	ldrb.w	lr, [r3]
 8002456:	f1be 0f2c 	cmp.w	lr, #44	; 0x2c
 800245a:	d0f8      	beq.n	800244e <playRTTTLSong+0x7a>
 800245c:	f04f 0801 	mov.w	r8, #1
    }
    if (*currSong == 'o')           // if it is the octave setting
 8002460:	7818      	ldrb	r0, [r3, #0]
 8002462:	286f      	cmp	r0, #111	; 0x6f
 8002464:	d11a      	bne.n	800249c <playRTTTLSong+0xc8>
 8002466:	3301      	adds	r3, #1
    {
      octave = 0;               // set octave to zero (temporarily)
      currSong++;                   // advance to the next character
      while (*currSong == '=') currSong++;  // skip the '='
 8002468:	7818      	ldrb	r0, [r3, #0]
 800246a:	283d      	cmp	r0, #61	; 0x3d
 800246c:	f103 0401 	add.w	r4, r3, #1
 8002470:	d101      	bne.n	8002476 <playRTTTLSong+0xa2>
 8002472:	4623      	mov	r3, r4
 8002474:	e7f8      	b.n	8002468 <playRTTTLSong+0x94>
      while (*currSong == ' ') currSong++;  // skip the spaces
 8002476:	f813 4b01 	ldrb.w	r4, [r3], #1
 800247a:	2c20      	cmp	r4, #32
 800247c:	d0fb      	beq.n	8002476 <playRTTTLSong+0xa2>
      // if the character is a number, then set the octave
      if (*currSong>='0' && *currSong<='9') octave = *currSong - '0';
 800247e:	3c30      	subs	r4, #48	; 0x30
 8002480:	b2e4      	uxtb	r4, r4
      }
      while (*currSong == ',') currSong++;  // skip the ','
    }
    if (*currSong == 'o')           // if it is the octave setting
    {
      octave = 0;               // set octave to zero (temporarily)
 8002482:	2c0a      	cmp	r4, #10
 8002484:	bf28      	it	cs
 8002486:	2400      	movcs	r4, #0
 8002488:	4618      	mov	r0, r3
 800248a:	4603      	mov	r3, r0
 800248c:	3001      	adds	r0, #1
      while (*currSong == '=') currSong++;  // skip the '='
      while (*currSong == ' ') currSong++;  // skip the spaces
      // if the character is a number, then set the octave
      if (*currSong>='0' && *currSong<='9') octave = *currSong - '0';
      currSong++;                   // advance to the next character
      while (*currSong == ',') currSong++;  // skips the ','
 800248e:	f893 e000 	ldrb.w	lr, [r3]
 8002492:	f1be 0f2c 	cmp.w	lr, #44	; 0x2c
 8002496:	d0f8      	beq.n	800248a <playRTTTLSong+0xb6>
 8002498:	f04f 0c01 	mov.w	ip, #1
    }
    if (*currSong == 'b')           // if it is the tempo setting (beats per minute)
 800249c:	7818      	ldrb	r0, [r3, #0]
 800249e:	2862      	cmp	r0, #98	; 0x62
 80024a0:	d13a      	bne.n	8002518 <playRTTTLSong+0x144>
 80024a2:	3301      	adds	r3, #1
    {
      tempo = 0;                // set tempo to zero (temporarily)
      currSong++;                   // advance to the next character
      while (*currSong == '=') currSong++;  // skips '='
 80024a4:	781a      	ldrb	r2, [r3, #0]
 80024a6:	2a3d      	cmp	r2, #61	; 0x3d
 80024a8:	f103 0001 	add.w	r0, r3, #1
 80024ac:	d101      	bne.n	80024b2 <playRTTTLSong+0xde>
 80024ae:	4603      	mov	r3, r0
 80024b0:	e7f8      	b.n	80024a4 <playRTTTLSong+0xd0>
      while (*currSong == ' ') currSong++;  // skips spaces
 80024b2:	781a      	ldrb	r2, [r3, #0]
 80024b4:	2a20      	cmp	r2, #32
 80024b6:	4618      	mov	r0, r3
 80024b8:	f103 0301 	add.w	r3, r3, #1
 80024bc:	d0f9      	beq.n	80024b2 <playRTTTLSong+0xde>
      // now read the tempo setting (can be 3 digits long)
      if (*currSong>='0' && *currSong<='9') tempo = *currSong - '0';
 80024be:	3a30      	subs	r2, #48	; 0x30
 80024c0:	b2d3      	uxtb	r3, r2
 80024c2:	2b09      	cmp	r3, #9
      currSong++;                   // advance to the next character
      if (*currSong>='0' && *currSong<='9')
 80024c4:	7843      	ldrb	r3, [r0, #1]
 80024c6:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 80024ca:	fa5f fe83 	uxtb.w	lr, r3
      tempo = 0;                // set tempo to zero (temporarily)
      currSong++;                   // advance to the next character
      while (*currSong == '=') currSong++;  // skips '='
      while (*currSong == ' ') currSong++;  // skips spaces
      // now read the tempo setting (can be 3 digits long)
      if (*currSong>='0' && *currSong<='9') tempo = *currSong - '0';
 80024ce:	bf94      	ite	ls
 80024d0:	b292      	uxthls	r2, r2
      currSong++;                   // advance to the next character
      while (*currSong == ',') currSong++;  // skips the ','
    }
    if (*currSong == 'b')           // if it is the tempo setting (beats per minute)
    {
      tempo = 0;                // set tempo to zero (temporarily)
 80024d2:	2200      	movhi	r2, #0
      while (*currSong == '=') currSong++;  // skips '='
      while (*currSong == ' ') currSong++;  // skips spaces
      // now read the tempo setting (can be 3 digits long)
      if (*currSong>='0' && *currSong<='9') tempo = *currSong - '0';
      currSong++;                   // advance to the next character
      if (*currSong>='0' && *currSong<='9')
 80024d4:	f1be 0f09 	cmp.w	lr, #9
 80024d8:	d901      	bls.n	80024de <playRTTTLSong+0x10a>
      currSong++;                   // advance to the next character
      while (*currSong == '=') currSong++;  // skips '='
      while (*currSong == ' ') currSong++;  // skips spaces
      // now read the tempo setting (can be 3 digits long)
      if (*currSong>='0' && *currSong<='9') tempo = *currSong - '0';
      currSong++;                   // advance to the next character
 80024da:	3001      	adds	r0, #1
 80024dc:	e013      	b.n	8002506 <playRTTTLSong+0x132>
      if (*currSong>='0' && *currSong<='9')
      {
        tempo = tempo*10 + (*currSong - '0'); // tempo is two digits
 80024de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80024e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        currSong++;                 // advance to the next character
        if (*currSong>='0' && *currSong<='9')
 80024e6:	7883      	ldrb	r3, [r0, #2]
 80024e8:	3b30      	subs	r3, #48	; 0x30
 80024ea:	fa5f fe83 	uxtb.w	lr, r3
 80024ee:	f1be 0f09 	cmp.w	lr, #9
      // now read the tempo setting (can be 3 digits long)
      if (*currSong>='0' && *currSong<='9') tempo = *currSong - '0';
      currSong++;                   // advance to the next character
      if (*currSong>='0' && *currSong<='9')
      {
        tempo = tempo*10 + (*currSong - '0'); // tempo is two digits
 80024f2:	b292      	uxth	r2, r2
        currSong++;                 // advance to the next character
        if (*currSong>='0' && *currSong<='9')
        {
          tempo = tempo*10 + (*currSong - '0'); // tempo is three digits
 80024f4:	bf9b      	ittet	ls
 80024f6:	eb02 0282 	addls.w	r2, r2, r2, lsl #2
 80024fa:	eb03 0242 	addls.w	r2, r3, r2, lsl #1
      if (*currSong>='0' && *currSong<='9') tempo = *currSong - '0';
      currSong++;                   // advance to the next character
      if (*currSong>='0' && *currSong<='9')
      {
        tempo = tempo*10 + (*currSong - '0'); // tempo is two digits
        currSong++;                 // advance to the next character
 80024fe:	3002      	addhi	r0, #2
        if (*currSong>='0' && *currSong<='9')
        {
          tempo = tempo*10 + (*currSong - '0'); // tempo is three digits
 8002500:	b292      	uxthls	r2, r2
          currSong++;               // advance to the next character
 8002502:	bf98      	it	ls
 8002504:	3003      	addls	r0, #3
 8002506:	4686      	mov	lr, r0
 8002508:	3001      	adds	r0, #1
        }
      }
      while (*currSong == ',') currSong++;  // skip the ','
 800250a:	f89e 3000 	ldrb.w	r3, [lr]
 800250e:	2b2c      	cmp	r3, #44	; 0x2c
 8002510:	d0f9      	beq.n	8002506 <playRTTTLSong+0x132>
 8002512:	f04f 0901 	mov.w	r9, #1
 8002516:	e005      	b.n	8002524 <playRTTTLSong+0x150>
 8002518:	469e      	mov	lr, r3
 800251a:	3301      	adds	r3, #1
    }
    while (*currSong == ',') currSong++;    // skip the ','
 800251c:	f89e 0000 	ldrb.w	r0, [lr]
 8002520:	282c      	cmp	r0, #44	; 0x2c
 8002522:	d0f9      	beq.n	8002518 <playRTTTLSong+0x144>
 8002524:	4673      	mov	r3, lr
 8002526:	f10e 0e01 	add.w	lr, lr, #1
    while (*currSong == ' ') currSong++;    // skip the ','
 800252a:	7818      	ldrb	r0, [r3, #0]
 800252c:	2820      	cmp	r0, #32
 800252e:	d0f9      	beq.n	8002524 <playRTTTLSong+0x150>
 8002530:	e768      	b.n	8002404 <playRTTTLSong+0x30>
 8002532:	f1b9 0f00 	cmp.w	r9, #0
 8002536:	d000      	beq.n	800253a <playRTTTLSong+0x166>
 8002538:	8032      	strh	r2, [r6, #0]
 800253a:	f1bc 0f00 	cmp.w	ip, #0
 800253e:	d000      	beq.n	8002542 <playRTTTLSong+0x16e>
 8002540:	703c      	strb	r4, [r7, #0]
 8002542:	f1b8 0f00 	cmp.w	r8, #0
 8002546:	d000      	beq.n	800254a <playRTTTLSong+0x176>
 8002548:	7029      	strb	r1, [r5, #0]
 800254a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8002630 <playRTTTLSong+0x25c>
    calcDuration = (60000/tempo)/(tempDuration);
    calcDuration *= 4;         // a whole note has four beats
    // check if the dot flag is set, if it is set, extend the duration in 50%
    if (dotFlag) calcDuration = (calcDuration*3)/2;
    // if the current note is not a pause, play the note using the sound function
    if (currentNote<255) playSound(note[tempOctave-4][currentNote],calcDuration);
 800254e:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8002634 <playRTTTLSong+0x260>
      while (*currSong == ',') currSong++;  // skip the ','
    }
    while (*currSong == ',') currSong++;    // skip the ','
    while (*currSong == ' ') currSong++;    // skip the ','
  }
  currSong++;                       // advance to the next character
 8002552:	1c5c      	adds	r4, r3, #1
  // read the musical notes
  while (*currSong)                 // repeat until the character is null
 8002554:	7823      	ldrb	r3, [r4, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d061      	beq.n	800261e <playRTTTLSong+0x24a>
    currentNote = 255;         // default note = pause
    tempOctave = octave;       // set the octave to the music default
    tempDuration = duration;   // set the duration to the music default
    dotFlag = 0;               // clear the dot detection flag
    // look for a duration prefix
    if (*currSong>='0' && *currSong<='9')
 800255a:	3b30      	subs	r3, #48	; 0x30
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b09      	cmp	r3, #9
  currSong++;                       // advance to the next character
  // read the musical notes
  while (*currSong)                 // repeat until the character is null
  {
    currentNote = 255;         // default note = pause
    tempOctave = octave;       // set the octave to the music default
 8002560:	7838      	ldrb	r0, [r7, #0]
    tempDuration = duration;   // set the duration to the music default
 8002562:	f895 c000 	ldrb.w	ip, [r5]
    dotFlag = 0;               // clear the dot detection flag
    // look for a duration prefix
    if (*currSong>='0' && *currSong<='9')
 8002566:	d80e      	bhi.n	8002586 <playRTTTLSong+0x1b2>
    {
      tempDuration = *currSong - '0';
      currSong++;
      if (*currSong>='0' && *currSong<='9')
 8002568:	7861      	ldrb	r1, [r4, #1]
 800256a:	3930      	subs	r1, #48	; 0x30
 800256c:	b2c9      	uxtb	r1, r1
 800256e:	2909      	cmp	r1, #9
      {
        tempDuration = tempDuration*10 + (*currSong - '0');
 8002570:	bf99      	ittee	ls
 8002572:	eb03 0383 	addls.w	r3, r3, r3, lsl #2
 8002576:	eb01 0143 	addls.w	r1, r1, r3, lsl #1
    dotFlag = 0;               // clear the dot detection flag
    // look for a duration prefix
    if (*currSong>='0' && *currSong<='9')
    {
      tempDuration = *currSong - '0';
      currSong++;
 800257a:	3401      	addhi	r4, #1
 800257c:	469c      	movhi	ip, r3
      if (*currSong>='0' && *currSong<='9')
      {
        tempDuration = tempDuration*10 + (*currSong - '0');
 800257e:	bf9c      	itt	ls
 8002580:	f001 0cff 	andls.w	ip, r1, #255	; 0xff
        currSong++;
 8002584:	3402      	addls	r4, #2
 8002586:	7823      	ldrb	r3, [r4, #0]
 8002588:	3b61      	subs	r3, #97	; 0x61
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b06      	cmp	r3, #6
 800258e:	bf98      	it	ls
 8002590:	f818 2003 	ldrbls.w	r2, [r8, r3]
      case 'b': currentNote = 11; break;   // B (si)
      case 'p': currentNote = 255; break;  // pause
    }
    currSong++;                     // advance to the next character
    // look for a # following the note
    if (*currSong=='#')
 8002594:	7863      	ldrb	r3, [r4, #1]
        tempDuration = tempDuration*10 + (*currSong - '0');
        currSong++;
      }
    }
    // look for a note
    switch (*currSong)
 8002596:	bf88      	it	hi
 8002598:	22ff      	movhi	r2, #255	; 0xff
      case 'b': currentNote = 11; break;   // B (si)
      case 'p': currentNote = 255; break;  // pause
    }
    currSong++;                     // advance to the next character
    // look for a # following the note
    if (*currSong=='#')
 800259a:	2b23      	cmp	r3, #35	; 0x23
    {
      currentNote++;   // increment the note (A->A#, C->C#, D->D#, F->F#, G->G#)
      currSong++;                   // advance to the next character
 800259c:	bf0a      	itet	eq
 800259e:	1ca3      	addeq	r3, r4, #2
      case 'g': currentNote = 7; break;    // G (sol)
      case 'a': currentNote = 9; break;    // A (la)
      case 'b': currentNote = 11; break;   // B (si)
      case 'p': currentNote = 255; break;  // pause
    }
    currSong++;                     // advance to the next character
 80025a0:	1c63      	addne	r3, r4, #1
    // look for a # following the note
    if (*currSong=='#')
    {
      currentNote++;   // increment the note (A->A#, C->C#, D->D#, F->F#, G->G#)
 80025a2:	3201      	addeq	r2, #1
      currSong++;                   // advance to the next character
    }
    // look for a '.' (extend the note duration in 50%)
    if (*currSong=='.')
 80025a4:	7819      	ldrb	r1, [r3, #0]
    }
    currSong++;                     // advance to the next character
    // look for a # following the note
    if (*currSong=='#')
    {
      currentNote++;   // increment the note (A->A#, C->C#, D->D#, F->F#, G->G#)
 80025a6:	bf08      	it	eq
 80025a8:	b2d2      	uxtbeq	r2, r2
      currSong++;                   // advance to the next character
    }
    // look for a '.' (extend the note duration in 50%)
    if (*currSong=='.')
 80025aa:	292e      	cmp	r1, #46	; 0x2e
    {
      dotFlag = 1;             // if a '.' is found, set the flag
      currSong++;                   // advance to the next character
 80025ac:	bf04      	itt	eq
 80025ae:	3301      	addeq	r3, #1
      currSong++;                   // advance to the next character
    }
    // look for a '.' (extend the note duration in 50%)
    if (*currSong=='.')
    {
      dotFlag = 1;             // if a '.' is found, set the flag
 80025b0:	f04f 0e01 	moveq.w	lr, #1
      currSong++;                   // advance to the next character
    }

    // look for an octave postfix
    if (*currSong>='0' && *currSong<='9')
 80025b4:	7819      	ldrb	r1, [r3, #0]
 80025b6:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
 80025ba:	b2c9      	uxtb	r1, r1
  while (*currSong)                 // repeat until the character is null
  {
    currentNote = 255;         // default note = pause
    tempOctave = octave;       // set the octave to the music default
    tempDuration = duration;   // set the duration to the music default
    dotFlag = 0;               // clear the dot detection flag
 80025bc:	bf18      	it	ne
 80025be:	f04f 0e00 	movne.w	lr, #0
      dotFlag = 1;             // if a '.' is found, set the flag
      currSong++;                   // advance to the next character
    }

    // look for an octave postfix
    if (*currSong>='0' && *currSong<='9')
 80025c2:	2909      	cmp	r1, #9
    {
      tempOctave = *currSong - '0';// the temporary octave is set accordingly
      currSong++;                   // advance to the next character
 80025c4:	bf9c      	itt	ls
 80025c6:	3301      	addls	r3, #1
 80025c8:	4608      	movls	r0, r1
    }
    if (*currSong=='.')             // a dot can also be found after the octave (???)
 80025ca:	7819      	ldrb	r1, [r3, #0]
 80025cc:	292e      	cmp	r1, #46	; 0x2e
    {
      dotFlag = 1;             // if a '.' is found, set the flag
      currSong++;                   // advance to the next character
 80025ce:	bf04      	itt	eq
 80025d0:	3301      	addeq	r3, #1
      tempOctave = *currSong - '0';// the temporary octave is set accordingly
      currSong++;                   // advance to the next character
    }
    if (*currSong=='.')             // a dot can also be found after the octave (???)
    {
      dotFlag = 1;             // if a '.' is found, set the flag
 80025d2:	f04f 0e01 	moveq.w	lr, #1
 80025d6:	461c      	mov	r4, r3
 80025d8:	3301      	adds	r3, #1
      currSong++;                   // advance to the next character
    }
    while (*currSong == ',') currSong++;    // skip the ','
 80025da:	7821      	ldrb	r1, [r4, #0]
 80025dc:	292c      	cmp	r1, #44	; 0x2c
 80025de:	d0fa      	beq.n	80025d6 <playRTTTLSong+0x202>
    // calculate the note duration
    calcDuration = (60000/tempo)/(tempDuration);
 80025e0:	8831      	ldrh	r1, [r6, #0]
 80025e2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80025e6:	fb93 f1f1 	sdiv	r1, r3, r1
 80025ea:	fb91 f1fc 	sdiv	r1, r1, ip
    calcDuration *= 4;         // a whole note has four beats
 80025ee:	0089      	lsls	r1, r1, #2
 80025f0:	b289      	uxth	r1, r1
    // check if the dot flag is set, if it is set, extend the duration in 50%
    if (dotFlag) calcDuration = (calcDuration*3)/2;
 80025f2:	f1be 0f00 	cmp.w	lr, #0
 80025f6:	d003      	beq.n	8002600 <playRTTTLSong+0x22c>
 80025f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80025fc:	1049      	asrs	r1, r1, #1
 80025fe:	b289      	uxth	r1, r1
    // if the current note is not a pause, play the note using the sound function
    if (currentNote<255) playSound(note[tempOctave-4][currentNote],calcDuration);
 8002600:	2aff      	cmp	r2, #255	; 0xff
 8002602:	d008      	beq.n	8002616 <playRTTTLSong+0x242>
 8002604:	3804      	subs	r0, #4
 8002606:	230c      	movs	r3, #12
 8002608:	fb03 2200 	mla	r2, r3, r0, r2
 800260c:	f839 0012 	ldrh.w	r0, [r9, r2, lsl #1]
 8002610:	f7ff fece 	bl	80023b0 <playSound>
 8002614:	e79e      	b.n	8002554 <playRTTTLSong+0x180>
    else { // if the current note = 255 (pause), just wait for the specified amount of time
    	HAL_Delay(calcDuration);
 8002616:	4608      	mov	r0, r1
 8002618:	f7fd ffe4 	bl	80005e4 <HAL_Delay>
 800261c:	e79a      	b.n	8002554 <playRTTTLSong+0x180>
    }
  }
}
 800261e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002622:	bf00      	nop
 8002624:	20000129 	.word	0x20000129
 8002628:	2000012a 	.word	0x2000012a
 800262c:	20000128 	.word	0x20000128
 8002630:	08004f45 	.word	0x08004f45
 8002634:	08004f4c 	.word	0x08004f4c

08002638 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002638:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <HAL_MspInit+0x88>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800263a:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	661a      	str	r2, [r3, #96]	; 0x60
 8002644:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002646:	f002 0201 	and.w	r2, r2, #1
 800264a:	9200      	str	r2, [sp, #0]
 800264c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002650:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002654:	659a      	str	r2, [r3, #88]	; 0x58
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265c:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800265e:	2003      	movs	r0, #3
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();
 8002660:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002662:	f7fd ffcd 	bl	8000600 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	4611      	mov	r1, r2
 800266a:	f06f 000b 	mvn.w	r0, #11
 800266e:	f7fd ffd9 	bl	8000624 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	4611      	mov	r1, r2
 8002676:	f06f 000a 	mvn.w	r0, #10
 800267a:	f7fd ffd3 	bl	8000624 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	4611      	mov	r1, r2
 8002682:	f06f 0009 	mvn.w	r0, #9
 8002686:	f7fd ffcd 	bl	8000624 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	4611      	mov	r1, r2
 800268e:	f06f 0004 	mvn.w	r0, #4
 8002692:	f7fd ffc7 	bl	8000624 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	4611      	mov	r1, r2
 800269a:	f06f 0003 	mvn.w	r0, #3
 800269e:	f7fd ffc1 	bl	8000624 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	4611      	mov	r1, r2
 80026a6:	f06f 0001 	mvn.w	r0, #1
 80026aa:	f7fd ffbb 	bl	8000624 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	4611      	mov	r1, r2
 80026b2:	f04f 30ff 	mov.w	r0, #4294967295
 80026b6:	f7fd ffb5 	bl	8000624 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ba:	b003      	add	sp, #12
 80026bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80026c0:	40021000 	.word	0x40021000

080026c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 80026c4:	6803      	ldr	r3, [r0, #0]
 80026c6:	4a0f      	ldr	r2, [pc, #60]	; (8002704 <HAL_TIM_PWM_MspInit+0x40>)
 80026c8:	4293      	cmp	r3, r2

  /* USER CODE END MspInit 1 */
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026ca:	b082      	sub	sp, #8

  if(htim_pwm->Instance==TIM1)
 80026cc:	d10a      	bne.n	80026e4 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <HAL_TIM_PWM_MspInit+0x44>)
 80026d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026d6:	661a      	str	r2, [r3, #96]	; 0x60
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	9b00      	ldr	r3, [sp, #0]
 80026e2:	e00d      	b.n	8002700 <HAL_TIM_PWM_MspInit+0x3c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM2)
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e8:	d10a      	bne.n	8002700 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ea:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80026ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026f0:	f042 0201 	orr.w	r2, r2, #1
 80026f4:	659a      	str	r2, [r3, #88]	; 0x58
 80026f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	9301      	str	r3, [sp, #4]
 80026fe:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002700:	b002      	add	sp, #8
 8002702:	4770      	bx	lr
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40021000 	.word	0x40021000

0800270c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800270c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 800270e:	6803      	ldr	r3, [r0, #0]
 8002710:	4a0c      	ldr	r2, [pc, #48]	; (8002744 <HAL_TIM_MspPostInit+0x38>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_TIM_MspPostInit+0xe>

  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA7     ------> TIM1_CH1N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	e003      	b.n	8002722 <HAL_TIM_MspPostInit+0x16>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 800271a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271e:	d10d      	bne.n	800273c <HAL_TIM_MspPostInit+0x30>
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5;
 8002720:	232a      	movs	r3, #42	; 0x2a
 8002722:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272e:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002730:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002736:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002738:	f7fd ffd0 	bl	80006dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800273c:	b007      	add	sp, #28
 800273e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002742:	bf00      	nop
 8002744:	40012c00 	.word	0x40012c00

08002748 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002748:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800274a:	6802      	ldr	r2, [r0, #0]
 800274c:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_UART_MspInit+0x5c>)
 800274e:	429a      	cmp	r2, r3
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002750:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002752:	d125      	bne.n	80027a0 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002754:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002758:	2403      	movs	r4, #3
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800275a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800275c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002760:	659a      	str	r2, [r3, #88]	; 0x58
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002764:	9404      	str	r4, [sp, #16]
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800276e:	2304      	movs	r3, #4
 8002770:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002772:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002774:	2307      	movs	r3, #7
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002776:	2501      	movs	r5, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002778:	a901      	add	r1, sp, #4
 800277a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800277e:	9305      	str	r3, [sp, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002782:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002784:	f7fd ffaa 	bl	80006dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800278c:	a901      	add	r1, sp, #4
 800278e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002792:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002796:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002798:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800279a:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800279c:	f7fd ff9e 	bl	80006dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027a0:	b006      	add	sp, #24
 80027a2:	bd70      	pop	{r4, r5, r6, pc}
 80027a4:	40004400 	.word	0x40004400

080027a8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80027a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027aa:	f7fd ff0d 	bl	80005c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80027b2:	f7fd bf8e 	b.w	80006d2 <HAL_SYSTICK_IRQHandler>
	...

080027b8 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80027b8:	b510      	push	{r4, lr}
	HAL_StatusTypeDef result = HAL_OK;
	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 80027ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80027be:	4614      	mov	r4, r2
	HAL_StatusTypeDef result = HAL_OK;
	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 80027c0:	4802      	ldr	r0, [pc, #8]	; (80027cc <_write+0x14>)
 80027c2:	b292      	uxth	r2, r2
 80027c4:	f7ff fb3d 	bl	8001e42 <HAL_UART_Transmit>
	if(result == HAL_ERROR|| result == HAL_BUSY)
	{
		//Error_Handler();
	}
	return len;
}
 80027c8:	4620      	mov	r0, r4
 80027ca:	bd10      	pop	{r4, pc}
 80027cc:	200001b4 	.word	0x200001b4

080027d0 <_sbrk>:
{
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <_sbrk+0x14>)
 80027d2:	6819      	ldr	r1, [r3, #0]
	}
	return len;
}

void * _sbrk(int32_t incr)
{
 80027d4:	4602      	mov	r2, r0
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 80027d6:	b909      	cbnz	r1, 80027dc <_sbrk+0xc>
		heap_end = & end;
 80027d8:	4903      	ldr	r1, [pc, #12]	; (80027e8 <_sbrk+0x18>)
 80027da:	6019      	str	r1, [r3, #0]
	}

	prev_heap_end = heap_end;
 80027dc:	6818      	ldr	r0, [r3, #0]
	heap_end += incr;
 80027de:	4402      	add	r2, r0
 80027e0:	601a      	str	r2, [r3, #0]

	return (void *) prev_heap_end;
}
 80027e2:	4770      	bx	lr
 80027e4:	2000012c 	.word	0x2000012c
 80027e8:	20000228 	.word	0x20000228

080027ec <_close>:

int _close(int32_t file)
{
	errno = ENOSYS;
 80027ec:	4b02      	ldr	r3, [pc, #8]	; (80027f8 <_close+0xc>)
 80027ee:	2258      	movs	r2, #88	; 0x58
 80027f0:	601a      	str	r2, [r3, #0]
	return -1;
}
 80027f2:	f04f 30ff 	mov.w	r0, #4294967295
 80027f6:	4770      	bx	lr
 80027f8:	20000224 	.word	0x20000224

080027fc <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
	errno = ENOSYS;
 80027fc:	4b02      	ldr	r3, [pc, #8]	; (8002808 <_fstat+0xc>)
 80027fe:	2258      	movs	r2, #88	; 0x58
 8002800:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002802:	f04f 30ff 	mov.w	r0, #4294967295
 8002806:	4770      	bx	lr
 8002808:	20000224 	.word	0x20000224

0800280c <_isatty>:

int _isatty(int32_t file)
{
	errno = ENOSYS;
 800280c:	4b02      	ldr	r3, [pc, #8]	; (8002818 <_isatty+0xc>)
 800280e:	2258      	movs	r2, #88	; 0x58
 8002810:	601a      	str	r2, [r3, #0]
	return 0;
}
 8002812:	2000      	movs	r0, #0
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000224 	.word	0x20000224

0800281c <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
	errno = ENOSYS;
 800281c:	4b02      	ldr	r3, [pc, #8]	; (8002828 <_lseek+0xc>)
 800281e:	2258      	movs	r2, #88	; 0x58
 8002820:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002822:	f04f 30ff 	mov.w	r0, #4294967295
 8002826:	4770      	bx	lr
 8002828:	20000224 	.word	0x20000224

0800282c <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 800282c:	b508      	push	{r3, lr}
	HAL_UART_Receive(&huart2,ptr,1,HAL_MAX_DELAY);
 800282e:	2201      	movs	r2, #1
 8002830:	f04f 33ff 	mov.w	r3, #4294967295
 8002834:	4802      	ldr	r0, [pc, #8]	; (8002840 <_read+0x14>)
 8002836:	f7ff fb5e 	bl	8001ef6 <HAL_UART_Receive>
	return 1;
}
 800283a:	2001      	movs	r0, #1
 800283c:	bd08      	pop	{r3, pc}
 800283e:	bf00      	nop
 8002840:	200001b4 	.word	0x200001b4

08002844 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002844:	490f      	ldr	r1, [pc, #60]	; (8002884 <SystemInit+0x40>)
 8002846:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800284a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002852:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <SystemInit+0x44>)
 8002854:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002856:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002858:	f042 0201 	orr.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800285e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002866:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800286a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800286c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002870:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002878:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800287a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800287c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002880:	608b      	str	r3, [r1, #8]
 8002882:	4770      	bx	lr
 8002884:	e000ed00 	.word	0xe000ed00
 8002888:	40021000 	.word	0x40021000

0800288c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800288c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002890:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002892:	e003      	b.n	800289c <LoopCopyDataInit>

08002894 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002896:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002898:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800289a:	3104      	adds	r1, #4

0800289c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800289c:	480b      	ldr	r0, [pc, #44]	; (80028cc <LoopForever+0xa>)
	ldr	r3, =_edata
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80028a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80028a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80028a4:	d3f6      	bcc.n	8002894 <CopyDataInit>
	ldr	r2, =_sbss
 80028a6:	4a0b      	ldr	r2, [pc, #44]	; (80028d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80028a8:	e002      	b.n	80028b0 <LoopFillZerobss>

080028aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80028aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80028ac:	f842 3b04 	str.w	r3, [r2], #4

080028b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80028b0:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <LoopForever+0x16>)
	cmp	r2, r3
 80028b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80028b4:	d3f9      	bcc.n	80028aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028b6:	f7ff ffc5 	bl	8002844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ba:	f000 f811 	bl	80028e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028be:	f7ff fc79 	bl	80021b4 <main>

080028c2 <LoopForever>:

LoopForever:
    b LoopForever
 80028c2:	e7fe      	b.n	80028c2 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028c4:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80028c8:	0800518c 	.word	0x0800518c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80028cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80028d0:	2000010c 	.word	0x2000010c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80028d4:	2000010c 	.word	0x2000010c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80028d8:	20000228 	.word	0x20000228

080028dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028dc:	e7fe      	b.n	80028dc <ADC1_IRQHandler>
	...

080028e0 <__libc_init_array>:
 80028e0:	b570      	push	{r4, r5, r6, lr}
 80028e2:	4b0e      	ldr	r3, [pc, #56]	; (800291c <__libc_init_array+0x3c>)
 80028e4:	4c0e      	ldr	r4, [pc, #56]	; (8002920 <__libc_init_array+0x40>)
 80028e6:	1ae4      	subs	r4, r4, r3
 80028e8:	10a4      	asrs	r4, r4, #2
 80028ea:	2500      	movs	r5, #0
 80028ec:	461e      	mov	r6, r3
 80028ee:	42a5      	cmp	r5, r4
 80028f0:	d004      	beq.n	80028fc <__libc_init_array+0x1c>
 80028f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028f6:	4798      	blx	r3
 80028f8:	3501      	adds	r5, #1
 80028fa:	e7f8      	b.n	80028ee <__libc_init_array+0xe>
 80028fc:	f001 fa50 	bl	8003da0 <_init>
 8002900:	4c08      	ldr	r4, [pc, #32]	; (8002924 <__libc_init_array+0x44>)
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <__libc_init_array+0x48>)
 8002904:	1ae4      	subs	r4, r4, r3
 8002906:	10a4      	asrs	r4, r4, #2
 8002908:	2500      	movs	r5, #0
 800290a:	461e      	mov	r6, r3
 800290c:	42a5      	cmp	r5, r4
 800290e:	d004      	beq.n	800291a <__libc_init_array+0x3a>
 8002910:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002914:	4798      	blx	r3
 8002916:	3501      	adds	r5, #1
 8002918:	e7f8      	b.n	800290c <__libc_init_array+0x2c>
 800291a:	bd70      	pop	{r4, r5, r6, pc}
 800291c:	08005184 	.word	0x08005184
 8002920:	08005184 	.word	0x08005184
 8002924:	08005188 	.word	0x08005188
 8002928:	08005184 	.word	0x08005184

0800292c <_puts_r>:
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	460e      	mov	r6, r1
 8002930:	4605      	mov	r5, r0
 8002932:	b118      	cbz	r0, 800293c <_puts_r+0x10>
 8002934:	6983      	ldr	r3, [r0, #24]
 8002936:	b90b      	cbnz	r3, 800293c <_puts_r+0x10>
 8002938:	f000 fa38 	bl	8002dac <__sinit>
 800293c:	69ab      	ldr	r3, [r5, #24]
 800293e:	68ac      	ldr	r4, [r5, #8]
 8002940:	b913      	cbnz	r3, 8002948 <_puts_r+0x1c>
 8002942:	4628      	mov	r0, r5
 8002944:	f000 fa32 	bl	8002dac <__sinit>
 8002948:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <_puts_r+0xa8>)
 800294a:	429c      	cmp	r4, r3
 800294c:	d101      	bne.n	8002952 <_puts_r+0x26>
 800294e:	686c      	ldr	r4, [r5, #4]
 8002950:	e008      	b.n	8002964 <_puts_r+0x38>
 8002952:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <_puts_r+0xac>)
 8002954:	429c      	cmp	r4, r3
 8002956:	d101      	bne.n	800295c <_puts_r+0x30>
 8002958:	68ac      	ldr	r4, [r5, #8]
 800295a:	e003      	b.n	8002964 <_puts_r+0x38>
 800295c:	4b1f      	ldr	r3, [pc, #124]	; (80029dc <_puts_r+0xb0>)
 800295e:	429c      	cmp	r4, r3
 8002960:	bf08      	it	eq
 8002962:	68ec      	ldreq	r4, [r5, #12]
 8002964:	89a3      	ldrh	r3, [r4, #12]
 8002966:	071b      	lsls	r3, r3, #28
 8002968:	d501      	bpl.n	800296e <_puts_r+0x42>
 800296a:	6923      	ldr	r3, [r4, #16]
 800296c:	b93b      	cbnz	r3, 800297e <_puts_r+0x52>
 800296e:	4621      	mov	r1, r4
 8002970:	4628      	mov	r0, r5
 8002972:	f000 f8a9 	bl	8002ac8 <__swsetup_r>
 8002976:	b110      	cbz	r0, 800297e <_puts_r+0x52>
 8002978:	f04f 30ff 	mov.w	r0, #4294967295
 800297c:	bd70      	pop	{r4, r5, r6, pc}
 800297e:	3e01      	subs	r6, #1
 8002980:	68a3      	ldr	r3, [r4, #8]
 8002982:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002986:	3b01      	subs	r3, #1
 8002988:	60a3      	str	r3, [r4, #8]
 800298a:	b191      	cbz	r1, 80029b2 <_puts_r+0x86>
 800298c:	2b00      	cmp	r3, #0
 800298e:	da04      	bge.n	800299a <_puts_r+0x6e>
 8002990:	69a2      	ldr	r2, [r4, #24]
 8002992:	4293      	cmp	r3, r2
 8002994:	db06      	blt.n	80029a4 <_puts_r+0x78>
 8002996:	290a      	cmp	r1, #10
 8002998:	d004      	beq.n	80029a4 <_puts_r+0x78>
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	6022      	str	r2, [r4, #0]
 80029a0:	7019      	strb	r1, [r3, #0]
 80029a2:	e7ed      	b.n	8002980 <_puts_r+0x54>
 80029a4:	4622      	mov	r2, r4
 80029a6:	4628      	mov	r0, r5
 80029a8:	f000 f83a 	bl	8002a20 <__swbuf_r>
 80029ac:	3001      	adds	r0, #1
 80029ae:	d1e7      	bne.n	8002980 <_puts_r+0x54>
 80029b0:	e7e2      	b.n	8002978 <_puts_r+0x4c>
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	da08      	bge.n	80029c8 <_puts_r+0x9c>
 80029b6:	4622      	mov	r2, r4
 80029b8:	210a      	movs	r1, #10
 80029ba:	4628      	mov	r0, r5
 80029bc:	f000 f830 	bl	8002a20 <__swbuf_r>
 80029c0:	3001      	adds	r0, #1
 80029c2:	d0d9      	beq.n	8002978 <_puts_r+0x4c>
 80029c4:	200a      	movs	r0, #10
 80029c6:	bd70      	pop	{r4, r5, r6, pc}
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	200a      	movs	r0, #10
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	6022      	str	r2, [r4, #0]
 80029d0:	7018      	strb	r0, [r3, #0]
 80029d2:	bd70      	pop	{r4, r5, r6, pc}
 80029d4:	08004ff4 	.word	0x08004ff4
 80029d8:	08005014 	.word	0x08005014
 80029dc:	08005034 	.word	0x08005034

080029e0 <puts>:
 80029e0:	4b02      	ldr	r3, [pc, #8]	; (80029ec <puts+0xc>)
 80029e2:	4601      	mov	r1, r0
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	f7ff bfa1 	b.w	800292c <_puts_r>
 80029ea:	bf00      	nop
 80029ec:	20000104 	.word	0x20000104

080029f0 <iscanf>:
 80029f0:	b40f      	push	{r0, r1, r2, r3}
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <iscanf+0x2c>)
 80029f4:	b513      	push	{r0, r1, r4, lr}
 80029f6:	681c      	ldr	r4, [r3, #0]
 80029f8:	b124      	cbz	r4, 8002a04 <iscanf+0x14>
 80029fa:	69a3      	ldr	r3, [r4, #24]
 80029fc:	b913      	cbnz	r3, 8002a04 <iscanf+0x14>
 80029fe:	4620      	mov	r0, r4
 8002a00:	f000 f9d4 	bl	8002dac <__sinit>
 8002a04:	ab05      	add	r3, sp, #20
 8002a06:	9a04      	ldr	r2, [sp, #16]
 8002a08:	6861      	ldr	r1, [r4, #4]
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f000 fcdb 	bl	80033c8 <_vfiscanf_r>
 8002a12:	b002      	add	sp, #8
 8002a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a18:	b004      	add	sp, #16
 8002a1a:	4770      	bx	lr
 8002a1c:	20000104 	.word	0x20000104

08002a20 <__swbuf_r>:
 8002a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a22:	460f      	mov	r7, r1
 8002a24:	4614      	mov	r4, r2
 8002a26:	4606      	mov	r6, r0
 8002a28:	b118      	cbz	r0, 8002a32 <__swbuf_r+0x12>
 8002a2a:	6983      	ldr	r3, [r0, #24]
 8002a2c:	b90b      	cbnz	r3, 8002a32 <__swbuf_r+0x12>
 8002a2e:	f000 f9bd 	bl	8002dac <__sinit>
 8002a32:	4b22      	ldr	r3, [pc, #136]	; (8002abc <__swbuf_r+0x9c>)
 8002a34:	429c      	cmp	r4, r3
 8002a36:	d101      	bne.n	8002a3c <__swbuf_r+0x1c>
 8002a38:	6874      	ldr	r4, [r6, #4]
 8002a3a:	e008      	b.n	8002a4e <__swbuf_r+0x2e>
 8002a3c:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <__swbuf_r+0xa0>)
 8002a3e:	429c      	cmp	r4, r3
 8002a40:	d101      	bne.n	8002a46 <__swbuf_r+0x26>
 8002a42:	68b4      	ldr	r4, [r6, #8]
 8002a44:	e003      	b.n	8002a4e <__swbuf_r+0x2e>
 8002a46:	4b1f      	ldr	r3, [pc, #124]	; (8002ac4 <__swbuf_r+0xa4>)
 8002a48:	429c      	cmp	r4, r3
 8002a4a:	bf08      	it	eq
 8002a4c:	68f4      	ldreq	r4, [r6, #12]
 8002a4e:	69a3      	ldr	r3, [r4, #24]
 8002a50:	60a3      	str	r3, [r4, #8]
 8002a52:	89a3      	ldrh	r3, [r4, #12]
 8002a54:	071a      	lsls	r2, r3, #28
 8002a56:	d509      	bpl.n	8002a6c <__swbuf_r+0x4c>
 8002a58:	6923      	ldr	r3, [r4, #16]
 8002a5a:	b13b      	cbz	r3, 8002a6c <__swbuf_r+0x4c>
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	6920      	ldr	r0, [r4, #16]
 8002a60:	1a18      	subs	r0, r3, r0
 8002a62:	6963      	ldr	r3, [r4, #20]
 8002a64:	4298      	cmp	r0, r3
 8002a66:	b2fd      	uxtb	r5, r7
 8002a68:	db0f      	blt.n	8002a8a <__swbuf_r+0x6a>
 8002a6a:	e008      	b.n	8002a7e <__swbuf_r+0x5e>
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	4630      	mov	r0, r6
 8002a70:	f000 f82a 	bl	8002ac8 <__swsetup_r>
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d0f1      	beq.n	8002a5c <__swbuf_r+0x3c>
 8002a78:	f04f 30ff 	mov.w	r0, #4294967295
 8002a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a7e:	4621      	mov	r1, r4
 8002a80:	4630      	mov	r0, r6
 8002a82:	f000 f917 	bl	8002cb4 <_fflush_r>
 8002a86:	2800      	cmp	r0, #0
 8002a88:	d1f6      	bne.n	8002a78 <__swbuf_r+0x58>
 8002a8a:	68a3      	ldr	r3, [r4, #8]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	60a3      	str	r3, [r4, #8]
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	6022      	str	r2, [r4, #0]
 8002a96:	701f      	strb	r7, [r3, #0]
 8002a98:	6962      	ldr	r2, [r4, #20]
 8002a9a:	1c43      	adds	r3, r0, #1
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <__swbuf_r+0x8a>
 8002aa0:	89a3      	ldrh	r3, [r4, #12]
 8002aa2:	07db      	lsls	r3, r3, #31
 8002aa4:	d507      	bpl.n	8002ab6 <__swbuf_r+0x96>
 8002aa6:	2d0a      	cmp	r5, #10
 8002aa8:	d105      	bne.n	8002ab6 <__swbuf_r+0x96>
 8002aaa:	4621      	mov	r1, r4
 8002aac:	4630      	mov	r0, r6
 8002aae:	f000 f901 	bl	8002cb4 <_fflush_r>
 8002ab2:	2800      	cmp	r0, #0
 8002ab4:	d1e0      	bne.n	8002a78 <__swbuf_r+0x58>
 8002ab6:	4628      	mov	r0, r5
 8002ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002aba:	bf00      	nop
 8002abc:	08004ff4 	.word	0x08004ff4
 8002ac0:	08005014 	.word	0x08005014
 8002ac4:	08005034 	.word	0x08005034

08002ac8 <__swsetup_r>:
 8002ac8:	4b32      	ldr	r3, [pc, #200]	; (8002b94 <__swsetup_r+0xcc>)
 8002aca:	b570      	push	{r4, r5, r6, lr}
 8002acc:	681d      	ldr	r5, [r3, #0]
 8002ace:	4606      	mov	r6, r0
 8002ad0:	460c      	mov	r4, r1
 8002ad2:	b125      	cbz	r5, 8002ade <__swsetup_r+0x16>
 8002ad4:	69ab      	ldr	r3, [r5, #24]
 8002ad6:	b913      	cbnz	r3, 8002ade <__swsetup_r+0x16>
 8002ad8:	4628      	mov	r0, r5
 8002ada:	f000 f967 	bl	8002dac <__sinit>
 8002ade:	4b2e      	ldr	r3, [pc, #184]	; (8002b98 <__swsetup_r+0xd0>)
 8002ae0:	429c      	cmp	r4, r3
 8002ae2:	d101      	bne.n	8002ae8 <__swsetup_r+0x20>
 8002ae4:	686c      	ldr	r4, [r5, #4]
 8002ae6:	e008      	b.n	8002afa <__swsetup_r+0x32>
 8002ae8:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <__swsetup_r+0xd4>)
 8002aea:	429c      	cmp	r4, r3
 8002aec:	d101      	bne.n	8002af2 <__swsetup_r+0x2a>
 8002aee:	68ac      	ldr	r4, [r5, #8]
 8002af0:	e003      	b.n	8002afa <__swsetup_r+0x32>
 8002af2:	4b2b      	ldr	r3, [pc, #172]	; (8002ba0 <__swsetup_r+0xd8>)
 8002af4:	429c      	cmp	r4, r3
 8002af6:	bf08      	it	eq
 8002af8:	68ec      	ldreq	r4, [r5, #12]
 8002afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	0715      	lsls	r5, r2, #28
 8002b02:	d41d      	bmi.n	8002b40 <__swsetup_r+0x78>
 8002b04:	06d0      	lsls	r0, r2, #27
 8002b06:	d402      	bmi.n	8002b0e <__swsetup_r+0x46>
 8002b08:	2209      	movs	r2, #9
 8002b0a:	6032      	str	r2, [r6, #0]
 8002b0c:	e03a      	b.n	8002b84 <__swsetup_r+0xbc>
 8002b0e:	0751      	lsls	r1, r2, #29
 8002b10:	d512      	bpl.n	8002b38 <__swsetup_r+0x70>
 8002b12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b14:	b141      	cbz	r1, 8002b28 <__swsetup_r+0x60>
 8002b16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b1a:	4299      	cmp	r1, r3
 8002b1c:	d002      	beq.n	8002b24 <__swsetup_r+0x5c>
 8002b1e:	4630      	mov	r0, r6
 8002b20:	f000 fa52 	bl	8002fc8 <_free_r>
 8002b24:	2300      	movs	r3, #0
 8002b26:	6363      	str	r3, [r4, #52]	; 0x34
 8002b28:	89a3      	ldrh	r3, [r4, #12]
 8002b2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b2e:	81a3      	strh	r3, [r4, #12]
 8002b30:	2300      	movs	r3, #0
 8002b32:	6063      	str	r3, [r4, #4]
 8002b34:	6923      	ldr	r3, [r4, #16]
 8002b36:	6023      	str	r3, [r4, #0]
 8002b38:	89a3      	ldrh	r3, [r4, #12]
 8002b3a:	f043 0308 	orr.w	r3, r3, #8
 8002b3e:	81a3      	strh	r3, [r4, #12]
 8002b40:	6923      	ldr	r3, [r4, #16]
 8002b42:	b94b      	cbnz	r3, 8002b58 <__swsetup_r+0x90>
 8002b44:	89a3      	ldrh	r3, [r4, #12]
 8002b46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b4e:	d003      	beq.n	8002b58 <__swsetup_r+0x90>
 8002b50:	4621      	mov	r1, r4
 8002b52:	4630      	mov	r0, r6
 8002b54:	f000 f9f4 	bl	8002f40 <__smakebuf_r>
 8002b58:	89a2      	ldrh	r2, [r4, #12]
 8002b5a:	f012 0301 	ands.w	r3, r2, #1
 8002b5e:	d005      	beq.n	8002b6c <__swsetup_r+0xa4>
 8002b60:	2300      	movs	r3, #0
 8002b62:	60a3      	str	r3, [r4, #8]
 8002b64:	6963      	ldr	r3, [r4, #20]
 8002b66:	425b      	negs	r3, r3
 8002b68:	61a3      	str	r3, [r4, #24]
 8002b6a:	e003      	b.n	8002b74 <__swsetup_r+0xac>
 8002b6c:	0792      	lsls	r2, r2, #30
 8002b6e:	bf58      	it	pl
 8002b70:	6963      	ldrpl	r3, [r4, #20]
 8002b72:	60a3      	str	r3, [r4, #8]
 8002b74:	6923      	ldr	r3, [r4, #16]
 8002b76:	b95b      	cbnz	r3, 8002b90 <__swsetup_r+0xc8>
 8002b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b7c:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8002b80:	b280      	uxth	r0, r0
 8002b82:	b130      	cbz	r0, 8002b92 <__swsetup_r+0xca>
 8002b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b88:	81a3      	strh	r3, [r4, #12]
 8002b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}
 8002b90:	2000      	movs	r0, #0
 8002b92:	bd70      	pop	{r4, r5, r6, pc}
 8002b94:	20000104 	.word	0x20000104
 8002b98:	08004ff4 	.word	0x08004ff4
 8002b9c:	08005014 	.word	0x08005014
 8002ba0:	08005034 	.word	0x08005034

08002ba4 <__sflush_r>:
 8002ba4:	898a      	ldrh	r2, [r1, #12]
 8002ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002baa:	4605      	mov	r5, r0
 8002bac:	0710      	lsls	r0, r2, #28
 8002bae:	460c      	mov	r4, r1
 8002bb0:	d459      	bmi.n	8002c66 <__sflush_r+0xc2>
 8002bb2:	684b      	ldr	r3, [r1, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	dc02      	bgt.n	8002bbe <__sflush_r+0x1a>
 8002bb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	dd17      	ble.n	8002bee <__sflush_r+0x4a>
 8002bbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bc0:	b1ae      	cbz	r6, 8002bee <__sflush_r+0x4a>
 8002bc2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	b292      	uxth	r2, r2
 8002bca:	682f      	ldr	r7, [r5, #0]
 8002bcc:	602b      	str	r3, [r5, #0]
 8002bce:	b10a      	cbz	r2, 8002bd4 <__sflush_r+0x30>
 8002bd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002bd2:	e015      	b.n	8002c00 <__sflush_r+0x5c>
 8002bd4:	6a21      	ldr	r1, [r4, #32]
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	4628      	mov	r0, r5
 8002bda:	47b0      	blx	r6
 8002bdc:	1c41      	adds	r1, r0, #1
 8002bde:	d10f      	bne.n	8002c00 <__sflush_r+0x5c>
 8002be0:	682b      	ldr	r3, [r5, #0]
 8002be2:	b16b      	cbz	r3, 8002c00 <__sflush_r+0x5c>
 8002be4:	2b1d      	cmp	r3, #29
 8002be6:	d001      	beq.n	8002bec <__sflush_r+0x48>
 8002be8:	2b16      	cmp	r3, #22
 8002bea:	d103      	bne.n	8002bf4 <__sflush_r+0x50>
 8002bec:	602f      	str	r7, [r5, #0]
 8002bee:	2000      	movs	r0, #0
 8002bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bf4:	89a3      	ldrh	r3, [r4, #12]
 8002bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bfa:	81a3      	strh	r3, [r4, #12]
 8002bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c00:	89a3      	ldrh	r3, [r4, #12]
 8002c02:	075a      	lsls	r2, r3, #29
 8002c04:	d505      	bpl.n	8002c12 <__sflush_r+0x6e>
 8002c06:	6863      	ldr	r3, [r4, #4]
 8002c08:	1ac0      	subs	r0, r0, r3
 8002c0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c0c:	b10b      	cbz	r3, 8002c12 <__sflush_r+0x6e>
 8002c0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c10:	1ac0      	subs	r0, r0, r3
 8002c12:	2300      	movs	r3, #0
 8002c14:	4602      	mov	r2, r0
 8002c16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c18:	6a21      	ldr	r1, [r4, #32]
 8002c1a:	4628      	mov	r0, r5
 8002c1c:	47b0      	blx	r6
 8002c1e:	1c43      	adds	r3, r0, #1
 8002c20:	89a3      	ldrh	r3, [r4, #12]
 8002c22:	d106      	bne.n	8002c32 <__sflush_r+0x8e>
 8002c24:	6829      	ldr	r1, [r5, #0]
 8002c26:	291d      	cmp	r1, #29
 8002c28:	d83a      	bhi.n	8002ca0 <__sflush_r+0xfc>
 8002c2a:	4a21      	ldr	r2, [pc, #132]	; (8002cb0 <__sflush_r+0x10c>)
 8002c2c:	40ca      	lsrs	r2, r1
 8002c2e:	07d6      	lsls	r6, r2, #31
 8002c30:	d536      	bpl.n	8002ca0 <__sflush_r+0xfc>
 8002c32:	2200      	movs	r2, #0
 8002c34:	6062      	str	r2, [r4, #4]
 8002c36:	04d9      	lsls	r1, r3, #19
 8002c38:	6922      	ldr	r2, [r4, #16]
 8002c3a:	6022      	str	r2, [r4, #0]
 8002c3c:	d504      	bpl.n	8002c48 <__sflush_r+0xa4>
 8002c3e:	1c42      	adds	r2, r0, #1
 8002c40:	d101      	bne.n	8002c46 <__sflush_r+0xa2>
 8002c42:	682b      	ldr	r3, [r5, #0]
 8002c44:	b903      	cbnz	r3, 8002c48 <__sflush_r+0xa4>
 8002c46:	6560      	str	r0, [r4, #84]	; 0x54
 8002c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c4a:	602f      	str	r7, [r5, #0]
 8002c4c:	2900      	cmp	r1, #0
 8002c4e:	d0ce      	beq.n	8002bee <__sflush_r+0x4a>
 8002c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c54:	4299      	cmp	r1, r3
 8002c56:	d002      	beq.n	8002c5e <__sflush_r+0xba>
 8002c58:	4628      	mov	r0, r5
 8002c5a:	f000 f9b5 	bl	8002fc8 <_free_r>
 8002c5e:	2000      	movs	r0, #0
 8002c60:	6360      	str	r0, [r4, #52]	; 0x34
 8002c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c66:	690f      	ldr	r7, [r1, #16]
 8002c68:	2f00      	cmp	r7, #0
 8002c6a:	d0c0      	beq.n	8002bee <__sflush_r+0x4a>
 8002c6c:	0793      	lsls	r3, r2, #30
 8002c6e:	680e      	ldr	r6, [r1, #0]
 8002c70:	bf08      	it	eq
 8002c72:	694b      	ldreq	r3, [r1, #20]
 8002c74:	600f      	str	r7, [r1, #0]
 8002c76:	bf18      	it	ne
 8002c78:	2300      	movne	r3, #0
 8002c7a:	ebc7 0806 	rsb	r8, r7, r6
 8002c7e:	608b      	str	r3, [r1, #8]
 8002c80:	e002      	b.n	8002c88 <__sflush_r+0xe4>
 8002c82:	4407      	add	r7, r0
 8002c84:	ebc0 0808 	rsb	r8, r0, r8
 8002c88:	f1b8 0f00 	cmp.w	r8, #0
 8002c8c:	ddaf      	ble.n	8002bee <__sflush_r+0x4a>
 8002c8e:	4643      	mov	r3, r8
 8002c90:	463a      	mov	r2, r7
 8002c92:	6a21      	ldr	r1, [r4, #32]
 8002c94:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c96:	4628      	mov	r0, r5
 8002c98:	47b0      	blx	r6
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	dcf1      	bgt.n	8002c82 <__sflush_r+0xde>
 8002c9e:	89a3      	ldrh	r3, [r4, #12]
 8002ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ca4:	81a3      	strh	r3, [r4, #12]
 8002ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8002caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cae:	bf00      	nop
 8002cb0:	20400001 	.word	0x20400001

08002cb4 <_fflush_r>:
 8002cb4:	b538      	push	{r3, r4, r5, lr}
 8002cb6:	690b      	ldr	r3, [r1, #16]
 8002cb8:	4605      	mov	r5, r0
 8002cba:	460c      	mov	r4, r1
 8002cbc:	b1db      	cbz	r3, 8002cf6 <_fflush_r+0x42>
 8002cbe:	b118      	cbz	r0, 8002cc8 <_fflush_r+0x14>
 8002cc0:	6983      	ldr	r3, [r0, #24]
 8002cc2:	b90b      	cbnz	r3, 8002cc8 <_fflush_r+0x14>
 8002cc4:	f000 f872 	bl	8002dac <__sinit>
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <_fflush_r+0x48>)
 8002cca:	429c      	cmp	r4, r3
 8002ccc:	d101      	bne.n	8002cd2 <_fflush_r+0x1e>
 8002cce:	686c      	ldr	r4, [r5, #4]
 8002cd0:	e008      	b.n	8002ce4 <_fflush_r+0x30>
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <_fflush_r+0x4c>)
 8002cd4:	429c      	cmp	r4, r3
 8002cd6:	d101      	bne.n	8002cdc <_fflush_r+0x28>
 8002cd8:	68ac      	ldr	r4, [r5, #8]
 8002cda:	e003      	b.n	8002ce4 <_fflush_r+0x30>
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <_fflush_r+0x50>)
 8002cde:	429c      	cmp	r4, r3
 8002ce0:	bf08      	it	eq
 8002ce2:	68ec      	ldreq	r4, [r5, #12]
 8002ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ce8:	b12b      	cbz	r3, 8002cf6 <_fflush_r+0x42>
 8002cea:	4621      	mov	r1, r4
 8002cec:	4628      	mov	r0, r5
 8002cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cf2:	f7ff bf57 	b.w	8002ba4 <__sflush_r>
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	bd38      	pop	{r3, r4, r5, pc}
 8002cfa:	bf00      	nop
 8002cfc:	08004ff4 	.word	0x08004ff4
 8002d00:	08005014 	.word	0x08005014
 8002d04:	08005034 	.word	0x08005034

08002d08 <fflush>:
 8002d08:	4601      	mov	r1, r0
 8002d0a:	b920      	cbnz	r0, 8002d16 <fflush+0xe>
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <fflush+0x18>)
 8002d0e:	4905      	ldr	r1, [pc, #20]	; (8002d24 <fflush+0x1c>)
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	f000 b8d3 	b.w	8002ebc <_fwalk_reent>
 8002d16:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <fflush+0x20>)
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	f7ff bfcb 	b.w	8002cb4 <_fflush_r>
 8002d1e:	bf00      	nop
 8002d20:	08005058 	.word	0x08005058
 8002d24:	08002cb5 	.word	0x08002cb5
 8002d28:	20000104 	.word	0x20000104

08002d2c <_cleanup_r>:
 8002d2c:	4901      	ldr	r1, [pc, #4]	; (8002d34 <_cleanup_r+0x8>)
 8002d2e:	f000 b8c5 	b.w	8002ebc <_fwalk_reent>
 8002d32:	bf00      	nop
 8002d34:	08002cb5 	.word	0x08002cb5

08002d38 <std.isra.0>:
 8002d38:	2300      	movs	r3, #0
 8002d3a:	b510      	push	{r4, lr}
 8002d3c:	4604      	mov	r4, r0
 8002d3e:	6003      	str	r3, [r0, #0]
 8002d40:	6043      	str	r3, [r0, #4]
 8002d42:	6083      	str	r3, [r0, #8]
 8002d44:	8181      	strh	r1, [r0, #12]
 8002d46:	6643      	str	r3, [r0, #100]	; 0x64
 8002d48:	81c2      	strh	r2, [r0, #14]
 8002d4a:	6103      	str	r3, [r0, #16]
 8002d4c:	6143      	str	r3, [r0, #20]
 8002d4e:	6183      	str	r3, [r0, #24]
 8002d50:	4619      	mov	r1, r3
 8002d52:	2208      	movs	r2, #8
 8002d54:	305c      	adds	r0, #92	; 0x5c
 8002d56:	f000 f92f 	bl	8002fb8 <memset>
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <std.isra.0+0x38>)
 8002d5c:	6263      	str	r3, [r4, #36]	; 0x24
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <std.isra.0+0x3c>)
 8002d60:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <std.isra.0+0x40>)
 8002d64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <std.isra.0+0x44>)
 8002d68:	6224      	str	r4, [r4, #32]
 8002d6a:	6323      	str	r3, [r4, #48]	; 0x30
 8002d6c:	bd10      	pop	{r4, pc}
 8002d6e:	bf00      	nop
 8002d70:	0800386b 	.word	0x0800386b
 8002d74:	0800388d 	.word	0x0800388d
 8002d78:	080038c5 	.word	0x080038c5
 8002d7c:	080038e9 	.word	0x080038e9

08002d80 <__sfmoreglue>:
 8002d80:	b570      	push	{r4, r5, r6, lr}
 8002d82:	2368      	movs	r3, #104	; 0x68
 8002d84:	1e4d      	subs	r5, r1, #1
 8002d86:	435d      	muls	r5, r3
 8002d88:	460e      	mov	r6, r1
 8002d8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002d8e:	f000 f969 	bl	8003064 <_malloc_r>
 8002d92:	4604      	mov	r4, r0
 8002d94:	b140      	cbz	r0, 8002da8 <__sfmoreglue+0x28>
 8002d96:	2100      	movs	r1, #0
 8002d98:	e880 0042 	stmia.w	r0, {r1, r6}
 8002d9c:	300c      	adds	r0, #12
 8002d9e:	60a0      	str	r0, [r4, #8]
 8002da0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002da4:	f000 f908 	bl	8002fb8 <memset>
 8002da8:	4620      	mov	r0, r4
 8002daa:	bd70      	pop	{r4, r5, r6, pc}

08002dac <__sinit>:
 8002dac:	6983      	ldr	r3, [r0, #24]
 8002dae:	b510      	push	{r4, lr}
 8002db0:	4604      	mov	r4, r0
 8002db2:	bb33      	cbnz	r3, 8002e02 <__sinit+0x56>
 8002db4:	6483      	str	r3, [r0, #72]	; 0x48
 8002db6:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002db8:	6503      	str	r3, [r0, #80]	; 0x50
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <__sinit+0x58>)
 8002dbc:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <__sinit+0x5c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6282      	str	r2, [r0, #40]	; 0x28
 8002dc2:	4298      	cmp	r0, r3
 8002dc4:	bf04      	itt	eq
 8002dc6:	2301      	moveq	r3, #1
 8002dc8:	6183      	streq	r3, [r0, #24]
 8002dca:	f000 f81f 	bl	8002e0c <__sfp>
 8002dce:	6060      	str	r0, [r4, #4]
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f000 f81b 	bl	8002e0c <__sfp>
 8002dd6:	60a0      	str	r0, [r4, #8]
 8002dd8:	4620      	mov	r0, r4
 8002dda:	f000 f817 	bl	8002e0c <__sfp>
 8002dde:	2200      	movs	r2, #0
 8002de0:	60e0      	str	r0, [r4, #12]
 8002de2:	2104      	movs	r1, #4
 8002de4:	6860      	ldr	r0, [r4, #4]
 8002de6:	f7ff ffa7 	bl	8002d38 <std.isra.0>
 8002dea:	2201      	movs	r2, #1
 8002dec:	2109      	movs	r1, #9
 8002dee:	68a0      	ldr	r0, [r4, #8]
 8002df0:	f7ff ffa2 	bl	8002d38 <std.isra.0>
 8002df4:	2202      	movs	r2, #2
 8002df6:	2112      	movs	r1, #18
 8002df8:	68e0      	ldr	r0, [r4, #12]
 8002dfa:	f7ff ff9d 	bl	8002d38 <std.isra.0>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	61a3      	str	r3, [r4, #24]
 8002e02:	bd10      	pop	{r4, pc}
 8002e04:	08005058 	.word	0x08005058
 8002e08:	08002d2d 	.word	0x08002d2d

08002e0c <__sfp>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <__sfp+0x74>)
 8002e10:	681e      	ldr	r6, [r3, #0]
 8002e12:	69b3      	ldr	r3, [r6, #24]
 8002e14:	4607      	mov	r7, r0
 8002e16:	b913      	cbnz	r3, 8002e1e <__sfp+0x12>
 8002e18:	4630      	mov	r0, r6
 8002e1a:	f7ff ffc7 	bl	8002dac <__sinit>
 8002e1e:	3648      	adds	r6, #72	; 0x48
 8002e20:	68b4      	ldr	r4, [r6, #8]
 8002e22:	6873      	ldr	r3, [r6, #4]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	d404      	bmi.n	8002e32 <__sfp+0x26>
 8002e28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002e2c:	b17d      	cbz	r5, 8002e4e <__sfp+0x42>
 8002e2e:	3468      	adds	r4, #104	; 0x68
 8002e30:	e7f8      	b.n	8002e24 <__sfp+0x18>
 8002e32:	6833      	ldr	r3, [r6, #0]
 8002e34:	b10b      	cbz	r3, 8002e3a <__sfp+0x2e>
 8002e36:	6836      	ldr	r6, [r6, #0]
 8002e38:	e7f2      	b.n	8002e20 <__sfp+0x14>
 8002e3a:	2104      	movs	r1, #4
 8002e3c:	4638      	mov	r0, r7
 8002e3e:	f7ff ff9f 	bl	8002d80 <__sfmoreglue>
 8002e42:	6030      	str	r0, [r6, #0]
 8002e44:	2800      	cmp	r0, #0
 8002e46:	d1f6      	bne.n	8002e36 <__sfp+0x2a>
 8002e48:	230c      	movs	r3, #12
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e52:	81e3      	strh	r3, [r4, #14]
 8002e54:	2301      	movs	r3, #1
 8002e56:	81a3      	strh	r3, [r4, #12]
 8002e58:	6665      	str	r5, [r4, #100]	; 0x64
 8002e5a:	6025      	str	r5, [r4, #0]
 8002e5c:	60a5      	str	r5, [r4, #8]
 8002e5e:	6065      	str	r5, [r4, #4]
 8002e60:	6125      	str	r5, [r4, #16]
 8002e62:	6165      	str	r5, [r4, #20]
 8002e64:	61a5      	str	r5, [r4, #24]
 8002e66:	2208      	movs	r2, #8
 8002e68:	4629      	mov	r1, r5
 8002e6a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002e6e:	f000 f8a3 	bl	8002fb8 <memset>
 8002e72:	6365      	str	r5, [r4, #52]	; 0x34
 8002e74:	63a5      	str	r5, [r4, #56]	; 0x38
 8002e76:	64a5      	str	r5, [r4, #72]	; 0x48
 8002e78:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	08005058 	.word	0x08005058

08002e84 <_fwalk>:
 8002e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e88:	4688      	mov	r8, r1
 8002e8a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002e8e:	2600      	movs	r6, #0
 8002e90:	b18c      	cbz	r4, 8002eb6 <_fwalk+0x32>
 8002e92:	68a5      	ldr	r5, [r4, #8]
 8002e94:	6867      	ldr	r7, [r4, #4]
 8002e96:	3f01      	subs	r7, #1
 8002e98:	d40b      	bmi.n	8002eb2 <_fwalk+0x2e>
 8002e9a:	89ab      	ldrh	r3, [r5, #12]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d906      	bls.n	8002eae <_fwalk+0x2a>
 8002ea0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	d002      	beq.n	8002eae <_fwalk+0x2a>
 8002ea8:	4628      	mov	r0, r5
 8002eaa:	47c0      	blx	r8
 8002eac:	4306      	orrs	r6, r0
 8002eae:	3568      	adds	r5, #104	; 0x68
 8002eb0:	e7f1      	b.n	8002e96 <_fwalk+0x12>
 8002eb2:	6824      	ldr	r4, [r4, #0]
 8002eb4:	e7ec      	b.n	8002e90 <_fwalk+0xc>
 8002eb6:	4630      	mov	r0, r6
 8002eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002ebc <_fwalk_reent>:
 8002ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ec0:	4680      	mov	r8, r0
 8002ec2:	4689      	mov	r9, r1
 8002ec4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002ec8:	2600      	movs	r6, #0
 8002eca:	b194      	cbz	r4, 8002ef2 <_fwalk_reent+0x36>
 8002ecc:	68a5      	ldr	r5, [r4, #8]
 8002ece:	6867      	ldr	r7, [r4, #4]
 8002ed0:	3f01      	subs	r7, #1
 8002ed2:	d40c      	bmi.n	8002eee <_fwalk_reent+0x32>
 8002ed4:	89ab      	ldrh	r3, [r5, #12]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d907      	bls.n	8002eea <_fwalk_reent+0x2e>
 8002eda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	d003      	beq.n	8002eea <_fwalk_reent+0x2e>
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	4640      	mov	r0, r8
 8002ee6:	47c8      	blx	r9
 8002ee8:	4306      	orrs	r6, r0
 8002eea:	3568      	adds	r5, #104	; 0x68
 8002eec:	e7f0      	b.n	8002ed0 <_fwalk_reent+0x14>
 8002eee:	6824      	ldr	r4, [r4, #0]
 8002ef0:	e7eb      	b.n	8002eca <_fwalk_reent+0xe>
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002ef8 <__swhatbuf_r>:
 8002ef8:	b570      	push	{r4, r5, r6, lr}
 8002efa:	460e      	mov	r6, r1
 8002efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f00:	2900      	cmp	r1, #0
 8002f02:	b090      	sub	sp, #64	; 0x40
 8002f04:	4614      	mov	r4, r2
 8002f06:	461d      	mov	r5, r3
 8002f08:	da06      	bge.n	8002f18 <__swhatbuf_r+0x20>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	602b      	str	r3, [r5, #0]
 8002f0e:	89b3      	ldrh	r3, [r6, #12]
 8002f10:	061a      	lsls	r2, r3, #24
 8002f12:	d50e      	bpl.n	8002f32 <__swhatbuf_r+0x3a>
 8002f14:	2340      	movs	r3, #64	; 0x40
 8002f16:	e00e      	b.n	8002f36 <__swhatbuf_r+0x3e>
 8002f18:	aa01      	add	r2, sp, #4
 8002f1a:	f000 febd 	bl	8003c98 <_fstat_r>
 8002f1e:	2800      	cmp	r0, #0
 8002f20:	dbf3      	blt.n	8002f0a <__swhatbuf_r+0x12>
 8002f22:	9a02      	ldr	r2, [sp, #8]
 8002f24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002f28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002f2c:	425a      	negs	r2, r3
 8002f2e:	415a      	adcs	r2, r3
 8002f30:	602a      	str	r2, [r5, #0]
 8002f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f36:	2000      	movs	r0, #0
 8002f38:	6023      	str	r3, [r4, #0]
 8002f3a:	b010      	add	sp, #64	; 0x40
 8002f3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f40 <__smakebuf_r>:
 8002f40:	898b      	ldrh	r3, [r1, #12]
 8002f42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f44:	079e      	lsls	r6, r3, #30
 8002f46:	4605      	mov	r5, r0
 8002f48:	460c      	mov	r4, r1
 8002f4a:	d410      	bmi.n	8002f6e <__smakebuf_r+0x2e>
 8002f4c:	ab01      	add	r3, sp, #4
 8002f4e:	466a      	mov	r2, sp
 8002f50:	f7ff ffd2 	bl	8002ef8 <__swhatbuf_r>
 8002f54:	9900      	ldr	r1, [sp, #0]
 8002f56:	4606      	mov	r6, r0
 8002f58:	4628      	mov	r0, r5
 8002f5a:	f000 f883 	bl	8003064 <_malloc_r>
 8002f5e:	b968      	cbnz	r0, 8002f7c <__smakebuf_r+0x3c>
 8002f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f64:	059a      	lsls	r2, r3, #22
 8002f66:	d422      	bmi.n	8002fae <__smakebuf_r+0x6e>
 8002f68:	f043 0302 	orr.w	r3, r3, #2
 8002f6c:	81a3      	strh	r3, [r4, #12]
 8002f6e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f72:	6023      	str	r3, [r4, #0]
 8002f74:	6123      	str	r3, [r4, #16]
 8002f76:	2301      	movs	r3, #1
 8002f78:	6163      	str	r3, [r4, #20]
 8002f7a:	e018      	b.n	8002fae <__smakebuf_r+0x6e>
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <__smakebuf_r+0x74>)
 8002f7e:	62ab      	str	r3, [r5, #40]	; 0x28
 8002f80:	89a3      	ldrh	r3, [r4, #12]
 8002f82:	6020      	str	r0, [r4, #0]
 8002f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f88:	81a3      	strh	r3, [r4, #12]
 8002f8a:	9b00      	ldr	r3, [sp, #0]
 8002f8c:	6163      	str	r3, [r4, #20]
 8002f8e:	9b01      	ldr	r3, [sp, #4]
 8002f90:	6120      	str	r0, [r4, #16]
 8002f92:	b14b      	cbz	r3, 8002fa8 <__smakebuf_r+0x68>
 8002f94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f98:	4628      	mov	r0, r5
 8002f9a:	f000 fe8f 	bl	8003cbc <_isatty_r>
 8002f9e:	b118      	cbz	r0, 8002fa8 <__smakebuf_r+0x68>
 8002fa0:	89a3      	ldrh	r3, [r4, #12]
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	81a3      	strh	r3, [r4, #12]
 8002fa8:	89a0      	ldrh	r0, [r4, #12]
 8002faa:	4330      	orrs	r0, r6
 8002fac:	81a0      	strh	r0, [r4, #12]
 8002fae:	b002      	add	sp, #8
 8002fb0:	bd70      	pop	{r4, r5, r6, pc}
 8002fb2:	bf00      	nop
 8002fb4:	08002d2d 	.word	0x08002d2d

08002fb8 <memset>:
 8002fb8:	4402      	add	r2, r0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d002      	beq.n	8002fc6 <memset+0xe>
 8002fc0:	f803 1b01 	strb.w	r1, [r3], #1
 8002fc4:	e7fa      	b.n	8002fbc <memset+0x4>
 8002fc6:	4770      	bx	lr

08002fc8 <_free_r>:
 8002fc8:	b538      	push	{r3, r4, r5, lr}
 8002fca:	4605      	mov	r5, r0
 8002fcc:	2900      	cmp	r1, #0
 8002fce:	d046      	beq.n	800305e <_free_r+0x96>
 8002fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fd4:	1f0c      	subs	r4, r1, #4
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bfb8      	it	lt
 8002fda:	18e4      	addlt	r4, r4, r3
 8002fdc:	f000 fe9b 	bl	8003d16 <__malloc_lock>
 8002fe0:	4a1f      	ldr	r2, [pc, #124]	; (8003060 <_free_r+0x98>)
 8002fe2:	6813      	ldr	r3, [r2, #0]
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	b913      	cbnz	r3, 8002fee <_free_r+0x26>
 8002fe8:	6063      	str	r3, [r4, #4]
 8002fea:	6014      	str	r4, [r2, #0]
 8002fec:	e032      	b.n	8003054 <_free_r+0x8c>
 8002fee:	42a3      	cmp	r3, r4
 8002ff0:	d90e      	bls.n	8003010 <_free_r+0x48>
 8002ff2:	6822      	ldr	r2, [r4, #0]
 8002ff4:	18a0      	adds	r0, r4, r2
 8002ff6:	4283      	cmp	r3, r0
 8002ff8:	bf04      	itt	eq
 8002ffa:	6818      	ldreq	r0, [r3, #0]
 8002ffc:	685b      	ldreq	r3, [r3, #4]
 8002ffe:	6063      	str	r3, [r4, #4]
 8003000:	bf04      	itt	eq
 8003002:	1812      	addeq	r2, r2, r0
 8003004:	6022      	streq	r2, [r4, #0]
 8003006:	600c      	str	r4, [r1, #0]
 8003008:	e024      	b.n	8003054 <_free_r+0x8c>
 800300a:	42a2      	cmp	r2, r4
 800300c:	d803      	bhi.n	8003016 <_free_r+0x4e>
 800300e:	4613      	mov	r3, r2
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	2a00      	cmp	r2, #0
 8003014:	d1f9      	bne.n	800300a <_free_r+0x42>
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	1819      	adds	r1, r3, r0
 800301a:	42a1      	cmp	r1, r4
 800301c:	d10b      	bne.n	8003036 <_free_r+0x6e>
 800301e:	6821      	ldr	r1, [r4, #0]
 8003020:	4401      	add	r1, r0
 8003022:	1858      	adds	r0, r3, r1
 8003024:	4282      	cmp	r2, r0
 8003026:	6019      	str	r1, [r3, #0]
 8003028:	d114      	bne.n	8003054 <_free_r+0x8c>
 800302a:	6810      	ldr	r0, [r2, #0]
 800302c:	6852      	ldr	r2, [r2, #4]
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	4401      	add	r1, r0
 8003032:	6019      	str	r1, [r3, #0]
 8003034:	e00e      	b.n	8003054 <_free_r+0x8c>
 8003036:	d902      	bls.n	800303e <_free_r+0x76>
 8003038:	230c      	movs	r3, #12
 800303a:	602b      	str	r3, [r5, #0]
 800303c:	e00a      	b.n	8003054 <_free_r+0x8c>
 800303e:	6821      	ldr	r1, [r4, #0]
 8003040:	1860      	adds	r0, r4, r1
 8003042:	4282      	cmp	r2, r0
 8003044:	bf04      	itt	eq
 8003046:	6810      	ldreq	r0, [r2, #0]
 8003048:	6852      	ldreq	r2, [r2, #4]
 800304a:	6062      	str	r2, [r4, #4]
 800304c:	bf04      	itt	eq
 800304e:	1809      	addeq	r1, r1, r0
 8003050:	6021      	streq	r1, [r4, #0]
 8003052:	605c      	str	r4, [r3, #4]
 8003054:	4628      	mov	r0, r5
 8003056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800305a:	f000 be5d 	b.w	8003d18 <__malloc_unlock>
 800305e:	bd38      	pop	{r3, r4, r5, pc}
 8003060:	20000134 	.word	0x20000134

08003064 <_malloc_r>:
 8003064:	b570      	push	{r4, r5, r6, lr}
 8003066:	1ccd      	adds	r5, r1, #3
 8003068:	f025 0503 	bic.w	r5, r5, #3
 800306c:	3508      	adds	r5, #8
 800306e:	2d0c      	cmp	r5, #12
 8003070:	bf38      	it	cc
 8003072:	250c      	movcc	r5, #12
 8003074:	2d00      	cmp	r5, #0
 8003076:	4606      	mov	r6, r0
 8003078:	db01      	blt.n	800307e <_malloc_r+0x1a>
 800307a:	42a9      	cmp	r1, r5
 800307c:	d902      	bls.n	8003084 <_malloc_r+0x20>
 800307e:	230c      	movs	r3, #12
 8003080:	6033      	str	r3, [r6, #0]
 8003082:	e046      	b.n	8003112 <_malloc_r+0xae>
 8003084:	f000 fe47 	bl	8003d16 <__malloc_lock>
 8003088:	4b23      	ldr	r3, [pc, #140]	; (8003118 <_malloc_r+0xb4>)
 800308a:	681c      	ldr	r4, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	4621      	mov	r1, r4
 8003090:	b1a1      	cbz	r1, 80030bc <_malloc_r+0x58>
 8003092:	680b      	ldr	r3, [r1, #0]
 8003094:	1b5b      	subs	r3, r3, r5
 8003096:	d40e      	bmi.n	80030b6 <_malloc_r+0x52>
 8003098:	2b0b      	cmp	r3, #11
 800309a:	d903      	bls.n	80030a4 <_malloc_r+0x40>
 800309c:	600b      	str	r3, [r1, #0]
 800309e:	18cc      	adds	r4, r1, r3
 80030a0:	50cd      	str	r5, [r1, r3]
 80030a2:	e01e      	b.n	80030e2 <_malloc_r+0x7e>
 80030a4:	428c      	cmp	r4, r1
 80030a6:	bf0d      	iteet	eq
 80030a8:	6863      	ldreq	r3, [r4, #4]
 80030aa:	684b      	ldrne	r3, [r1, #4]
 80030ac:	6063      	strne	r3, [r4, #4]
 80030ae:	6013      	streq	r3, [r2, #0]
 80030b0:	bf18      	it	ne
 80030b2:	460c      	movne	r4, r1
 80030b4:	e015      	b.n	80030e2 <_malloc_r+0x7e>
 80030b6:	460c      	mov	r4, r1
 80030b8:	6849      	ldr	r1, [r1, #4]
 80030ba:	e7e9      	b.n	8003090 <_malloc_r+0x2c>
 80030bc:	4c17      	ldr	r4, [pc, #92]	; (800311c <_malloc_r+0xb8>)
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	b91b      	cbnz	r3, 80030ca <_malloc_r+0x66>
 80030c2:	4630      	mov	r0, r6
 80030c4:	f000 fb90 	bl	80037e8 <_sbrk_r>
 80030c8:	6020      	str	r0, [r4, #0]
 80030ca:	4629      	mov	r1, r5
 80030cc:	4630      	mov	r0, r6
 80030ce:	f000 fb8b 	bl	80037e8 <_sbrk_r>
 80030d2:	1c43      	adds	r3, r0, #1
 80030d4:	d018      	beq.n	8003108 <_malloc_r+0xa4>
 80030d6:	1cc4      	adds	r4, r0, #3
 80030d8:	f024 0403 	bic.w	r4, r4, #3
 80030dc:	42a0      	cmp	r0, r4
 80030de:	d10d      	bne.n	80030fc <_malloc_r+0x98>
 80030e0:	6025      	str	r5, [r4, #0]
 80030e2:	4630      	mov	r0, r6
 80030e4:	f000 fe18 	bl	8003d18 <__malloc_unlock>
 80030e8:	f104 000b 	add.w	r0, r4, #11
 80030ec:	1d23      	adds	r3, r4, #4
 80030ee:	f020 0007 	bic.w	r0, r0, #7
 80030f2:	1ac3      	subs	r3, r0, r3
 80030f4:	d00e      	beq.n	8003114 <_malloc_r+0xb0>
 80030f6:	425a      	negs	r2, r3
 80030f8:	50e2      	str	r2, [r4, r3]
 80030fa:	bd70      	pop	{r4, r5, r6, pc}
 80030fc:	1a21      	subs	r1, r4, r0
 80030fe:	4630      	mov	r0, r6
 8003100:	f000 fb72 	bl	80037e8 <_sbrk_r>
 8003104:	3001      	adds	r0, #1
 8003106:	d1eb      	bne.n	80030e0 <_malloc_r+0x7c>
 8003108:	230c      	movs	r3, #12
 800310a:	6033      	str	r3, [r6, #0]
 800310c:	4630      	mov	r0, r6
 800310e:	f000 fe03 	bl	8003d18 <__malloc_unlock>
 8003112:	2000      	movs	r0, #0
 8003114:	bd70      	pop	{r4, r5, r6, pc}
 8003116:	bf00      	nop
 8003118:	20000134 	.word	0x20000134
 800311c:	20000130 	.word	0x20000130

08003120 <__svfiscanf_r>:
 8003120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003124:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8003128:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80033c4 <__svfiscanf_r+0x2a4>
 800312c:	9301      	str	r3, [sp, #4]
 800312e:	2300      	movs	r3, #0
 8003130:	9346      	str	r3, [sp, #280]	; 0x118
 8003132:	9347      	str	r3, [sp, #284]	; 0x11c
 8003134:	4b9f      	ldr	r3, [pc, #636]	; (80033b4 <__svfiscanf_r+0x294>)
 8003136:	93a2      	str	r3, [sp, #648]	; 0x288
 8003138:	f10d 080c 	add.w	r8, sp, #12
 800313c:	4b9e      	ldr	r3, [pc, #632]	; (80033b8 <__svfiscanf_r+0x298>)
 800313e:	f8df b27c 	ldr.w	fp, [pc, #636]	; 80033bc <__svfiscanf_r+0x29c>
 8003142:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 8003146:	4607      	mov	r7, r0
 8003148:	460d      	mov	r5, r1
 800314a:	93a3      	str	r3, [sp, #652]	; 0x28c
 800314c:	46ca      	mov	sl, r9
 800314e:	7814      	ldrb	r4, [r2, #0]
 8003150:	2c00      	cmp	r4, #0
 8003152:	f000 8127 	beq.w	80033a4 <__svfiscanf_r+0x284>
 8003156:	f8d9 3000 	ldr.w	r3, [r9]
 800315a:	4423      	add	r3, r4
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8003166:	b1f3      	cbz	r3, 80031a6 <__svfiscanf_r+0x86>
 8003168:	686b      	ldr	r3, [r5, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	dd10      	ble.n	8003190 <__svfiscanf_r+0x70>
 800316e:	682b      	ldr	r3, [r5, #0]
 8003170:	f8da 0000 	ldr.w	r0, [sl]
 8003174:	7819      	ldrb	r1, [r3, #0]
 8003176:	4401      	add	r1, r0
 8003178:	7849      	ldrb	r1, [r1, #1]
 800317a:	070c      	lsls	r4, r1, #28
 800317c:	d510      	bpl.n	80031a0 <__svfiscanf_r+0x80>
 800317e:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8003180:	3101      	adds	r1, #1
 8003182:	9147      	str	r1, [sp, #284]	; 0x11c
 8003184:	6869      	ldr	r1, [r5, #4]
 8003186:	3301      	adds	r3, #1
 8003188:	3901      	subs	r1, #1
 800318a:	6069      	str	r1, [r5, #4]
 800318c:	602b      	str	r3, [r5, #0]
 800318e:	e7eb      	b.n	8003168 <__svfiscanf_r+0x48>
 8003190:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003192:	9200      	str	r2, [sp, #0]
 8003194:	4629      	mov	r1, r5
 8003196:	4638      	mov	r0, r7
 8003198:	4798      	blx	r3
 800319a:	9a00      	ldr	r2, [sp, #0]
 800319c:	2800      	cmp	r0, #0
 800319e:	d0e6      	beq.n	800316e <__svfiscanf_r+0x4e>
 80031a0:	1c56      	adds	r6, r2, #1
 80031a2:	4632      	mov	r2, r6
 80031a4:	e7d3      	b.n	800314e <__svfiscanf_r+0x2e>
 80031a6:	2c25      	cmp	r4, #37	; 0x25
 80031a8:	f102 0601 	add.w	r6, r2, #1
 80031ac:	d152      	bne.n	8003254 <__svfiscanf_r+0x134>
 80031ae:	9143      	str	r1, [sp, #268]	; 0x10c
 80031b0:	9145      	str	r1, [sp, #276]	; 0x114
 80031b2:	7853      	ldrb	r3, [r2, #1]
 80031b4:	2b2a      	cmp	r3, #42	; 0x2a
 80031b6:	bf02      	ittt	eq
 80031b8:	2310      	moveq	r3, #16
 80031ba:	1c96      	addeq	r6, r2, #2
 80031bc:	9343      	streq	r3, [sp, #268]	; 0x10c
 80031be:	220a      	movs	r2, #10
 80031c0:	7831      	ldrb	r1, [r6, #0]
 80031c2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80031c6:	2b09      	cmp	r3, #9
 80031c8:	4634      	mov	r4, r6
 80031ca:	f106 0601 	add.w	r6, r6, #1
 80031ce:	d805      	bhi.n	80031dc <__svfiscanf_r+0xbc>
 80031d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80031d2:	fb02 1303 	mla	r3, r2, r3, r1
 80031d6:	3b30      	subs	r3, #48	; 0x30
 80031d8:	9345      	str	r3, [sp, #276]	; 0x114
 80031da:	e7f1      	b.n	80031c0 <__svfiscanf_r+0xa0>
 80031dc:	2203      	movs	r2, #3
 80031de:	4877      	ldr	r0, [pc, #476]	; (80033bc <__svfiscanf_r+0x29c>)
 80031e0:	f7fc fff6 	bl	80001d0 <memchr>
 80031e4:	b140      	cbz	r0, 80031f8 <__svfiscanf_r+0xd8>
 80031e6:	2301      	movs	r3, #1
 80031e8:	ebcb 0000 	rsb	r0, fp, r0
 80031ec:	fa03 f000 	lsl.w	r0, r3, r0
 80031f0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80031f2:	4303      	orrs	r3, r0
 80031f4:	9343      	str	r3, [sp, #268]	; 0x10c
 80031f6:	4634      	mov	r4, r6
 80031f8:	1c66      	adds	r6, r4, #1
 80031fa:	7824      	ldrb	r4, [r4, #0]
 80031fc:	2c67      	cmp	r4, #103	; 0x67
 80031fe:	d816      	bhi.n	800322e <__svfiscanf_r+0x10e>
 8003200:	2c65      	cmp	r4, #101	; 0x65
 8003202:	d27f      	bcs.n	8003304 <__svfiscanf_r+0x1e4>
 8003204:	2c47      	cmp	r4, #71	; 0x47
 8003206:	d807      	bhi.n	8003218 <__svfiscanf_r+0xf8>
 8003208:	2c45      	cmp	r4, #69	; 0x45
 800320a:	d27b      	bcs.n	8003304 <__svfiscanf_r+0x1e4>
 800320c:	2c00      	cmp	r4, #0
 800320e:	f000 80cb 	beq.w	80033a8 <__svfiscanf_r+0x288>
 8003212:	2c25      	cmp	r4, #37	; 0x25
 8003214:	d01e      	beq.n	8003254 <__svfiscanf_r+0x134>
 8003216:	e077      	b.n	8003308 <__svfiscanf_r+0x1e8>
 8003218:	2c5b      	cmp	r4, #91	; 0x5b
 800321a:	d051      	beq.n	80032c0 <__svfiscanf_r+0x1a0>
 800321c:	d802      	bhi.n	8003224 <__svfiscanf_r+0x104>
 800321e:	2c58      	cmp	r4, #88	; 0x58
 8003220:	d03e      	beq.n	80032a0 <__svfiscanf_r+0x180>
 8003222:	e071      	b.n	8003308 <__svfiscanf_r+0x1e8>
 8003224:	2c63      	cmp	r4, #99	; 0x63
 8003226:	d057      	beq.n	80032d8 <__svfiscanf_r+0x1b8>
 8003228:	2c64      	cmp	r4, #100	; 0x64
 800322a:	d03f      	beq.n	80032ac <__svfiscanf_r+0x18c>
 800322c:	e06c      	b.n	8003308 <__svfiscanf_r+0x1e8>
 800322e:	2c70      	cmp	r4, #112	; 0x70
 8003230:	d032      	beq.n	8003298 <__svfiscanf_r+0x178>
 8003232:	d807      	bhi.n	8003244 <__svfiscanf_r+0x124>
 8003234:	2c6e      	cmp	r4, #110	; 0x6e
 8003236:	d055      	beq.n	80032e4 <__svfiscanf_r+0x1c4>
 8003238:	d83a      	bhi.n	80032b0 <__svfiscanf_r+0x190>
 800323a:	2c69      	cmp	r4, #105	; 0x69
 800323c:	d164      	bne.n	8003308 <__svfiscanf_r+0x1e8>
 800323e:	2300      	movs	r3, #0
 8003240:	9344      	str	r3, [sp, #272]	; 0x110
 8003242:	e03b      	b.n	80032bc <__svfiscanf_r+0x19c>
 8003244:	2c75      	cmp	r4, #117	; 0x75
 8003246:	d031      	beq.n	80032ac <__svfiscanf_r+0x18c>
 8003248:	2c78      	cmp	r4, #120	; 0x78
 800324a:	d029      	beq.n	80032a0 <__svfiscanf_r+0x180>
 800324c:	2c73      	cmp	r4, #115	; 0x73
 800324e:	d15b      	bne.n	8003308 <__svfiscanf_r+0x1e8>
 8003250:	2302      	movs	r3, #2
 8003252:	e03f      	b.n	80032d4 <__svfiscanf_r+0x1b4>
 8003254:	686b      	ldr	r3, [r5, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	dd0d      	ble.n	8003276 <__svfiscanf_r+0x156>
 800325a:	682b      	ldr	r3, [r5, #0]
 800325c:	781a      	ldrb	r2, [r3, #0]
 800325e:	4294      	cmp	r4, r2
 8003260:	f040 80a0 	bne.w	80033a4 <__svfiscanf_r+0x284>
 8003264:	3301      	adds	r3, #1
 8003266:	686a      	ldr	r2, [r5, #4]
 8003268:	602b      	str	r3, [r5, #0]
 800326a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800326c:	3a01      	subs	r2, #1
 800326e:	3301      	adds	r3, #1
 8003270:	606a      	str	r2, [r5, #4]
 8003272:	9347      	str	r3, [sp, #284]	; 0x11c
 8003274:	e795      	b.n	80031a2 <__svfiscanf_r+0x82>
 8003276:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003278:	4629      	mov	r1, r5
 800327a:	4638      	mov	r0, r7
 800327c:	4798      	blx	r3
 800327e:	2800      	cmp	r0, #0
 8003280:	d0eb      	beq.n	800325a <__svfiscanf_r+0x13a>
 8003282:	9846      	ldr	r0, [sp, #280]	; 0x118
 8003284:	2800      	cmp	r0, #0
 8003286:	f000 808f 	beq.w	80033a8 <__svfiscanf_r+0x288>
 800328a:	89ab      	ldrh	r3, [r5, #12]
 800328c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003290:	bf18      	it	ne
 8003292:	f04f 30ff 	movne.w	r0, #4294967295
 8003296:	e089      	b.n	80033ac <__svfiscanf_r+0x28c>
 8003298:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800329a:	f043 0320 	orr.w	r3, r3, #32
 800329e:	9343      	str	r3, [sp, #268]	; 0x10c
 80032a0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80032a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032a6:	9343      	str	r3, [sp, #268]	; 0x10c
 80032a8:	2310      	movs	r3, #16
 80032aa:	e002      	b.n	80032b2 <__svfiscanf_r+0x192>
 80032ac:	230a      	movs	r3, #10
 80032ae:	e000      	b.n	80032b2 <__svfiscanf_r+0x192>
 80032b0:	2308      	movs	r3, #8
 80032b2:	2c6e      	cmp	r4, #110	; 0x6e
 80032b4:	9344      	str	r3, [sp, #272]	; 0x110
 80032b6:	dd01      	ble.n	80032bc <__svfiscanf_r+0x19c>
 80032b8:	2304      	movs	r3, #4
 80032ba:	e00b      	b.n	80032d4 <__svfiscanf_r+0x1b4>
 80032bc:	2303      	movs	r3, #3
 80032be:	e009      	b.n	80032d4 <__svfiscanf_r+0x1b4>
 80032c0:	4631      	mov	r1, r6
 80032c2:	4640      	mov	r0, r8
 80032c4:	f000 faa0 	bl	8003808 <__sccl>
 80032c8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80032ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ce:	9343      	str	r3, [sp, #268]	; 0x10c
 80032d0:	4606      	mov	r6, r0
 80032d2:	2301      	movs	r3, #1
 80032d4:	9349      	str	r3, [sp, #292]	; 0x124
 80032d6:	e01b      	b.n	8003310 <__svfiscanf_r+0x1f0>
 80032d8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80032da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032de:	9343      	str	r3, [sp, #268]	; 0x10c
 80032e0:	2300      	movs	r3, #0
 80032e2:	e7f7      	b.n	80032d4 <__svfiscanf_r+0x1b4>
 80032e4:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80032e6:	06d0      	lsls	r0, r2, #27
 80032e8:	f53f af5b 	bmi.w	80031a2 <__svfiscanf_r+0x82>
 80032ec:	f012 0f01 	tst.w	r2, #1
 80032f0:	9a01      	ldr	r2, [sp, #4]
 80032f2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80032f4:	f102 0104 	add.w	r1, r2, #4
 80032f8:	9101      	str	r1, [sp, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	bf14      	ite	ne
 80032fe:	8013      	strhne	r3, [r2, #0]
 8003300:	6013      	streq	r3, [r2, #0]
 8003302:	e74e      	b.n	80031a2 <__svfiscanf_r+0x82>
 8003304:	2305      	movs	r3, #5
 8003306:	e7e5      	b.n	80032d4 <__svfiscanf_r+0x1b4>
 8003308:	2303      	movs	r3, #3
 800330a:	9349      	str	r3, [sp, #292]	; 0x124
 800330c:	230a      	movs	r3, #10
 800330e:	9344      	str	r3, [sp, #272]	; 0x110
 8003310:	686b      	ldr	r3, [r5, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	dd03      	ble.n	800331e <__svfiscanf_r+0x1fe>
 8003316:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003318:	0659      	lsls	r1, r3, #25
 800331a:	d511      	bpl.n	8003340 <__svfiscanf_r+0x220>
 800331c:	e018      	b.n	8003350 <__svfiscanf_r+0x230>
 800331e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003320:	4629      	mov	r1, r5
 8003322:	4638      	mov	r0, r7
 8003324:	4798      	blx	r3
 8003326:	2800      	cmp	r0, #0
 8003328:	d0f5      	beq.n	8003316 <__svfiscanf_r+0x1f6>
 800332a:	e7aa      	b.n	8003282 <__svfiscanf_r+0x162>
 800332c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800332e:	3201      	adds	r2, #1
 8003330:	9247      	str	r2, [sp, #284]	; 0x11c
 8003332:	686a      	ldr	r2, [r5, #4]
 8003334:	3a01      	subs	r2, #1
 8003336:	2a00      	cmp	r2, #0
 8003338:	606a      	str	r2, [r5, #4]
 800333a:	dd13      	ble.n	8003364 <__svfiscanf_r+0x244>
 800333c:	3301      	adds	r3, #1
 800333e:	602b      	str	r3, [r5, #0]
 8003340:	682b      	ldr	r3, [r5, #0]
 8003342:	f8da 1000 	ldr.w	r1, [sl]
 8003346:	781a      	ldrb	r2, [r3, #0]
 8003348:	440a      	add	r2, r1
 800334a:	7852      	ldrb	r2, [r2, #1]
 800334c:	0712      	lsls	r2, r2, #28
 800334e:	d4ed      	bmi.n	800332c <__svfiscanf_r+0x20c>
 8003350:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8003352:	2b02      	cmp	r3, #2
 8003354:	dc0d      	bgt.n	8003372 <__svfiscanf_r+0x252>
 8003356:	ab01      	add	r3, sp, #4
 8003358:	462a      	mov	r2, r5
 800335a:	a943      	add	r1, sp, #268	; 0x10c
 800335c:	4638      	mov	r0, r7
 800335e:	f000 f85b 	bl	8003418 <_scanf_chars>
 8003362:	e019      	b.n	8003398 <__svfiscanf_r+0x278>
 8003364:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003366:	4629      	mov	r1, r5
 8003368:	4638      	mov	r0, r7
 800336a:	4798      	blx	r3
 800336c:	2800      	cmp	r0, #0
 800336e:	d0e7      	beq.n	8003340 <__svfiscanf_r+0x220>
 8003370:	e787      	b.n	8003282 <__svfiscanf_r+0x162>
 8003372:	2b04      	cmp	r3, #4
 8003374:	dc06      	bgt.n	8003384 <__svfiscanf_r+0x264>
 8003376:	ab01      	add	r3, sp, #4
 8003378:	462a      	mov	r2, r5
 800337a:	a943      	add	r1, sp, #268	; 0x10c
 800337c:	4638      	mov	r0, r7
 800337e:	f000 f8af 	bl	80034e0 <_scanf_i>
 8003382:	e009      	b.n	8003398 <__svfiscanf_r+0x278>
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <__svfiscanf_r+0x2a0>)
 8003386:	2b00      	cmp	r3, #0
 8003388:	f43f af0b 	beq.w	80031a2 <__svfiscanf_r+0x82>
 800338c:	ab01      	add	r3, sp, #4
 800338e:	462a      	mov	r2, r5
 8003390:	a943      	add	r1, sp, #268	; 0x10c
 8003392:	4638      	mov	r0, r7
 8003394:	f3af 8000 	nop.w
 8003398:	2801      	cmp	r0, #1
 800339a:	d003      	beq.n	80033a4 <__svfiscanf_r+0x284>
 800339c:	2802      	cmp	r0, #2
 800339e:	f47f af00 	bne.w	80031a2 <__svfiscanf_r+0x82>
 80033a2:	e76e      	b.n	8003282 <__svfiscanf_r+0x162>
 80033a4:	9846      	ldr	r0, [sp, #280]	; 0x118
 80033a6:	e001      	b.n	80033ac <__svfiscanf_r+0x28c>
 80033a8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ac:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 80033b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033b4:	08003b71 	.word	0x08003b71
 80033b8:	080036d9 	.word	0x080036d9
 80033bc:	0800505c 	.word	0x0800505c
 80033c0:	00000000 	.word	0x00000000
 80033c4:	20000108 	.word	0x20000108

080033c8 <_vfiscanf_r>:
 80033c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033cc:	460c      	mov	r4, r1
 80033ce:	4616      	mov	r6, r2
 80033d0:	461f      	mov	r7, r3
 80033d2:	4605      	mov	r5, r0
 80033d4:	b118      	cbz	r0, 80033de <_vfiscanf_r+0x16>
 80033d6:	6983      	ldr	r3, [r0, #24]
 80033d8:	b90b      	cbnz	r3, 80033de <_vfiscanf_r+0x16>
 80033da:	f7ff fce7 	bl	8002dac <__sinit>
 80033de:	4b0b      	ldr	r3, [pc, #44]	; (800340c <_vfiscanf_r+0x44>)
 80033e0:	429c      	cmp	r4, r3
 80033e2:	d101      	bne.n	80033e8 <_vfiscanf_r+0x20>
 80033e4:	686c      	ldr	r4, [r5, #4]
 80033e6:	e008      	b.n	80033fa <_vfiscanf_r+0x32>
 80033e8:	4b09      	ldr	r3, [pc, #36]	; (8003410 <_vfiscanf_r+0x48>)
 80033ea:	429c      	cmp	r4, r3
 80033ec:	d101      	bne.n	80033f2 <_vfiscanf_r+0x2a>
 80033ee:	68ac      	ldr	r4, [r5, #8]
 80033f0:	e003      	b.n	80033fa <_vfiscanf_r+0x32>
 80033f2:	4b08      	ldr	r3, [pc, #32]	; (8003414 <_vfiscanf_r+0x4c>)
 80033f4:	429c      	cmp	r4, r3
 80033f6:	bf08      	it	eq
 80033f8:	68ec      	ldreq	r4, [r5, #12]
 80033fa:	463b      	mov	r3, r7
 80033fc:	4632      	mov	r2, r6
 80033fe:	4621      	mov	r1, r4
 8003400:	4628      	mov	r0, r5
 8003402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003406:	f7ff be8b 	b.w	8003120 <__svfiscanf_r>
 800340a:	bf00      	nop
 800340c:	08004ff4 	.word	0x08004ff4
 8003410:	08005014 	.word	0x08005014
 8003414:	08005034 	.word	0x08005034

08003418 <_scanf_chars>:
 8003418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800341c:	4615      	mov	r5, r2
 800341e:	688a      	ldr	r2, [r1, #8]
 8003420:	4680      	mov	r8, r0
 8003422:	460c      	mov	r4, r1
 8003424:	b932      	cbnz	r2, 8003434 <_scanf_chars+0x1c>
 8003426:	698a      	ldr	r2, [r1, #24]
 8003428:	2a00      	cmp	r2, #0
 800342a:	bf0c      	ite	eq
 800342c:	2201      	moveq	r2, #1
 800342e:	f04f 32ff 	movne.w	r2, #4294967295
 8003432:	608a      	str	r2, [r1, #8]
 8003434:	6822      	ldr	r2, [r4, #0]
 8003436:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80034dc <_scanf_chars+0xc4>
 800343a:	06d1      	lsls	r1, r2, #27
 800343c:	bf5f      	itttt	pl
 800343e:	681a      	ldrpl	r2, [r3, #0]
 8003440:	1d11      	addpl	r1, r2, #4
 8003442:	6019      	strpl	r1, [r3, #0]
 8003444:	6817      	ldrpl	r7, [r2, #0]
 8003446:	2600      	movs	r6, #0
 8003448:	69a0      	ldr	r0, [r4, #24]
 800344a:	bb00      	cbnz	r0, 800348e <_scanf_chars+0x76>
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	06da      	lsls	r2, r3, #27
 8003450:	bf5e      	ittt	pl
 8003452:	682b      	ldrpl	r3, [r5, #0]
 8003454:	781b      	ldrbpl	r3, [r3, #0]
 8003456:	703b      	strbpl	r3, [r7, #0]
 8003458:	682a      	ldr	r2, [r5, #0]
 800345a:	686b      	ldr	r3, [r5, #4]
 800345c:	f102 0201 	add.w	r2, r2, #1
 8003460:	602a      	str	r2, [r5, #0]
 8003462:	68a2      	ldr	r2, [r4, #8]
 8003464:	f103 33ff 	add.w	r3, r3, #4294967295
 8003468:	f102 32ff 	add.w	r2, r2, #4294967295
 800346c:	606b      	str	r3, [r5, #4]
 800346e:	f106 0601 	add.w	r6, r6, #1
 8003472:	bf58      	it	pl
 8003474:	3701      	addpl	r7, #1
 8003476:	60a2      	str	r2, [r4, #8]
 8003478:	b1e2      	cbz	r2, 80034b4 <_scanf_chars+0x9c>
 800347a:	2b00      	cmp	r3, #0
 800347c:	dce4      	bgt.n	8003448 <_scanf_chars+0x30>
 800347e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003482:	4629      	mov	r1, r5
 8003484:	4640      	mov	r0, r8
 8003486:	4798      	blx	r3
 8003488:	2800      	cmp	r0, #0
 800348a:	d0dd      	beq.n	8003448 <_scanf_chars+0x30>
 800348c:	e012      	b.n	80034b4 <_scanf_chars+0x9c>
 800348e:	2801      	cmp	r0, #1
 8003490:	d106      	bne.n	80034a0 <_scanf_chars+0x88>
 8003492:	682b      	ldr	r3, [r5, #0]
 8003494:	781a      	ldrb	r2, [r3, #0]
 8003496:	6963      	ldr	r3, [r4, #20]
 8003498:	5c9b      	ldrb	r3, [r3, r2]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1d6      	bne.n	800344c <_scanf_chars+0x34>
 800349e:	e019      	b.n	80034d4 <_scanf_chars+0xbc>
 80034a0:	2802      	cmp	r0, #2
 80034a2:	d107      	bne.n	80034b4 <_scanf_chars+0x9c>
 80034a4:	682b      	ldr	r3, [r5, #0]
 80034a6:	f8d9 2000 	ldr.w	r2, [r9]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	4413      	add	r3, r2
 80034ae:	785b      	ldrb	r3, [r3, #1]
 80034b0:	071b      	lsls	r3, r3, #28
 80034b2:	d5cb      	bpl.n	800344c <_scanf_chars+0x34>
 80034b4:	6823      	ldr	r3, [r4, #0]
 80034b6:	f013 0310 	ands.w	r3, r3, #16
 80034ba:	d105      	bne.n	80034c8 <_scanf_chars+0xb0>
 80034bc:	68e2      	ldr	r2, [r4, #12]
 80034be:	3201      	adds	r2, #1
 80034c0:	60e2      	str	r2, [r4, #12]
 80034c2:	69a2      	ldr	r2, [r4, #24]
 80034c4:	b102      	cbz	r2, 80034c8 <_scanf_chars+0xb0>
 80034c6:	703b      	strb	r3, [r7, #0]
 80034c8:	6923      	ldr	r3, [r4, #16]
 80034ca:	441e      	add	r6, r3
 80034cc:	6126      	str	r6, [r4, #16]
 80034ce:	2000      	movs	r0, #0
 80034d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034d4:	2e00      	cmp	r6, #0
 80034d6:	d1ed      	bne.n	80034b4 <_scanf_chars+0x9c>
 80034d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034dc:	20000108 	.word	0x20000108

080034e0 <_scanf_i>:
 80034e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e4:	469a      	mov	sl, r3
 80034e6:	4b73      	ldr	r3, [pc, #460]	; (80036b4 <_scanf_i+0x1d4>)
 80034e8:	460c      	mov	r4, r1
 80034ea:	4683      	mov	fp, r0
 80034ec:	4616      	mov	r6, r2
 80034ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034f2:	b087      	sub	sp, #28
 80034f4:	ab03      	add	r3, sp, #12
 80034f6:	68a7      	ldr	r7, [r4, #8]
 80034f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80034fc:	4b6e      	ldr	r3, [pc, #440]	; (80036b8 <_scanf_i+0x1d8>)
 80034fe:	69a1      	ldr	r1, [r4, #24]
 8003500:	4a6e      	ldr	r2, [pc, #440]	; (80036bc <_scanf_i+0x1dc>)
 8003502:	2903      	cmp	r1, #3
 8003504:	bf18      	it	ne
 8003506:	461a      	movne	r2, r3
 8003508:	1e7b      	subs	r3, r7, #1
 800350a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800350e:	bf84      	itt	hi
 8003510:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003514:	60a3      	strhi	r3, [r4, #8]
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	9200      	str	r2, [sp, #0]
 800351a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800351e:	bf88      	it	hi
 8003520:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003524:	f104 091c 	add.w	r9, r4, #28
 8003528:	6023      	str	r3, [r4, #0]
 800352a:	bf8c      	ite	hi
 800352c:	197f      	addhi	r7, r7, r5
 800352e:	2700      	movls	r7, #0
 8003530:	464b      	mov	r3, r9
 8003532:	f04f 0800 	mov.w	r8, #0
 8003536:	9301      	str	r3, [sp, #4]
 8003538:	6831      	ldr	r1, [r6, #0]
 800353a:	ab03      	add	r3, sp, #12
 800353c:	2202      	movs	r2, #2
 800353e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003542:	7809      	ldrb	r1, [r1, #0]
 8003544:	f7fc fe44 	bl	80001d0 <memchr>
 8003548:	9b01      	ldr	r3, [sp, #4]
 800354a:	2800      	cmp	r0, #0
 800354c:	d033      	beq.n	80035b6 <_scanf_i+0xd6>
 800354e:	f1b8 0f01 	cmp.w	r8, #1
 8003552:	d10b      	bne.n	800356c <_scanf_i+0x8c>
 8003554:	6862      	ldr	r2, [r4, #4]
 8003556:	b92a      	cbnz	r2, 8003564 <_scanf_i+0x84>
 8003558:	2208      	movs	r2, #8
 800355a:	6062      	str	r2, [r4, #4]
 800355c:	6822      	ldr	r2, [r4, #0]
 800355e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003562:	6022      	str	r2, [r4, #0]
 8003564:	6822      	ldr	r2, [r4, #0]
 8003566:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800356a:	e00c      	b.n	8003586 <_scanf_i+0xa6>
 800356c:	f1b8 0f02 	cmp.w	r8, #2
 8003570:	d10a      	bne.n	8003588 <_scanf_i+0xa8>
 8003572:	6822      	ldr	r2, [r4, #0]
 8003574:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003578:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800357c:	d11b      	bne.n	80035b6 <_scanf_i+0xd6>
 800357e:	2110      	movs	r1, #16
 8003580:	6061      	str	r1, [r4, #4]
 8003582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003586:	6022      	str	r2, [r4, #0]
 8003588:	68a2      	ldr	r2, [r4, #8]
 800358a:	1e51      	subs	r1, r2, #1
 800358c:	60a1      	str	r1, [r4, #8]
 800358e:	b192      	cbz	r2, 80035b6 <_scanf_i+0xd6>
 8003590:	6832      	ldr	r2, [r6, #0]
 8003592:	1c51      	adds	r1, r2, #1
 8003594:	6031      	str	r1, [r6, #0]
 8003596:	7812      	ldrb	r2, [r2, #0]
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	1c5d      	adds	r5, r3, #1
 800359c:	6873      	ldr	r3, [r6, #4]
 800359e:	3b01      	subs	r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	6073      	str	r3, [r6, #4]
 80035a4:	dc06      	bgt.n	80035b4 <_scanf_i+0xd4>
 80035a6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80035aa:	4631      	mov	r1, r6
 80035ac:	4658      	mov	r0, fp
 80035ae:	4798      	blx	r3
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d140      	bne.n	8003636 <_scanf_i+0x156>
 80035b4:	462b      	mov	r3, r5
 80035b6:	f108 0801 	add.w	r8, r8, #1
 80035ba:	f1b8 0f03 	cmp.w	r8, #3
 80035be:	d1ba      	bne.n	8003536 <_scanf_i+0x56>
 80035c0:	6862      	ldr	r2, [r4, #4]
 80035c2:	b90a      	cbnz	r2, 80035c8 <_scanf_i+0xe8>
 80035c4:	220a      	movs	r2, #10
 80035c6:	6062      	str	r2, [r4, #4]
 80035c8:	6862      	ldr	r2, [r4, #4]
 80035ca:	493d      	ldr	r1, [pc, #244]	; (80036c0 <_scanf_i+0x1e0>)
 80035cc:	6960      	ldr	r0, [r4, #20]
 80035ce:	9301      	str	r3, [sp, #4]
 80035d0:	1a89      	subs	r1, r1, r2
 80035d2:	f000 f919 	bl	8003808 <__sccl>
 80035d6:	9b01      	ldr	r3, [sp, #4]
 80035d8:	f04f 0800 	mov.w	r8, #0
 80035dc:	461d      	mov	r5, r3
 80035de:	68a3      	ldr	r3, [r4, #8]
 80035e0:	b35b      	cbz	r3, 800363a <_scanf_i+0x15a>
 80035e2:	6831      	ldr	r1, [r6, #0]
 80035e4:	6960      	ldr	r0, [r4, #20]
 80035e6:	780a      	ldrb	r2, [r1, #0]
 80035e8:	5c80      	ldrb	r0, [r0, r2]
 80035ea:	b330      	cbz	r0, 800363a <_scanf_i+0x15a>
 80035ec:	2a30      	cmp	r2, #48	; 0x30
 80035ee:	6822      	ldr	r2, [r4, #0]
 80035f0:	d108      	bne.n	8003604 <_scanf_i+0x124>
 80035f2:	0510      	lsls	r0, r2, #20
 80035f4:	d506      	bpl.n	8003604 <_scanf_i+0x124>
 80035f6:	f108 0801 	add.w	r8, r8, #1
 80035fa:	b14f      	cbz	r7, 8003610 <_scanf_i+0x130>
 80035fc:	3301      	adds	r3, #1
 80035fe:	3f01      	subs	r7, #1
 8003600:	60a3      	str	r3, [r4, #8]
 8003602:	e005      	b.n	8003610 <_scanf_i+0x130>
 8003604:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003608:	6022      	str	r2, [r4, #0]
 800360a:	780b      	ldrb	r3, [r1, #0]
 800360c:	702b      	strb	r3, [r5, #0]
 800360e:	3501      	adds	r5, #1
 8003610:	6873      	ldr	r3, [r6, #4]
 8003612:	3b01      	subs	r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	6073      	str	r3, [r6, #4]
 8003618:	dd03      	ble.n	8003622 <_scanf_i+0x142>
 800361a:	6833      	ldr	r3, [r6, #0]
 800361c:	3301      	adds	r3, #1
 800361e:	6033      	str	r3, [r6, #0]
 8003620:	e005      	b.n	800362e <_scanf_i+0x14e>
 8003622:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003626:	4631      	mov	r1, r6
 8003628:	4658      	mov	r0, fp
 800362a:	4798      	blx	r3
 800362c:	b928      	cbnz	r0, 800363a <_scanf_i+0x15a>
 800362e:	68a3      	ldr	r3, [r4, #8]
 8003630:	3b01      	subs	r3, #1
 8003632:	60a3      	str	r3, [r4, #8]
 8003634:	e7d3      	b.n	80035de <_scanf_i+0xfe>
 8003636:	f04f 0800 	mov.w	r8, #0
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	05d9      	lsls	r1, r3, #23
 800363e:	d50c      	bpl.n	800365a <_scanf_i+0x17a>
 8003640:	454d      	cmp	r5, r9
 8003642:	d908      	bls.n	8003656 <_scanf_i+0x176>
 8003644:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003648:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800364c:	4632      	mov	r2, r6
 800364e:	4658      	mov	r0, fp
 8003650:	4798      	blx	r3
 8003652:	1e6f      	subs	r7, r5, #1
 8003654:	463d      	mov	r5, r7
 8003656:	454d      	cmp	r5, r9
 8003658:	d027      	beq.n	80036aa <_scanf_i+0x1ca>
 800365a:	6822      	ldr	r2, [r4, #0]
 800365c:	f012 0210 	ands.w	r2, r2, #16
 8003660:	d11b      	bne.n	800369a <_scanf_i+0x1ba>
 8003662:	702a      	strb	r2, [r5, #0]
 8003664:	6863      	ldr	r3, [r4, #4]
 8003666:	9e00      	ldr	r6, [sp, #0]
 8003668:	4649      	mov	r1, r9
 800366a:	4658      	mov	r0, fp
 800366c:	47b0      	blx	r6
 800366e:	6822      	ldr	r2, [r4, #0]
 8003670:	f8da 3000 	ldr.w	r3, [sl]
 8003674:	f012 0f20 	tst.w	r2, #32
 8003678:	d107      	bne.n	800368a <_scanf_i+0x1aa>
 800367a:	07d2      	lsls	r2, r2, #31
 800367c:	d505      	bpl.n	800368a <_scanf_i+0x1aa>
 800367e:	1d1a      	adds	r2, r3, #4
 8003680:	f8ca 2000 	str.w	r2, [sl]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	8018      	strh	r0, [r3, #0]
 8003688:	e004      	b.n	8003694 <_scanf_i+0x1b4>
 800368a:	1d1a      	adds	r2, r3, #4
 800368c:	f8ca 2000 	str.w	r2, [sl]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6018      	str	r0, [r3, #0]
 8003694:	68e3      	ldr	r3, [r4, #12]
 8003696:	3301      	adds	r3, #1
 8003698:	60e3      	str	r3, [r4, #12]
 800369a:	6923      	ldr	r3, [r4, #16]
 800369c:	ebc9 0505 	rsb	r5, r9, r5
 80036a0:	4445      	add	r5, r8
 80036a2:	441d      	add	r5, r3
 80036a4:	6125      	str	r5, [r4, #16]
 80036a6:	2000      	movs	r0, #0
 80036a8:	e000      	b.n	80036ac <_scanf_i+0x1cc>
 80036aa:	2001      	movs	r0, #1
 80036ac:	b007      	add	sp, #28
 80036ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036b2:	bf00      	nop
 80036b4:	08003db8 	.word	0x08003db8
 80036b8:	080039fd 	.word	0x080039fd
 80036bc:	080038f1 	.word	0x080038f1
 80036c0:	08005070 	.word	0x08005070

080036c4 <lflush>:
 80036c4:	8983      	ldrh	r3, [r0, #12]
 80036c6:	f003 0309 	and.w	r3, r3, #9
 80036ca:	2b09      	cmp	r3, #9
 80036cc:	d101      	bne.n	80036d2 <lflush+0xe>
 80036ce:	f7ff bb1b 	b.w	8002d08 <fflush>
 80036d2:	2000      	movs	r0, #0
 80036d4:	4770      	bx	lr
	...

080036d8 <__srefill_r>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	460c      	mov	r4, r1
 80036dc:	4605      	mov	r5, r0
 80036de:	b118      	cbz	r0, 80036e8 <__srefill_r+0x10>
 80036e0:	6983      	ldr	r3, [r0, #24]
 80036e2:	b90b      	cbnz	r3, 80036e8 <__srefill_r+0x10>
 80036e4:	f7ff fb62 	bl	8002dac <__sinit>
 80036e8:	4b3a      	ldr	r3, [pc, #232]	; (80037d4 <__srefill_r+0xfc>)
 80036ea:	429c      	cmp	r4, r3
 80036ec:	d101      	bne.n	80036f2 <__srefill_r+0x1a>
 80036ee:	686c      	ldr	r4, [r5, #4]
 80036f0:	e008      	b.n	8003704 <__srefill_r+0x2c>
 80036f2:	4b39      	ldr	r3, [pc, #228]	; (80037d8 <__srefill_r+0x100>)
 80036f4:	429c      	cmp	r4, r3
 80036f6:	d101      	bne.n	80036fc <__srefill_r+0x24>
 80036f8:	68ac      	ldr	r4, [r5, #8]
 80036fa:	e003      	b.n	8003704 <__srefill_r+0x2c>
 80036fc:	4b37      	ldr	r3, [pc, #220]	; (80037dc <__srefill_r+0x104>)
 80036fe:	429c      	cmp	r4, r3
 8003700:	bf08      	it	eq
 8003702:	68ec      	ldreq	r4, [r5, #12]
 8003704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003708:	2300      	movs	r3, #0
 800370a:	6063      	str	r3, [r4, #4]
 800370c:	b293      	uxth	r3, r2
 800370e:	069e      	lsls	r6, r3, #26
 8003710:	d45b      	bmi.n	80037ca <__srefill_r+0xf2>
 8003712:	0758      	lsls	r0, r3, #29
 8003714:	d41a      	bmi.n	800374c <__srefill_r+0x74>
 8003716:	06d9      	lsls	r1, r3, #27
 8003718:	d405      	bmi.n	8003726 <__srefill_r+0x4e>
 800371a:	2309      	movs	r3, #9
 800371c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003720:	602b      	str	r3, [r5, #0]
 8003722:	81a2      	strh	r2, [r4, #12]
 8003724:	e051      	b.n	80037ca <__srefill_r+0xf2>
 8003726:	071a      	lsls	r2, r3, #28
 8003728:	d50b      	bpl.n	8003742 <__srefill_r+0x6a>
 800372a:	4621      	mov	r1, r4
 800372c:	4628      	mov	r0, r5
 800372e:	f7ff fac1 	bl	8002cb4 <_fflush_r>
 8003732:	2800      	cmp	r0, #0
 8003734:	d149      	bne.n	80037ca <__srefill_r+0xf2>
 8003736:	89a3      	ldrh	r3, [r4, #12]
 8003738:	60a0      	str	r0, [r4, #8]
 800373a:	f023 0308 	bic.w	r3, r3, #8
 800373e:	81a3      	strh	r3, [r4, #12]
 8003740:	61a0      	str	r0, [r4, #24]
 8003742:	89a3      	ldrh	r3, [r4, #12]
 8003744:	f043 0304 	orr.w	r3, r3, #4
 8003748:	81a3      	strh	r3, [r4, #12]
 800374a:	e010      	b.n	800376e <__srefill_r+0x96>
 800374c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800374e:	b171      	cbz	r1, 800376e <__srefill_r+0x96>
 8003750:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003754:	4299      	cmp	r1, r3
 8003756:	d002      	beq.n	800375e <__srefill_r+0x86>
 8003758:	4628      	mov	r0, r5
 800375a:	f7ff fc35 	bl	8002fc8 <_free_r>
 800375e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003760:	6063      	str	r3, [r4, #4]
 8003762:	2000      	movs	r0, #0
 8003764:	6360      	str	r0, [r4, #52]	; 0x34
 8003766:	b113      	cbz	r3, 800376e <__srefill_r+0x96>
 8003768:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800376a:	6023      	str	r3, [r4, #0]
 800376c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800376e:	6923      	ldr	r3, [r4, #16]
 8003770:	b91b      	cbnz	r3, 800377a <__srefill_r+0xa2>
 8003772:	4621      	mov	r1, r4
 8003774:	4628      	mov	r0, r5
 8003776:	f7ff fbe3 	bl	8002f40 <__smakebuf_r>
 800377a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800377e:	b2be      	uxth	r6, r7
 8003780:	07b3      	lsls	r3, r6, #30
 8003782:	d00f      	beq.n	80037a4 <__srefill_r+0xcc>
 8003784:	2301      	movs	r3, #1
 8003786:	81a3      	strh	r3, [r4, #12]
 8003788:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <__srefill_r+0x108>)
 800378a:	4916      	ldr	r1, [pc, #88]	; (80037e4 <__srefill_r+0x10c>)
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	f006 0609 	and.w	r6, r6, #9
 8003792:	f7ff fb77 	bl	8002e84 <_fwalk>
 8003796:	2e09      	cmp	r6, #9
 8003798:	81a7      	strh	r7, [r4, #12]
 800379a:	d103      	bne.n	80037a4 <__srefill_r+0xcc>
 800379c:	4621      	mov	r1, r4
 800379e:	4628      	mov	r0, r5
 80037a0:	f7ff fa00 	bl	8002ba4 <__sflush_r>
 80037a4:	6922      	ldr	r2, [r4, #16]
 80037a6:	6022      	str	r2, [r4, #0]
 80037a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80037aa:	6963      	ldr	r3, [r4, #20]
 80037ac:	6a21      	ldr	r1, [r4, #32]
 80037ae:	4628      	mov	r0, r5
 80037b0:	47b0      	blx	r6
 80037b2:	2800      	cmp	r0, #0
 80037b4:	6060      	str	r0, [r4, #4]
 80037b6:	dc0b      	bgt.n	80037d0 <__srefill_r+0xf8>
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	bf17      	itett	ne
 80037bc:	2200      	movne	r2, #0
 80037be:	f043 0320 	orreq.w	r3, r3, #32
 80037c2:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80037c6:	6062      	strne	r2, [r4, #4]
 80037c8:	81a3      	strh	r3, [r4, #12]
 80037ca:	f04f 30ff 	mov.w	r0, #4294967295
 80037ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d0:	2000      	movs	r0, #0
 80037d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d4:	08004ff4 	.word	0x08004ff4
 80037d8:	08005014 	.word	0x08005014
 80037dc:	08005034 	.word	0x08005034
 80037e0:	08005058 	.word	0x08005058
 80037e4:	080036c5 	.word	0x080036c5

080037e8 <_sbrk_r>:
 80037e8:	b538      	push	{r3, r4, r5, lr}
 80037ea:	4c06      	ldr	r4, [pc, #24]	; (8003804 <_sbrk_r+0x1c>)
 80037ec:	2300      	movs	r3, #0
 80037ee:	4605      	mov	r5, r0
 80037f0:	4608      	mov	r0, r1
 80037f2:	6023      	str	r3, [r4, #0]
 80037f4:	f7fe ffec 	bl	80027d0 <_sbrk>
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	d102      	bne.n	8003802 <_sbrk_r+0x1a>
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	b103      	cbz	r3, 8003802 <_sbrk_r+0x1a>
 8003800:	602b      	str	r3, [r5, #0]
 8003802:	bd38      	pop	{r3, r4, r5, pc}
 8003804:	20000224 	.word	0x20000224

08003808 <__sccl>:
 8003808:	b570      	push	{r4, r5, r6, lr}
 800380a:	780b      	ldrb	r3, [r1, #0]
 800380c:	2b5e      	cmp	r3, #94	; 0x5e
 800380e:	bf13      	iteet	ne
 8003810:	1c4a      	addne	r2, r1, #1
 8003812:	1c8a      	addeq	r2, r1, #2
 8003814:	784b      	ldrbeq	r3, [r1, #1]
 8003816:	2100      	movne	r1, #0
 8003818:	bf08      	it	eq
 800381a:	2101      	moveq	r1, #1
 800381c:	1e44      	subs	r4, r0, #1
 800381e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8003822:	f804 1f01 	strb.w	r1, [r4, #1]!
 8003826:	42ac      	cmp	r4, r5
 8003828:	d1fb      	bne.n	8003822 <__sccl+0x1a>
 800382a:	b90b      	cbnz	r3, 8003830 <__sccl+0x28>
 800382c:	1e50      	subs	r0, r2, #1
 800382e:	bd70      	pop	{r4, r5, r6, pc}
 8003830:	f081 0401 	eor.w	r4, r1, #1
 8003834:	54c4      	strb	r4, [r0, r3]
 8003836:	4611      	mov	r1, r2
 8003838:	780d      	ldrb	r5, [r1, #0]
 800383a:	2d2d      	cmp	r5, #45	; 0x2d
 800383c:	f101 0201 	add.w	r2, r1, #1
 8003840:	d006      	beq.n	8003850 <__sccl+0x48>
 8003842:	2d5d      	cmp	r5, #93	; 0x5d
 8003844:	d00f      	beq.n	8003866 <__sccl+0x5e>
 8003846:	b10d      	cbz	r5, 800384c <__sccl+0x44>
 8003848:	462b      	mov	r3, r5
 800384a:	e7f3      	b.n	8003834 <__sccl+0x2c>
 800384c:	4608      	mov	r0, r1
 800384e:	bd70      	pop	{r4, r5, r6, pc}
 8003850:	784e      	ldrb	r6, [r1, #1]
 8003852:	2e5d      	cmp	r6, #93	; 0x5d
 8003854:	d0f8      	beq.n	8003848 <__sccl+0x40>
 8003856:	42b3      	cmp	r3, r6
 8003858:	dcf6      	bgt.n	8003848 <__sccl+0x40>
 800385a:	3102      	adds	r1, #2
 800385c:	3301      	adds	r3, #1
 800385e:	429e      	cmp	r6, r3
 8003860:	54c4      	strb	r4, [r0, r3]
 8003862:	dcfb      	bgt.n	800385c <__sccl+0x54>
 8003864:	e7e8      	b.n	8003838 <__sccl+0x30>
 8003866:	4610      	mov	r0, r2
 8003868:	bd70      	pop	{r4, r5, r6, pc}

0800386a <__sread>:
 800386a:	b510      	push	{r4, lr}
 800386c:	460c      	mov	r4, r1
 800386e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003872:	f000 fa79 	bl	8003d68 <_read_r>
 8003876:	2800      	cmp	r0, #0
 8003878:	bfab      	itete	ge
 800387a:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800387c:	89a3      	ldrhlt	r3, [r4, #12]
 800387e:	181b      	addge	r3, r3, r0
 8003880:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003884:	bfac      	ite	ge
 8003886:	6563      	strge	r3, [r4, #84]	; 0x54
 8003888:	81a3      	strhlt	r3, [r4, #12]
 800388a:	bd10      	pop	{r4, pc}

0800388c <__swrite>:
 800388c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003890:	461f      	mov	r7, r3
 8003892:	898b      	ldrh	r3, [r1, #12]
 8003894:	05db      	lsls	r3, r3, #23
 8003896:	4605      	mov	r5, r0
 8003898:	460c      	mov	r4, r1
 800389a:	4616      	mov	r6, r2
 800389c:	d505      	bpl.n	80038aa <__swrite+0x1e>
 800389e:	2302      	movs	r3, #2
 80038a0:	2200      	movs	r2, #0
 80038a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038a6:	f000 fa19 	bl	8003cdc <_lseek_r>
 80038aa:	89a3      	ldrh	r3, [r4, #12]
 80038ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038b4:	81a3      	strh	r3, [r4, #12]
 80038b6:	4632      	mov	r2, r6
 80038b8:	463b      	mov	r3, r7
 80038ba:	4628      	mov	r0, r5
 80038bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038c0:	f000 b9c8 	b.w	8003c54 <_write_r>

080038c4 <__sseek>:
 80038c4:	b510      	push	{r4, lr}
 80038c6:	460c      	mov	r4, r1
 80038c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038cc:	f000 fa06 	bl	8003cdc <_lseek_r>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	89a3      	ldrh	r3, [r4, #12]
 80038d4:	bf15      	itete	ne
 80038d6:	6560      	strne	r0, [r4, #84]	; 0x54
 80038d8:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80038dc:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80038e0:	81a3      	strheq	r3, [r4, #12]
 80038e2:	bf18      	it	ne
 80038e4:	81a3      	strhne	r3, [r4, #12]
 80038e6:	bd10      	pop	{r4, pc}

080038e8 <__sclose>:
 80038e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038ec:	f000 b9c4 	b.w	8003c78 <_close_r>

080038f0 <_strtol_r>:
 80038f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f4:	4680      	mov	r8, r0
 80038f6:	4840      	ldr	r0, [pc, #256]	; (80039f8 <_strtol_r+0x108>)
 80038f8:	f8d0 9000 	ldr.w	r9, [r0]
 80038fc:	460f      	mov	r7, r1
 80038fe:	463d      	mov	r5, r7
 8003900:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003904:	eb09 0004 	add.w	r0, r9, r4
 8003908:	7840      	ldrb	r0, [r0, #1]
 800390a:	f000 0008 	and.w	r0, r0, #8
 800390e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8003912:	b108      	cbz	r0, 8003918 <_strtol_r+0x28>
 8003914:	462f      	mov	r7, r5
 8003916:	e7f2      	b.n	80038fe <_strtol_r+0xe>
 8003918:	2c2d      	cmp	r4, #45	; 0x2d
 800391a:	d103      	bne.n	8003924 <_strtol_r+0x34>
 800391c:	1cbd      	adds	r5, r7, #2
 800391e:	787c      	ldrb	r4, [r7, #1]
 8003920:	2601      	movs	r6, #1
 8003922:	e003      	b.n	800392c <_strtol_r+0x3c>
 8003924:	2c2b      	cmp	r4, #43	; 0x2b
 8003926:	bf04      	itt	eq
 8003928:	787c      	ldrbeq	r4, [r7, #1]
 800392a:	1cbd      	addeq	r5, r7, #2
 800392c:	b113      	cbz	r3, 8003934 <_strtol_r+0x44>
 800392e:	2b10      	cmp	r3, #16
 8003930:	d10a      	bne.n	8003948 <_strtol_r+0x58>
 8003932:	e05b      	b.n	80039ec <_strtol_r+0xfc>
 8003934:	2c30      	cmp	r4, #48	; 0x30
 8003936:	d157      	bne.n	80039e8 <_strtol_r+0xf8>
 8003938:	7828      	ldrb	r0, [r5, #0]
 800393a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800393e:	2858      	cmp	r0, #88	; 0x58
 8003940:	d14d      	bne.n	80039de <_strtol_r+0xee>
 8003942:	786c      	ldrb	r4, [r5, #1]
 8003944:	2310      	movs	r3, #16
 8003946:	3502      	adds	r5, #2
 8003948:	2e00      	cmp	r6, #0
 800394a:	bf14      	ite	ne
 800394c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8003950:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8003954:	2700      	movs	r7, #0
 8003956:	fbbc faf3 	udiv	sl, ip, r3
 800395a:	4638      	mov	r0, r7
 800395c:	fb03 cc1a 	mls	ip, r3, sl, ip
 8003960:	eb09 0e04 	add.w	lr, r9, r4
 8003964:	f89e e001 	ldrb.w	lr, [lr, #1]
 8003968:	f01e 0f04 	tst.w	lr, #4
 800396c:	d001      	beq.n	8003972 <_strtol_r+0x82>
 800396e:	3c30      	subs	r4, #48	; 0x30
 8003970:	e00b      	b.n	800398a <_strtol_r+0x9a>
 8003972:	f01e 0e03 	ands.w	lr, lr, #3
 8003976:	d01b      	beq.n	80039b0 <_strtol_r+0xc0>
 8003978:	f1be 0f01 	cmp.w	lr, #1
 800397c:	bf0c      	ite	eq
 800397e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8003982:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8003986:	ebce 0404 	rsb	r4, lr, r4
 800398a:	42a3      	cmp	r3, r4
 800398c:	dd10      	ble.n	80039b0 <_strtol_r+0xc0>
 800398e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003992:	d00a      	beq.n	80039aa <_strtol_r+0xba>
 8003994:	4550      	cmp	r0, sl
 8003996:	d806      	bhi.n	80039a6 <_strtol_r+0xb6>
 8003998:	d101      	bne.n	800399e <_strtol_r+0xae>
 800399a:	4564      	cmp	r4, ip
 800399c:	dc03      	bgt.n	80039a6 <_strtol_r+0xb6>
 800399e:	fb03 4000 	mla	r0, r3, r0, r4
 80039a2:	2701      	movs	r7, #1
 80039a4:	e001      	b.n	80039aa <_strtol_r+0xba>
 80039a6:	f04f 37ff 	mov.w	r7, #4294967295
 80039aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80039ae:	e7d7      	b.n	8003960 <_strtol_r+0x70>
 80039b0:	1c7b      	adds	r3, r7, #1
 80039b2:	d10c      	bne.n	80039ce <_strtol_r+0xde>
 80039b4:	2e00      	cmp	r6, #0
 80039b6:	f04f 0322 	mov.w	r3, #34	; 0x22
 80039ba:	bf14      	ite	ne
 80039bc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80039c0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80039c4:	f8c8 3000 	str.w	r3, [r8]
 80039c8:	b92a      	cbnz	r2, 80039d6 <_strtol_r+0xe6>
 80039ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ce:	b106      	cbz	r6, 80039d2 <_strtol_r+0xe2>
 80039d0:	4240      	negs	r0, r0
 80039d2:	b172      	cbz	r2, 80039f2 <_strtol_r+0x102>
 80039d4:	b107      	cbz	r7, 80039d8 <_strtol_r+0xe8>
 80039d6:	1e69      	subs	r1, r5, #1
 80039d8:	6011      	str	r1, [r2, #0]
 80039da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039de:	2430      	movs	r4, #48	; 0x30
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1b1      	bne.n	8003948 <_strtol_r+0x58>
 80039e4:	2308      	movs	r3, #8
 80039e6:	e7af      	b.n	8003948 <_strtol_r+0x58>
 80039e8:	230a      	movs	r3, #10
 80039ea:	e7ad      	b.n	8003948 <_strtol_r+0x58>
 80039ec:	2c30      	cmp	r4, #48	; 0x30
 80039ee:	d0a3      	beq.n	8003938 <_strtol_r+0x48>
 80039f0:	e7aa      	b.n	8003948 <_strtol_r+0x58>
 80039f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f6:	bf00      	nop
 80039f8:	20000108 	.word	0x20000108

080039fc <_strtoul_r>:
 80039fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a00:	4680      	mov	r8, r0
 8003a02:	483c      	ldr	r0, [pc, #240]	; (8003af4 <_strtoul_r+0xf8>)
 8003a04:	f8d0 9000 	ldr.w	r9, [r0]
 8003a08:	460e      	mov	r6, r1
 8003a0a:	4635      	mov	r5, r6
 8003a0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a10:	eb09 0004 	add.w	r0, r9, r4
 8003a14:	7840      	ldrb	r0, [r0, #1]
 8003a16:	f000 0008 	and.w	r0, r0, #8
 8003a1a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8003a1e:	b108      	cbz	r0, 8003a24 <_strtoul_r+0x28>
 8003a20:	462e      	mov	r6, r5
 8003a22:	e7f2      	b.n	8003a0a <_strtoul_r+0xe>
 8003a24:	2c2d      	cmp	r4, #45	; 0x2d
 8003a26:	d103      	bne.n	8003a30 <_strtoul_r+0x34>
 8003a28:	1cb5      	adds	r5, r6, #2
 8003a2a:	7874      	ldrb	r4, [r6, #1]
 8003a2c:	2701      	movs	r7, #1
 8003a2e:	e003      	b.n	8003a38 <_strtoul_r+0x3c>
 8003a30:	2c2b      	cmp	r4, #43	; 0x2b
 8003a32:	bf04      	itt	eq
 8003a34:	7874      	ldrbeq	r4, [r6, #1]
 8003a36:	1cb5      	addeq	r5, r6, #2
 8003a38:	b113      	cbz	r3, 8003a40 <_strtoul_r+0x44>
 8003a3a:	2b10      	cmp	r3, #16
 8003a3c:	d10a      	bne.n	8003a54 <_strtoul_r+0x58>
 8003a3e:	e053      	b.n	8003ae8 <_strtoul_r+0xec>
 8003a40:	2c30      	cmp	r4, #48	; 0x30
 8003a42:	d14f      	bne.n	8003ae4 <_strtoul_r+0xe8>
 8003a44:	7828      	ldrb	r0, [r5, #0]
 8003a46:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003a4a:	2858      	cmp	r0, #88	; 0x58
 8003a4c:	d145      	bne.n	8003ada <_strtoul_r+0xde>
 8003a4e:	786c      	ldrb	r4, [r5, #1]
 8003a50:	2310      	movs	r3, #16
 8003a52:	3502      	adds	r5, #2
 8003a54:	f04f 3cff 	mov.w	ip, #4294967295
 8003a58:	2600      	movs	r6, #0
 8003a5a:	fbbc fcf3 	udiv	ip, ip, r3
 8003a5e:	fb03 fa0c 	mul.w	sl, r3, ip
 8003a62:	ea6f 0a0a 	mvn.w	sl, sl
 8003a66:	4630      	mov	r0, r6
 8003a68:	eb09 0e04 	add.w	lr, r9, r4
 8003a6c:	f89e e001 	ldrb.w	lr, [lr, #1]
 8003a70:	f01e 0f04 	tst.w	lr, #4
 8003a74:	d001      	beq.n	8003a7a <_strtoul_r+0x7e>
 8003a76:	3c30      	subs	r4, #48	; 0x30
 8003a78:	e00b      	b.n	8003a92 <_strtoul_r+0x96>
 8003a7a:	f01e 0e03 	ands.w	lr, lr, #3
 8003a7e:	d01a      	beq.n	8003ab6 <_strtoul_r+0xba>
 8003a80:	f1be 0f01 	cmp.w	lr, #1
 8003a84:	bf0c      	ite	eq
 8003a86:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8003a8a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8003a8e:	ebce 0404 	rsb	r4, lr, r4
 8003a92:	42a3      	cmp	r3, r4
 8003a94:	dd0f      	ble.n	8003ab6 <_strtoul_r+0xba>
 8003a96:	2e00      	cmp	r6, #0
 8003a98:	db08      	blt.n	8003aac <_strtoul_r+0xb0>
 8003a9a:	4560      	cmp	r0, ip
 8003a9c:	d806      	bhi.n	8003aac <_strtoul_r+0xb0>
 8003a9e:	d101      	bne.n	8003aa4 <_strtoul_r+0xa8>
 8003aa0:	4554      	cmp	r4, sl
 8003aa2:	dc03      	bgt.n	8003aac <_strtoul_r+0xb0>
 8003aa4:	fb03 4000 	mla	r0, r3, r0, r4
 8003aa8:	2601      	movs	r6, #1
 8003aaa:	e001      	b.n	8003ab0 <_strtoul_r+0xb4>
 8003aac:	f04f 36ff 	mov.w	r6, #4294967295
 8003ab0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ab4:	e7d8      	b.n	8003a68 <_strtoul_r+0x6c>
 8003ab6:	2e00      	cmp	r6, #0
 8003ab8:	da07      	bge.n	8003aca <_strtoul_r+0xce>
 8003aba:	2322      	movs	r3, #34	; 0x22
 8003abc:	f8c8 3000 	str.w	r3, [r8]
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	b92a      	cbnz	r2, 8003ad2 <_strtoul_r+0xd6>
 8003ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aca:	b107      	cbz	r7, 8003ace <_strtoul_r+0xd2>
 8003acc:	4240      	negs	r0, r0
 8003ace:	b172      	cbz	r2, 8003aee <_strtoul_r+0xf2>
 8003ad0:	b106      	cbz	r6, 8003ad4 <_strtoul_r+0xd8>
 8003ad2:	1e69      	subs	r1, r5, #1
 8003ad4:	6011      	str	r1, [r2, #0]
 8003ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ada:	2430      	movs	r4, #48	; 0x30
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1b9      	bne.n	8003a54 <_strtoul_r+0x58>
 8003ae0:	2308      	movs	r3, #8
 8003ae2:	e7b7      	b.n	8003a54 <_strtoul_r+0x58>
 8003ae4:	230a      	movs	r3, #10
 8003ae6:	e7b5      	b.n	8003a54 <_strtoul_r+0x58>
 8003ae8:	2c30      	cmp	r4, #48	; 0x30
 8003aea:	d0ab      	beq.n	8003a44 <_strtoul_r+0x48>
 8003aec:	e7b2      	b.n	8003a54 <_strtoul_r+0x58>
 8003aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af2:	bf00      	nop
 8003af4:	20000108 	.word	0x20000108

08003af8 <__submore>:
 8003af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003afc:	460c      	mov	r4, r1
 8003afe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003b00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b04:	4299      	cmp	r1, r3
 8003b06:	d11c      	bne.n	8003b42 <__submore+0x4a>
 8003b08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b0c:	f7ff faaa 	bl	8003064 <_malloc_r>
 8003b10:	b918      	cbnz	r0, 8003b1a <__submore+0x22>
 8003b12:	f04f 30ff 	mov.w	r0, #4294967295
 8003b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b1e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003b20:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003b24:	6360      	str	r0, [r4, #52]	; 0x34
 8003b26:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003b2a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003b2e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8003b32:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003b36:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8003b3a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003b3e:	6020      	str	r0, [r4, #0]
 8003b40:	e012      	b.n	8003b68 <__submore+0x70>
 8003b42:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003b44:	0077      	lsls	r7, r6, #1
 8003b46:	463a      	mov	r2, r7
 8003b48:	f000 f8e7 	bl	8003d1a <_realloc_r>
 8003b4c:	4605      	mov	r5, r0
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	d0df      	beq.n	8003b12 <__submore+0x1a>
 8003b52:	eb00 0806 	add.w	r8, r0, r6
 8003b56:	4601      	mov	r1, r0
 8003b58:	4632      	mov	r2, r6
 8003b5a:	4640      	mov	r0, r8
 8003b5c:	f000 f8d0 	bl	8003d00 <memcpy>
 8003b60:	f8c4 8000 	str.w	r8, [r4]
 8003b64:	6365      	str	r5, [r4, #52]	; 0x34
 8003b66:	63a7      	str	r7, [r4, #56]	; 0x38
 8003b68:	2000      	movs	r0, #0
 8003b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003b70 <_ungetc_r>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	1c4d      	adds	r5, r1, #1
 8003b74:	4606      	mov	r6, r0
 8003b76:	460f      	mov	r7, r1
 8003b78:	4614      	mov	r4, r2
 8003b7a:	d102      	bne.n	8003b82 <_ungetc_r+0x12>
 8003b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b82:	b118      	cbz	r0, 8003b8c <_ungetc_r+0x1c>
 8003b84:	6983      	ldr	r3, [r0, #24]
 8003b86:	b90b      	cbnz	r3, 8003b8c <_ungetc_r+0x1c>
 8003b88:	f7ff f910 	bl	8002dac <__sinit>
 8003b8c:	4b2e      	ldr	r3, [pc, #184]	; (8003c48 <_ungetc_r+0xd8>)
 8003b8e:	429c      	cmp	r4, r3
 8003b90:	d101      	bne.n	8003b96 <_ungetc_r+0x26>
 8003b92:	6874      	ldr	r4, [r6, #4]
 8003b94:	e008      	b.n	8003ba8 <_ungetc_r+0x38>
 8003b96:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <_ungetc_r+0xdc>)
 8003b98:	429c      	cmp	r4, r3
 8003b9a:	d101      	bne.n	8003ba0 <_ungetc_r+0x30>
 8003b9c:	68b4      	ldr	r4, [r6, #8]
 8003b9e:	e003      	b.n	8003ba8 <_ungetc_r+0x38>
 8003ba0:	4b2b      	ldr	r3, [pc, #172]	; (8003c50 <_ungetc_r+0xe0>)
 8003ba2:	429c      	cmp	r4, r3
 8003ba4:	bf08      	it	eq
 8003ba6:	68f4      	ldreq	r4, [r6, #12]
 8003ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bac:	f023 0320 	bic.w	r3, r3, #32
 8003bb0:	81a3      	strh	r3, [r4, #12]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	0759      	lsls	r1, r3, #29
 8003bb6:	d413      	bmi.n	8003be0 <_ungetc_r+0x70>
 8003bb8:	06da      	lsls	r2, r3, #27
 8003bba:	d5df      	bpl.n	8003b7c <_ungetc_r+0xc>
 8003bbc:	071b      	lsls	r3, r3, #28
 8003bbe:	d50b      	bpl.n	8003bd8 <_ungetc_r+0x68>
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	f7ff f876 	bl	8002cb4 <_fflush_r>
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	d1d7      	bne.n	8003b7c <_ungetc_r+0xc>
 8003bcc:	89a3      	ldrh	r3, [r4, #12]
 8003bce:	60a0      	str	r0, [r4, #8]
 8003bd0:	f023 0308 	bic.w	r3, r3, #8
 8003bd4:	81a3      	strh	r3, [r4, #12]
 8003bd6:	61a0      	str	r0, [r4, #24]
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	f043 0304 	orr.w	r3, r3, #4
 8003bde:	81a3      	strh	r3, [r4, #12]
 8003be0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003be2:	6862      	ldr	r2, [r4, #4]
 8003be4:	b2fd      	uxtb	r5, r7
 8003be6:	b18b      	cbz	r3, 8003c0c <_ungetc_r+0x9c>
 8003be8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bea:	429a      	cmp	r2, r3
 8003bec:	da07      	bge.n	8003bfe <_ungetc_r+0x8e>
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	1e5a      	subs	r2, r3, #1
 8003bf2:	6022      	str	r2, [r4, #0]
 8003bf4:	f803 7c01 	strb.w	r7, [r3, #-1]
 8003bf8:	6863      	ldr	r3, [r4, #4]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	e020      	b.n	8003c40 <_ungetc_r+0xd0>
 8003bfe:	4621      	mov	r1, r4
 8003c00:	4630      	mov	r0, r6
 8003c02:	f7ff ff79 	bl	8003af8 <__submore>
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d0f1      	beq.n	8003bee <_ungetc_r+0x7e>
 8003c0a:	e7b7      	b.n	8003b7c <_ungetc_r+0xc>
 8003c0c:	6921      	ldr	r1, [r4, #16]
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	b151      	cbz	r1, 8003c28 <_ungetc_r+0xb8>
 8003c12:	4299      	cmp	r1, r3
 8003c14:	d208      	bcs.n	8003c28 <_ungetc_r+0xb8>
 8003c16:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003c1a:	428d      	cmp	r5, r1
 8003c1c:	d104      	bne.n	8003c28 <_ungetc_r+0xb8>
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	3201      	adds	r2, #1
 8003c22:	6023      	str	r3, [r4, #0]
 8003c24:	6062      	str	r2, [r4, #4]
 8003c26:	e00c      	b.n	8003c42 <_ungetc_r+0xd2>
 8003c28:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003c2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c2e:	6363      	str	r3, [r4, #52]	; 0x34
 8003c30:	2303      	movs	r3, #3
 8003c32:	63a3      	str	r3, [r4, #56]	; 0x38
 8003c34:	4623      	mov	r3, r4
 8003c36:	6422      	str	r2, [r4, #64]	; 0x40
 8003c38:	f803 7f46 	strb.w	r7, [r3, #70]!
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	2301      	movs	r3, #1
 8003c40:	6063      	str	r3, [r4, #4]
 8003c42:	4628      	mov	r0, r5
 8003c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c46:	bf00      	nop
 8003c48:	08004ff4 	.word	0x08004ff4
 8003c4c:	08005014 	.word	0x08005014
 8003c50:	08005034 	.word	0x08005034

08003c54 <_write_r>:
 8003c54:	b538      	push	{r3, r4, r5, lr}
 8003c56:	4c07      	ldr	r4, [pc, #28]	; (8003c74 <_write_r+0x20>)
 8003c58:	4605      	mov	r5, r0
 8003c5a:	4608      	mov	r0, r1
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	2200      	movs	r2, #0
 8003c60:	6022      	str	r2, [r4, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f7fe fda8 	bl	80027b8 <_write>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	d102      	bne.n	8003c72 <_write_r+0x1e>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	b103      	cbz	r3, 8003c72 <_write_r+0x1e>
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
 8003c74:	20000224 	.word	0x20000224

08003c78 <_close_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	4c06      	ldr	r4, [pc, #24]	; (8003c94 <_close_r+0x1c>)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	4605      	mov	r5, r0
 8003c80:	4608      	mov	r0, r1
 8003c82:	6023      	str	r3, [r4, #0]
 8003c84:	f7fe fdb2 	bl	80027ec <_close>
 8003c88:	1c43      	adds	r3, r0, #1
 8003c8a:	d102      	bne.n	8003c92 <_close_r+0x1a>
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	b103      	cbz	r3, 8003c92 <_close_r+0x1a>
 8003c90:	602b      	str	r3, [r5, #0]
 8003c92:	bd38      	pop	{r3, r4, r5, pc}
 8003c94:	20000224 	.word	0x20000224

08003c98 <_fstat_r>:
 8003c98:	b538      	push	{r3, r4, r5, lr}
 8003c9a:	4c07      	ldr	r4, [pc, #28]	; (8003cb8 <_fstat_r+0x20>)
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	6023      	str	r3, [r4, #0]
 8003ca6:	f7fe fda9 	bl	80027fc <_fstat>
 8003caa:	1c43      	adds	r3, r0, #1
 8003cac:	d102      	bne.n	8003cb4 <_fstat_r+0x1c>
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	b103      	cbz	r3, 8003cb4 <_fstat_r+0x1c>
 8003cb2:	602b      	str	r3, [r5, #0]
 8003cb4:	bd38      	pop	{r3, r4, r5, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000224 	.word	0x20000224

08003cbc <_isatty_r>:
 8003cbc:	b538      	push	{r3, r4, r5, lr}
 8003cbe:	4c06      	ldr	r4, [pc, #24]	; (8003cd8 <_isatty_r+0x1c>)
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	4605      	mov	r5, r0
 8003cc4:	4608      	mov	r0, r1
 8003cc6:	6023      	str	r3, [r4, #0]
 8003cc8:	f7fe fda0 	bl	800280c <_isatty>
 8003ccc:	1c43      	adds	r3, r0, #1
 8003cce:	d102      	bne.n	8003cd6 <_isatty_r+0x1a>
 8003cd0:	6823      	ldr	r3, [r4, #0]
 8003cd2:	b103      	cbz	r3, 8003cd6 <_isatty_r+0x1a>
 8003cd4:	602b      	str	r3, [r5, #0]
 8003cd6:	bd38      	pop	{r3, r4, r5, pc}
 8003cd8:	20000224 	.word	0x20000224

08003cdc <_lseek_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	4c07      	ldr	r4, [pc, #28]	; (8003cfc <_lseek_r+0x20>)
 8003ce0:	4605      	mov	r5, r0
 8003ce2:	4608      	mov	r0, r1
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	6022      	str	r2, [r4, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	f7fe fd96 	bl	800281c <_lseek>
 8003cf0:	1c43      	adds	r3, r0, #1
 8003cf2:	d102      	bne.n	8003cfa <_lseek_r+0x1e>
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	b103      	cbz	r3, 8003cfa <_lseek_r+0x1e>
 8003cf8:	602b      	str	r3, [r5, #0]
 8003cfa:	bd38      	pop	{r3, r4, r5, pc}
 8003cfc:	20000224 	.word	0x20000224

08003d00 <memcpy>:
 8003d00:	b510      	push	{r4, lr}
 8003d02:	1e43      	subs	r3, r0, #1
 8003d04:	440a      	add	r2, r1
 8003d06:	4291      	cmp	r1, r2
 8003d08:	d004      	beq.n	8003d14 <memcpy+0x14>
 8003d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d12:	e7f8      	b.n	8003d06 <memcpy+0x6>
 8003d14:	bd10      	pop	{r4, pc}

08003d16 <__malloc_lock>:
 8003d16:	4770      	bx	lr

08003d18 <__malloc_unlock>:
 8003d18:	4770      	bx	lr

08003d1a <_realloc_r>:
 8003d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1c:	4607      	mov	r7, r0
 8003d1e:	4615      	mov	r5, r2
 8003d20:	460e      	mov	r6, r1
 8003d22:	b921      	cbnz	r1, 8003d2e <_realloc_r+0x14>
 8003d24:	4611      	mov	r1, r2
 8003d26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d2a:	f7ff b99b 	b.w	8003064 <_malloc_r>
 8003d2e:	b91a      	cbnz	r2, 8003d38 <_realloc_r+0x1e>
 8003d30:	f7ff f94a 	bl	8002fc8 <_free_r>
 8003d34:	4628      	mov	r0, r5
 8003d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d38:	f000 f828 	bl	8003d8c <_malloc_usable_size_r>
 8003d3c:	4285      	cmp	r5, r0
 8003d3e:	d90e      	bls.n	8003d5e <_realloc_r+0x44>
 8003d40:	4629      	mov	r1, r5
 8003d42:	4638      	mov	r0, r7
 8003d44:	f7ff f98e 	bl	8003064 <_malloc_r>
 8003d48:	4604      	mov	r4, r0
 8003d4a:	b150      	cbz	r0, 8003d62 <_realloc_r+0x48>
 8003d4c:	4631      	mov	r1, r6
 8003d4e:	462a      	mov	r2, r5
 8003d50:	f7ff ffd6 	bl	8003d00 <memcpy>
 8003d54:	4631      	mov	r1, r6
 8003d56:	4638      	mov	r0, r7
 8003d58:	f7ff f936 	bl	8002fc8 <_free_r>
 8003d5c:	e001      	b.n	8003d62 <_realloc_r+0x48>
 8003d5e:	4630      	mov	r0, r6
 8003d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d62:	4620      	mov	r0, r4
 8003d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d68 <_read_r>:
 8003d68:	b538      	push	{r3, r4, r5, lr}
 8003d6a:	4c07      	ldr	r4, [pc, #28]	; (8003d88 <_read_r+0x20>)
 8003d6c:	4605      	mov	r5, r0
 8003d6e:	4608      	mov	r0, r1
 8003d70:	4611      	mov	r1, r2
 8003d72:	2200      	movs	r2, #0
 8003d74:	6022      	str	r2, [r4, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	f7fe fd58 	bl	800282c <_read>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d102      	bne.n	8003d86 <_read_r+0x1e>
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	b103      	cbz	r3, 8003d86 <_read_r+0x1e>
 8003d84:	602b      	str	r3, [r5, #0]
 8003d86:	bd38      	pop	{r3, r4, r5, pc}
 8003d88:	20000224 	.word	0x20000224

08003d8c <_malloc_usable_size_r>:
 8003d8c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003d90:	2800      	cmp	r0, #0
 8003d92:	bfbe      	ittt	lt
 8003d94:	1809      	addlt	r1, r1, r0
 8003d96:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8003d9a:	18c0      	addlt	r0, r0, r3
 8003d9c:	3804      	subs	r0, #4
 8003d9e:	4770      	bx	lr

08003da0 <_init>:
 8003da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da2:	bf00      	nop
 8003da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da6:	bc08      	pop	{r3}
 8003da8:	469e      	mov	lr, r3
 8003daa:	4770      	bx	lr

08003dac <_fini>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	bf00      	nop
 8003db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db2:	bc08      	pop	{r3}
 8003db4:	469e      	mov	lr, r3
 8003db6:	4770      	bx	lr
